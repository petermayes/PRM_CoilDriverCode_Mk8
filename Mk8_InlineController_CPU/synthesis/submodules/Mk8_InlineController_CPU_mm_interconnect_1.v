// Mk8_InlineController_CPU_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 646

`timescale 1 ps / 1 ps
module Mk8_InlineController_CPU_mm_interconnect_1 (
		input  wire        clk_50_clk_clk,                                                  //                                                clk_50_clk.clk
		input  wire        mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset, // mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset.reset
		input  wire        Parameter_SYS_pheriphal_reset_reset_bridge_in_reset_reset,       //       Parameter_SYS_pheriphal_reset_reset_bridge_in_reset.reset
		input  wire [10:0] mm_clock_crossing_bridge_1_m0_address,                           //                             mm_clock_crossing_bridge_1_m0.address
		output wire        mm_clock_crossing_bridge_1_m0_waitrequest,                       //                                                          .waitrequest
		input  wire [0:0]  mm_clock_crossing_bridge_1_m0_burstcount,                        //                                                          .burstcount
		input  wire [3:0]  mm_clock_crossing_bridge_1_m0_byteenable,                        //                                                          .byteenable
		input  wire        mm_clock_crossing_bridge_1_m0_read,                              //                                                          .read
		output wire [31:0] mm_clock_crossing_bridge_1_m0_readdata,                          //                                                          .readdata
		output wire        mm_clock_crossing_bridge_1_m0_readdatavalid,                     //                                                          .readdatavalid
		input  wire        mm_clock_crossing_bridge_1_m0_write,                             //                                                          .write
		input  wire [31:0] mm_clock_crossing_bridge_1_m0_writedata,                         //                                                          .writedata
		input  wire        mm_clock_crossing_bridge_1_m0_debugaccess,                       //                                                          .debugaccess
		output wire [2:0]  CurrCTRL_SYS_currctrl_gpio_s1_address,                           //                             CurrCTRL_SYS_currctrl_gpio_s1.address
		output wire        CurrCTRL_SYS_currctrl_gpio_s1_write,                             //                                                          .write
		input  wire [31:0] CurrCTRL_SYS_currctrl_gpio_s1_readdata,                          //                                                          .readdata
		output wire [31:0] CurrCTRL_SYS_currctrl_gpio_s1_writedata,                         //                                                          .writedata
		output wire        CurrCTRL_SYS_currctrl_gpio_s1_chipselect,                        //                                                          .chipselect
		output wire [7:0]  CurrCTRL_SYS_currctrl_register_ram_s1_address,                   //                     CurrCTRL_SYS_currctrl_register_ram_s1.address
		output wire        CurrCTRL_SYS_currctrl_register_ram_s1_write,                     //                                                          .write
		input  wire [31:0] CurrCTRL_SYS_currctrl_register_ram_s1_readdata,                  //                                                          .readdata
		output wire [31:0] CurrCTRL_SYS_currctrl_register_ram_s1_writedata,                 //                                                          .writedata
		output wire [3:0]  CurrCTRL_SYS_currctrl_register_ram_s1_byteenable,                //                                                          .byteenable
		output wire        CurrCTRL_SYS_currctrl_register_ram_s1_chipselect,                //                                                          .chipselect
		output wire        CurrCTRL_SYS_currctrl_register_ram_s1_clken,                     //                                                          .clken
		output wire [4:0]  CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_address,            //              CurrCTRL_SYS_currctrlsys_bridge_avalon_slave.address
		output wire        CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_write,              //                                                          .write
		output wire        CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_read,               //                                                          .read
		input  wire [31:0] CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_readdata,           //                                                          .readdata
		output wire [31:0] CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_writedata,          //                                                          .writedata
		output wire [3:0]  CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_byteenable,         //                                                          .byteenable
		input  wire        CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_waitrequest,        //                                                          .waitrequest
		output wire        CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_chipselect,         //                                                          .chipselect
		output wire [7:0]  Parameter_SYS_crc_init_bridge_avalon_slave_address,              //                Parameter_SYS_crc_init_bridge_avalon_slave.address
		output wire        Parameter_SYS_crc_init_bridge_avalon_slave_write,                //                                                          .write
		output wire        Parameter_SYS_crc_init_bridge_avalon_slave_read,                 //                                                          .read
		input  wire [7:0]  Parameter_SYS_crc_init_bridge_avalon_slave_readdata,             //                                                          .readdata
		output wire [7:0]  Parameter_SYS_crc_init_bridge_avalon_slave_writedata,            //                                                          .writedata
		output wire [0:0]  Parameter_SYS_crc_init_bridge_avalon_slave_byteenable,           //                                                          .byteenable
		input  wire        Parameter_SYS_crc_init_bridge_avalon_slave_waitrequest,          //                                                          .waitrequest
		output wire        Parameter_SYS_crc_init_bridge_avalon_slave_chipselect,           //                                                          .chipselect
		output wire [2:0]  Parameter_SYS_parameter_gpio_s1_address,                         //                           Parameter_SYS_parameter_gpio_s1.address
		output wire        Parameter_SYS_parameter_gpio_s1_write,                           //                                                          .write
		input  wire [31:0] Parameter_SYS_parameter_gpio_s1_readdata,                        //                                                          .readdata
		output wire [31:0] Parameter_SYS_parameter_gpio_s1_writedata,                       //                                                          .writedata
		output wire        Parameter_SYS_parameter_gpio_s1_chipselect,                      //                                                          .chipselect
		output wire [1:0]  Parameter_SYS_parameterlengthpage_s1_address,                    //                      Parameter_SYS_parameterlengthpage_s1.address
		output wire        Parameter_SYS_parameterlengthpage_s1_write,                      //                                                          .write
		input  wire [31:0] Parameter_SYS_parameterlengthpage_s1_readdata,                   //                                                          .readdata
		output wire [31:0] Parameter_SYS_parameterlengthpage_s1_writedata,                  //                                                          .writedata
		output wire        Parameter_SYS_parameterlengthpage_s1_chipselect,                 //                                                          .chipselect
		output wire [2:0]  Pheriphals_led_gpio_s1_address,                                  //                                    Pheriphals_led_gpio_s1.address
		output wire        Pheriphals_led_gpio_s1_write,                                    //                                                          .write
		input  wire [31:0] Pheriphals_led_gpio_s1_readdata,                                 //                                                          .readdata
		output wire [31:0] Pheriphals_led_gpio_s1_writedata,                                //                                                          .writedata
		output wire        Pheriphals_led_gpio_s1_chipselect,                               //                                                          .chipselect
		output wire [2:0]  Pheriphals_tp_gpio_s1_address,                                   //                                     Pheriphals_tp_gpio_s1.address
		output wire        Pheriphals_tp_gpio_s1_write,                                     //                                                          .write
		input  wire [31:0] Pheriphals_tp_gpio_s1_readdata,                                  //                                                          .readdata
		output wire [31:0] Pheriphals_tp_gpio_s1_writedata,                                 //                                                          .writedata
		output wire        Pheriphals_tp_gpio_s1_chipselect,                                //                                                          .chipselect
		output wire [2:0]  TimerSYS_timer_0_s1_address,                                     //                                       TimerSYS_timer_0_s1.address
		output wire        TimerSYS_timer_0_s1_write,                                       //                                                          .write
		input  wire [15:0] TimerSYS_timer_0_s1_readdata,                                    //                                                          .readdata
		output wire [15:0] TimerSYS_timer_0_s1_writedata,                                   //                                                          .writedata
		output wire        TimerSYS_timer_0_s1_chipselect,                                  //                                                          .chipselect
		output wire [2:0]  TimerSYS_timer_1_s1_address,                                     //                                       TimerSYS_timer_1_s1.address
		output wire        TimerSYS_timer_1_s1_write,                                       //                                                          .write
		input  wire [15:0] TimerSYS_timer_1_s1_readdata,                                    //                                                          .readdata
		output wire [15:0] TimerSYS_timer_1_s1_writedata,                                   //                                                          .writedata
		output wire        TimerSYS_timer_1_s1_chipselect,                                  //                                                          .chipselect
		output wire [2:0]  TimerSYS_timer_2_s1_address,                                     //                                       TimerSYS_timer_2_s1.address
		output wire        TimerSYS_timer_2_s1_write,                                       //                                                          .write
		input  wire [15:0] TimerSYS_timer_2_s1_readdata,                                    //                                                          .readdata
		output wire [15:0] TimerSYS_timer_2_s1_writedata,                                   //                                                          .writedata
		output wire        TimerSYS_timer_2_s1_chipselect,                                  //                                                          .chipselect
		output wire [2:0]  USB_Data_SYS_usb_gpio_s1_address,                                //                                  USB_Data_SYS_usb_gpio_s1.address
		output wire        USB_Data_SYS_usb_gpio_s1_write,                                  //                                                          .write
		input  wire [31:0] USB_Data_SYS_usb_gpio_s1_readdata,                               //                                                          .readdata
		output wire [31:0] USB_Data_SYS_usb_gpio_s1_writedata,                              //                                                          .writedata
		output wire        USB_Data_SYS_usb_gpio_s1_chipselect                              //                                                          .chipselect
	);

	wire         mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_waitrequest;   // mm_clock_crossing_bridge_1_m0_agent:av_waitrequest -> mm_clock_crossing_bridge_1_m0_translator:uav_waitrequest
	wire  [31:0] mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_readdata;      // mm_clock_crossing_bridge_1_m0_agent:av_readdata -> mm_clock_crossing_bridge_1_m0_translator:uav_readdata
	wire         mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_debugaccess;   // mm_clock_crossing_bridge_1_m0_translator:uav_debugaccess -> mm_clock_crossing_bridge_1_m0_agent:av_debugaccess
	wire  [10:0] mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_address;       // mm_clock_crossing_bridge_1_m0_translator:uav_address -> mm_clock_crossing_bridge_1_m0_agent:av_address
	wire         mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_read;          // mm_clock_crossing_bridge_1_m0_translator:uav_read -> mm_clock_crossing_bridge_1_m0_agent:av_read
	wire   [3:0] mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_byteenable;    // mm_clock_crossing_bridge_1_m0_translator:uav_byteenable -> mm_clock_crossing_bridge_1_m0_agent:av_byteenable
	wire         mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid; // mm_clock_crossing_bridge_1_m0_agent:av_readdatavalid -> mm_clock_crossing_bridge_1_m0_translator:uav_readdatavalid
	wire         mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_lock;          // mm_clock_crossing_bridge_1_m0_translator:uav_lock -> mm_clock_crossing_bridge_1_m0_agent:av_lock
	wire         mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_write;         // mm_clock_crossing_bridge_1_m0_translator:uav_write -> mm_clock_crossing_bridge_1_m0_agent:av_write
	wire  [31:0] mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_writedata;     // mm_clock_crossing_bridge_1_m0_translator:uav_writedata -> mm_clock_crossing_bridge_1_m0_agent:av_writedata
	wire   [2:0] mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_burstcount;    // mm_clock_crossing_bridge_1_m0_translator:uav_burstcount -> mm_clock_crossing_bridge_1_m0_agent:av_burstcount
	wire   [7:0] parameter_sys_crc_init_bridge_avalon_slave_agent_m0_readdata;                     // Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_readdata -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_readdata
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_m0_waitrequest;                  // Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_waitrequest -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_waitrequest
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_m0_debugaccess;                  // Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_debugaccess -> Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_debugaccess
	wire  [10:0] parameter_sys_crc_init_bridge_avalon_slave_agent_m0_address;                      // Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_address -> Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_address
	wire   [0:0] parameter_sys_crc_init_bridge_avalon_slave_agent_m0_byteenable;                   // Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_byteenable -> Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_byteenable
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_m0_read;                         // Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_read -> Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_read
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_m0_readdatavalid;                // Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_readdatavalid -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_readdatavalid
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_m0_lock;                         // Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_lock -> Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_lock
	wire   [7:0] parameter_sys_crc_init_bridge_avalon_slave_agent_m0_writedata;                    // Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_writedata -> Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_writedata
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_m0_write;                        // Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_write -> Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_write
	wire   [0:0] parameter_sys_crc_init_bridge_avalon_slave_agent_m0_burstcount;                   // Parameter_SYS_crc_init_bridge_avalon_slave_agent:m0_burstcount -> Parameter_SYS_crc_init_bridge_avalon_slave_translator:uav_burstcount
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_valid;                 // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_source_valid -> Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:in_valid
	wire  [60:0] parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_data;                  // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_source_data -> Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:in_data
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_ready;                 // Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:in_ready -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_source_ready
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_startofpacket;         // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_source_startofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_endofpacket;           // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_source_endofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_valid;              // Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:out_valid -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_sink_valid
	wire  [60:0] parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_data;               // Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:out_data -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_sink_data
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_ready;              // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_sink_ready -> Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:out_ready
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_startofpacket;      // Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:out_startofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_sink_startofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_endofpacket;        // Parameter_SYS_crc_init_bridge_avalon_slave_agent_rsp_fifo:out_endofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rf_sink_endofpacket
	wire  [31:0] currctrl_sys_currctrl_gpio_s1_agent_m0_readdata;                                  // CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_readdata -> CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_readdata
	wire         currctrl_sys_currctrl_gpio_s1_agent_m0_waitrequest;                               // CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_waitrequest -> CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_waitrequest
	wire         currctrl_sys_currctrl_gpio_s1_agent_m0_debugaccess;                               // CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_debugaccess -> CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_debugaccess
	wire  [10:0] currctrl_sys_currctrl_gpio_s1_agent_m0_address;                                   // CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_address -> CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_address
	wire   [3:0] currctrl_sys_currctrl_gpio_s1_agent_m0_byteenable;                                // CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_byteenable -> CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_byteenable
	wire         currctrl_sys_currctrl_gpio_s1_agent_m0_read;                                      // CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_read -> CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_read
	wire         currctrl_sys_currctrl_gpio_s1_agent_m0_readdatavalid;                             // CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_readdatavalid -> CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_readdatavalid
	wire         currctrl_sys_currctrl_gpio_s1_agent_m0_lock;                                      // CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_lock -> CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_lock
	wire  [31:0] currctrl_sys_currctrl_gpio_s1_agent_m0_writedata;                                 // CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_writedata -> CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_writedata
	wire         currctrl_sys_currctrl_gpio_s1_agent_m0_write;                                     // CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_write -> CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_write
	wire   [2:0] currctrl_sys_currctrl_gpio_s1_agent_m0_burstcount;                                // CurrCTRL_SYS_currctrl_gpio_s1_agent:m0_burstcount -> CurrCTRL_SYS_currctrl_gpio_s1_translator:uav_burstcount
	wire         currctrl_sys_currctrl_gpio_s1_agent_rf_source_valid;                              // CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_source_valid -> CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:in_valid
	wire  [87:0] currctrl_sys_currctrl_gpio_s1_agent_rf_source_data;                               // CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_source_data -> CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:in_data
	wire         currctrl_sys_currctrl_gpio_s1_agent_rf_source_ready;                              // CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:in_ready -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_source_ready
	wire         currctrl_sys_currctrl_gpio_s1_agent_rf_source_startofpacket;                      // CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_source_startofpacket -> CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:in_startofpacket
	wire         currctrl_sys_currctrl_gpio_s1_agent_rf_source_endofpacket;                        // CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_source_endofpacket -> CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:in_endofpacket
	wire         currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_valid;                           // CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:out_valid -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_sink_valid
	wire  [87:0] currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_data;                            // CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:out_data -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_sink_data
	wire         currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_ready;                           // CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_sink_ready -> CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:out_ready
	wire         currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_startofpacket;                   // CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:out_startofpacket -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_sink_startofpacket
	wire         currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_endofpacket;                     // CurrCTRL_SYS_currctrl_gpio_s1_agent_rsp_fifo:out_endofpacket -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> CurrCTRL_SYS_currctrl_gpio_s1_agent:cp_valid
	wire  [86:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> CurrCTRL_SYS_currctrl_gpio_s1_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                            // CurrCTRL_SYS_currctrl_gpio_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [11:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> CurrCTRL_SYS_currctrl_gpio_s1_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> CurrCTRL_SYS_currctrl_gpio_s1_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> CurrCTRL_SYS_currctrl_gpio_s1_agent:cp_endofpacket
	wire  [31:0] currctrl_sys_currctrl_register_ram_s1_agent_m0_readdata;                          // CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_readdata -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_readdata
	wire         currctrl_sys_currctrl_register_ram_s1_agent_m0_waitrequest;                       // CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_waitrequest -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_waitrequest
	wire         currctrl_sys_currctrl_register_ram_s1_agent_m0_debugaccess;                       // CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_debugaccess -> CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_debugaccess
	wire  [10:0] currctrl_sys_currctrl_register_ram_s1_agent_m0_address;                           // CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_address -> CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_address
	wire   [3:0] currctrl_sys_currctrl_register_ram_s1_agent_m0_byteenable;                        // CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_byteenable -> CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_byteenable
	wire         currctrl_sys_currctrl_register_ram_s1_agent_m0_read;                              // CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_read -> CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_read
	wire         currctrl_sys_currctrl_register_ram_s1_agent_m0_readdatavalid;                     // CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_readdatavalid -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_readdatavalid
	wire         currctrl_sys_currctrl_register_ram_s1_agent_m0_lock;                              // CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_lock -> CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_lock
	wire  [31:0] currctrl_sys_currctrl_register_ram_s1_agent_m0_writedata;                         // CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_writedata -> CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_writedata
	wire         currctrl_sys_currctrl_register_ram_s1_agent_m0_write;                             // CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_write -> CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_write
	wire   [2:0] currctrl_sys_currctrl_register_ram_s1_agent_m0_burstcount;                        // CurrCTRL_SYS_currctrl_register_ram_s1_agent:m0_burstcount -> CurrCTRL_SYS_currctrl_register_ram_s1_translator:uav_burstcount
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rf_source_valid;                      // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_source_valid -> CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:in_valid
	wire  [87:0] currctrl_sys_currctrl_register_ram_s1_agent_rf_source_data;                       // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_source_data -> CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:in_data
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rf_source_ready;                      // CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:in_ready -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_source_ready
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rf_source_startofpacket;              // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_source_startofpacket -> CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:in_startofpacket
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rf_source_endofpacket;                // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_source_endofpacket -> CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:in_endofpacket
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_valid;                   // CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:out_valid -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_sink_valid
	wire  [87:0] currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_data;                    // CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:out_data -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_sink_data
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_ready;                   // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_sink_ready -> CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:out_ready
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_startofpacket;           // CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:out_startofpacket -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_sink_startofpacket
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_endofpacket;             // CurrCTRL_SYS_currctrl_register_ram_s1_agent_rsp_fifo:out_endofpacket -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:cp_valid
	wire  [86:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                            // CurrCTRL_SYS_currctrl_register_ram_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [11:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:cp_endofpacket
	wire  [31:0] currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_readdata;                   // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_readdata -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_readdata
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_waitrequest;                // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_waitrequest -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_waitrequest
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_debugaccess;                // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_debugaccess -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_debugaccess
	wire  [10:0] currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_address;                    // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_address -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_address
	wire   [3:0] currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_byteenable;                 // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_byteenable -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_byteenable
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_read;                       // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_read -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_read
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_readdatavalid;              // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_readdatavalid -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_readdatavalid
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_lock;                       // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_lock -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_lock
	wire  [31:0] currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_writedata;                  // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_writedata -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_writedata
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_write;                      // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_write -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_write
	wire   [2:0] currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_burstcount;                 // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:m0_burstcount -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_translator:uav_burstcount
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_valid;               // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_source_valid -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:in_valid
	wire  [87:0] currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_data;                // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_source_data -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:in_data
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_ready;               // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:in_ready -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_source_ready
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_startofpacket;       // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_source_startofpacket -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_endofpacket;         // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_source_endofpacket -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_valid;            // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:out_valid -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_sink_valid
	wire  [87:0] currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_data;             // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:out_data -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_sink_data
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_ready;            // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_sink_ready -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:out_ready
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_startofpacket;    // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:out_startofpacket -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_sink_startofpacket
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_endofpacket;      // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent_rsp_fifo:out_endofpacket -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:cp_valid
	wire  [86:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                            // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [11:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:cp_endofpacket
	wire  [31:0] pheriphals_led_gpio_s1_agent_m0_readdata;                                         // Pheriphals_led_gpio_s1_translator:uav_readdata -> Pheriphals_led_gpio_s1_agent:m0_readdata
	wire         pheriphals_led_gpio_s1_agent_m0_waitrequest;                                      // Pheriphals_led_gpio_s1_translator:uav_waitrequest -> Pheriphals_led_gpio_s1_agent:m0_waitrequest
	wire         pheriphals_led_gpio_s1_agent_m0_debugaccess;                                      // Pheriphals_led_gpio_s1_agent:m0_debugaccess -> Pheriphals_led_gpio_s1_translator:uav_debugaccess
	wire  [10:0] pheriphals_led_gpio_s1_agent_m0_address;                                          // Pheriphals_led_gpio_s1_agent:m0_address -> Pheriphals_led_gpio_s1_translator:uav_address
	wire   [3:0] pheriphals_led_gpio_s1_agent_m0_byteenable;                                       // Pheriphals_led_gpio_s1_agent:m0_byteenable -> Pheriphals_led_gpio_s1_translator:uav_byteenable
	wire         pheriphals_led_gpio_s1_agent_m0_read;                                             // Pheriphals_led_gpio_s1_agent:m0_read -> Pheriphals_led_gpio_s1_translator:uav_read
	wire         pheriphals_led_gpio_s1_agent_m0_readdatavalid;                                    // Pheriphals_led_gpio_s1_translator:uav_readdatavalid -> Pheriphals_led_gpio_s1_agent:m0_readdatavalid
	wire         pheriphals_led_gpio_s1_agent_m0_lock;                                             // Pheriphals_led_gpio_s1_agent:m0_lock -> Pheriphals_led_gpio_s1_translator:uav_lock
	wire  [31:0] pheriphals_led_gpio_s1_agent_m0_writedata;                                        // Pheriphals_led_gpio_s1_agent:m0_writedata -> Pheriphals_led_gpio_s1_translator:uav_writedata
	wire         pheriphals_led_gpio_s1_agent_m0_write;                                            // Pheriphals_led_gpio_s1_agent:m0_write -> Pheriphals_led_gpio_s1_translator:uav_write
	wire   [2:0] pheriphals_led_gpio_s1_agent_m0_burstcount;                                       // Pheriphals_led_gpio_s1_agent:m0_burstcount -> Pheriphals_led_gpio_s1_translator:uav_burstcount
	wire         pheriphals_led_gpio_s1_agent_rf_source_valid;                                     // Pheriphals_led_gpio_s1_agent:rf_source_valid -> Pheriphals_led_gpio_s1_agent_rsp_fifo:in_valid
	wire  [87:0] pheriphals_led_gpio_s1_agent_rf_source_data;                                      // Pheriphals_led_gpio_s1_agent:rf_source_data -> Pheriphals_led_gpio_s1_agent_rsp_fifo:in_data
	wire         pheriphals_led_gpio_s1_agent_rf_source_ready;                                     // Pheriphals_led_gpio_s1_agent_rsp_fifo:in_ready -> Pheriphals_led_gpio_s1_agent:rf_source_ready
	wire         pheriphals_led_gpio_s1_agent_rf_source_startofpacket;                             // Pheriphals_led_gpio_s1_agent:rf_source_startofpacket -> Pheriphals_led_gpio_s1_agent_rsp_fifo:in_startofpacket
	wire         pheriphals_led_gpio_s1_agent_rf_source_endofpacket;                               // Pheriphals_led_gpio_s1_agent:rf_source_endofpacket -> Pheriphals_led_gpio_s1_agent_rsp_fifo:in_endofpacket
	wire         pheriphals_led_gpio_s1_agent_rsp_fifo_out_valid;                                  // Pheriphals_led_gpio_s1_agent_rsp_fifo:out_valid -> Pheriphals_led_gpio_s1_agent:rf_sink_valid
	wire  [87:0] pheriphals_led_gpio_s1_agent_rsp_fifo_out_data;                                   // Pheriphals_led_gpio_s1_agent_rsp_fifo:out_data -> Pheriphals_led_gpio_s1_agent:rf_sink_data
	wire         pheriphals_led_gpio_s1_agent_rsp_fifo_out_ready;                                  // Pheriphals_led_gpio_s1_agent:rf_sink_ready -> Pheriphals_led_gpio_s1_agent_rsp_fifo:out_ready
	wire         pheriphals_led_gpio_s1_agent_rsp_fifo_out_startofpacket;                          // Pheriphals_led_gpio_s1_agent_rsp_fifo:out_startofpacket -> Pheriphals_led_gpio_s1_agent:rf_sink_startofpacket
	wire         pheriphals_led_gpio_s1_agent_rsp_fifo_out_endofpacket;                            // Pheriphals_led_gpio_s1_agent_rsp_fifo:out_endofpacket -> Pheriphals_led_gpio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> Pheriphals_led_gpio_s1_agent:cp_valid
	wire  [86:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> Pheriphals_led_gpio_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                            // Pheriphals_led_gpio_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [11:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> Pheriphals_led_gpio_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> Pheriphals_led_gpio_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> Pheriphals_led_gpio_s1_agent:cp_endofpacket
	wire  [31:0] parameter_sys_parameter_gpio_s1_agent_m0_readdata;                                // Parameter_SYS_parameter_gpio_s1_translator:uav_readdata -> Parameter_SYS_parameter_gpio_s1_agent:m0_readdata
	wire         parameter_sys_parameter_gpio_s1_agent_m0_waitrequest;                             // Parameter_SYS_parameter_gpio_s1_translator:uav_waitrequest -> Parameter_SYS_parameter_gpio_s1_agent:m0_waitrequest
	wire         parameter_sys_parameter_gpio_s1_agent_m0_debugaccess;                             // Parameter_SYS_parameter_gpio_s1_agent:m0_debugaccess -> Parameter_SYS_parameter_gpio_s1_translator:uav_debugaccess
	wire  [10:0] parameter_sys_parameter_gpio_s1_agent_m0_address;                                 // Parameter_SYS_parameter_gpio_s1_agent:m0_address -> Parameter_SYS_parameter_gpio_s1_translator:uav_address
	wire   [3:0] parameter_sys_parameter_gpio_s1_agent_m0_byteenable;                              // Parameter_SYS_parameter_gpio_s1_agent:m0_byteenable -> Parameter_SYS_parameter_gpio_s1_translator:uav_byteenable
	wire         parameter_sys_parameter_gpio_s1_agent_m0_read;                                    // Parameter_SYS_parameter_gpio_s1_agent:m0_read -> Parameter_SYS_parameter_gpio_s1_translator:uav_read
	wire         parameter_sys_parameter_gpio_s1_agent_m0_readdatavalid;                           // Parameter_SYS_parameter_gpio_s1_translator:uav_readdatavalid -> Parameter_SYS_parameter_gpio_s1_agent:m0_readdatavalid
	wire         parameter_sys_parameter_gpio_s1_agent_m0_lock;                                    // Parameter_SYS_parameter_gpio_s1_agent:m0_lock -> Parameter_SYS_parameter_gpio_s1_translator:uav_lock
	wire  [31:0] parameter_sys_parameter_gpio_s1_agent_m0_writedata;                               // Parameter_SYS_parameter_gpio_s1_agent:m0_writedata -> Parameter_SYS_parameter_gpio_s1_translator:uav_writedata
	wire         parameter_sys_parameter_gpio_s1_agent_m0_write;                                   // Parameter_SYS_parameter_gpio_s1_agent:m0_write -> Parameter_SYS_parameter_gpio_s1_translator:uav_write
	wire   [2:0] parameter_sys_parameter_gpio_s1_agent_m0_burstcount;                              // Parameter_SYS_parameter_gpio_s1_agent:m0_burstcount -> Parameter_SYS_parameter_gpio_s1_translator:uav_burstcount
	wire         parameter_sys_parameter_gpio_s1_agent_rf_source_valid;                            // Parameter_SYS_parameter_gpio_s1_agent:rf_source_valid -> Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:in_valid
	wire  [87:0] parameter_sys_parameter_gpio_s1_agent_rf_source_data;                             // Parameter_SYS_parameter_gpio_s1_agent:rf_source_data -> Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:in_data
	wire         parameter_sys_parameter_gpio_s1_agent_rf_source_ready;                            // Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:in_ready -> Parameter_SYS_parameter_gpio_s1_agent:rf_source_ready
	wire         parameter_sys_parameter_gpio_s1_agent_rf_source_startofpacket;                    // Parameter_SYS_parameter_gpio_s1_agent:rf_source_startofpacket -> Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:in_startofpacket
	wire         parameter_sys_parameter_gpio_s1_agent_rf_source_endofpacket;                      // Parameter_SYS_parameter_gpio_s1_agent:rf_source_endofpacket -> Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:in_endofpacket
	wire         parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_valid;                         // Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:out_valid -> Parameter_SYS_parameter_gpio_s1_agent:rf_sink_valid
	wire  [87:0] parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_data;                          // Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:out_data -> Parameter_SYS_parameter_gpio_s1_agent:rf_sink_data
	wire         parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_ready;                         // Parameter_SYS_parameter_gpio_s1_agent:rf_sink_ready -> Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:out_ready
	wire         parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_startofpacket;                 // Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:out_startofpacket -> Parameter_SYS_parameter_gpio_s1_agent:rf_sink_startofpacket
	wire         parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_endofpacket;                   // Parameter_SYS_parameter_gpio_s1_agent_rsp_fifo:out_endofpacket -> Parameter_SYS_parameter_gpio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                            // cmd_mux_005:src_valid -> Parameter_SYS_parameter_gpio_s1_agent:cp_valid
	wire  [86:0] cmd_mux_005_src_data;                                                             // cmd_mux_005:src_data -> Parameter_SYS_parameter_gpio_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                            // Parameter_SYS_parameter_gpio_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [11:0] cmd_mux_005_src_channel;                                                          // cmd_mux_005:src_channel -> Parameter_SYS_parameter_gpio_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                    // cmd_mux_005:src_startofpacket -> Parameter_SYS_parameter_gpio_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                      // cmd_mux_005:src_endofpacket -> Parameter_SYS_parameter_gpio_s1_agent:cp_endofpacket
	wire  [31:0] parameter_sys_parameterlengthpage_s1_agent_m0_readdata;                           // Parameter_SYS_parameterlengthpage_s1_translator:uav_readdata -> Parameter_SYS_parameterlengthpage_s1_agent:m0_readdata
	wire         parameter_sys_parameterlengthpage_s1_agent_m0_waitrequest;                        // Parameter_SYS_parameterlengthpage_s1_translator:uav_waitrequest -> Parameter_SYS_parameterlengthpage_s1_agent:m0_waitrequest
	wire         parameter_sys_parameterlengthpage_s1_agent_m0_debugaccess;                        // Parameter_SYS_parameterlengthpage_s1_agent:m0_debugaccess -> Parameter_SYS_parameterlengthpage_s1_translator:uav_debugaccess
	wire  [10:0] parameter_sys_parameterlengthpage_s1_agent_m0_address;                            // Parameter_SYS_parameterlengthpage_s1_agent:m0_address -> Parameter_SYS_parameterlengthpage_s1_translator:uav_address
	wire   [3:0] parameter_sys_parameterlengthpage_s1_agent_m0_byteenable;                         // Parameter_SYS_parameterlengthpage_s1_agent:m0_byteenable -> Parameter_SYS_parameterlengthpage_s1_translator:uav_byteenable
	wire         parameter_sys_parameterlengthpage_s1_agent_m0_read;                               // Parameter_SYS_parameterlengthpage_s1_agent:m0_read -> Parameter_SYS_parameterlengthpage_s1_translator:uav_read
	wire         parameter_sys_parameterlengthpage_s1_agent_m0_readdatavalid;                      // Parameter_SYS_parameterlengthpage_s1_translator:uav_readdatavalid -> Parameter_SYS_parameterlengthpage_s1_agent:m0_readdatavalid
	wire         parameter_sys_parameterlengthpage_s1_agent_m0_lock;                               // Parameter_SYS_parameterlengthpage_s1_agent:m0_lock -> Parameter_SYS_parameterlengthpage_s1_translator:uav_lock
	wire  [31:0] parameter_sys_parameterlengthpage_s1_agent_m0_writedata;                          // Parameter_SYS_parameterlengthpage_s1_agent:m0_writedata -> Parameter_SYS_parameterlengthpage_s1_translator:uav_writedata
	wire         parameter_sys_parameterlengthpage_s1_agent_m0_write;                              // Parameter_SYS_parameterlengthpage_s1_agent:m0_write -> Parameter_SYS_parameterlengthpage_s1_translator:uav_write
	wire   [2:0] parameter_sys_parameterlengthpage_s1_agent_m0_burstcount;                         // Parameter_SYS_parameterlengthpage_s1_agent:m0_burstcount -> Parameter_SYS_parameterlengthpage_s1_translator:uav_burstcount
	wire         parameter_sys_parameterlengthpage_s1_agent_rf_source_valid;                       // Parameter_SYS_parameterlengthpage_s1_agent:rf_source_valid -> Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:in_valid
	wire  [87:0] parameter_sys_parameterlengthpage_s1_agent_rf_source_data;                        // Parameter_SYS_parameterlengthpage_s1_agent:rf_source_data -> Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:in_data
	wire         parameter_sys_parameterlengthpage_s1_agent_rf_source_ready;                       // Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:in_ready -> Parameter_SYS_parameterlengthpage_s1_agent:rf_source_ready
	wire         parameter_sys_parameterlengthpage_s1_agent_rf_source_startofpacket;               // Parameter_SYS_parameterlengthpage_s1_agent:rf_source_startofpacket -> Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:in_startofpacket
	wire         parameter_sys_parameterlengthpage_s1_agent_rf_source_endofpacket;                 // Parameter_SYS_parameterlengthpage_s1_agent:rf_source_endofpacket -> Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:in_endofpacket
	wire         parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_valid;                    // Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:out_valid -> Parameter_SYS_parameterlengthpage_s1_agent:rf_sink_valid
	wire  [87:0] parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_data;                     // Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:out_data -> Parameter_SYS_parameterlengthpage_s1_agent:rf_sink_data
	wire         parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_ready;                    // Parameter_SYS_parameterlengthpage_s1_agent:rf_sink_ready -> Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:out_ready
	wire         parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_startofpacket;            // Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:out_startofpacket -> Parameter_SYS_parameterlengthpage_s1_agent:rf_sink_startofpacket
	wire         parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_endofpacket;              // Parameter_SYS_parameterlengthpage_s1_agent_rsp_fifo:out_endofpacket -> Parameter_SYS_parameterlengthpage_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                            // cmd_mux_006:src_valid -> Parameter_SYS_parameterlengthpage_s1_agent:cp_valid
	wire  [86:0] cmd_mux_006_src_data;                                                             // cmd_mux_006:src_data -> Parameter_SYS_parameterlengthpage_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                            // Parameter_SYS_parameterlengthpage_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [11:0] cmd_mux_006_src_channel;                                                          // cmd_mux_006:src_channel -> Parameter_SYS_parameterlengthpage_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                    // cmd_mux_006:src_startofpacket -> Parameter_SYS_parameterlengthpage_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                      // cmd_mux_006:src_endofpacket -> Parameter_SYS_parameterlengthpage_s1_agent:cp_endofpacket
	wire  [31:0] timersys_timer_0_s1_agent_m0_readdata;                                            // TimerSYS_timer_0_s1_translator:uav_readdata -> TimerSYS_timer_0_s1_agent:m0_readdata
	wire         timersys_timer_0_s1_agent_m0_waitrequest;                                         // TimerSYS_timer_0_s1_translator:uav_waitrequest -> TimerSYS_timer_0_s1_agent:m0_waitrequest
	wire         timersys_timer_0_s1_agent_m0_debugaccess;                                         // TimerSYS_timer_0_s1_agent:m0_debugaccess -> TimerSYS_timer_0_s1_translator:uav_debugaccess
	wire  [10:0] timersys_timer_0_s1_agent_m0_address;                                             // TimerSYS_timer_0_s1_agent:m0_address -> TimerSYS_timer_0_s1_translator:uav_address
	wire   [3:0] timersys_timer_0_s1_agent_m0_byteenable;                                          // TimerSYS_timer_0_s1_agent:m0_byteenable -> TimerSYS_timer_0_s1_translator:uav_byteenable
	wire         timersys_timer_0_s1_agent_m0_read;                                                // TimerSYS_timer_0_s1_agent:m0_read -> TimerSYS_timer_0_s1_translator:uav_read
	wire         timersys_timer_0_s1_agent_m0_readdatavalid;                                       // TimerSYS_timer_0_s1_translator:uav_readdatavalid -> TimerSYS_timer_0_s1_agent:m0_readdatavalid
	wire         timersys_timer_0_s1_agent_m0_lock;                                                // TimerSYS_timer_0_s1_agent:m0_lock -> TimerSYS_timer_0_s1_translator:uav_lock
	wire  [31:0] timersys_timer_0_s1_agent_m0_writedata;                                           // TimerSYS_timer_0_s1_agent:m0_writedata -> TimerSYS_timer_0_s1_translator:uav_writedata
	wire         timersys_timer_0_s1_agent_m0_write;                                               // TimerSYS_timer_0_s1_agent:m0_write -> TimerSYS_timer_0_s1_translator:uav_write
	wire   [2:0] timersys_timer_0_s1_agent_m0_burstcount;                                          // TimerSYS_timer_0_s1_agent:m0_burstcount -> TimerSYS_timer_0_s1_translator:uav_burstcount
	wire         timersys_timer_0_s1_agent_rf_source_valid;                                        // TimerSYS_timer_0_s1_agent:rf_source_valid -> TimerSYS_timer_0_s1_agent_rsp_fifo:in_valid
	wire  [87:0] timersys_timer_0_s1_agent_rf_source_data;                                         // TimerSYS_timer_0_s1_agent:rf_source_data -> TimerSYS_timer_0_s1_agent_rsp_fifo:in_data
	wire         timersys_timer_0_s1_agent_rf_source_ready;                                        // TimerSYS_timer_0_s1_agent_rsp_fifo:in_ready -> TimerSYS_timer_0_s1_agent:rf_source_ready
	wire         timersys_timer_0_s1_agent_rf_source_startofpacket;                                // TimerSYS_timer_0_s1_agent:rf_source_startofpacket -> TimerSYS_timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire         timersys_timer_0_s1_agent_rf_source_endofpacket;                                  // TimerSYS_timer_0_s1_agent:rf_source_endofpacket -> TimerSYS_timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire         timersys_timer_0_s1_agent_rsp_fifo_out_valid;                                     // TimerSYS_timer_0_s1_agent_rsp_fifo:out_valid -> TimerSYS_timer_0_s1_agent:rf_sink_valid
	wire  [87:0] timersys_timer_0_s1_agent_rsp_fifo_out_data;                                      // TimerSYS_timer_0_s1_agent_rsp_fifo:out_data -> TimerSYS_timer_0_s1_agent:rf_sink_data
	wire         timersys_timer_0_s1_agent_rsp_fifo_out_ready;                                     // TimerSYS_timer_0_s1_agent:rf_sink_ready -> TimerSYS_timer_0_s1_agent_rsp_fifo:out_ready
	wire         timersys_timer_0_s1_agent_rsp_fifo_out_startofpacket;                             // TimerSYS_timer_0_s1_agent_rsp_fifo:out_startofpacket -> TimerSYS_timer_0_s1_agent:rf_sink_startofpacket
	wire         timersys_timer_0_s1_agent_rsp_fifo_out_endofpacket;                               // TimerSYS_timer_0_s1_agent_rsp_fifo:out_endofpacket -> TimerSYS_timer_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                            // cmd_mux_007:src_valid -> TimerSYS_timer_0_s1_agent:cp_valid
	wire  [86:0] cmd_mux_007_src_data;                                                             // cmd_mux_007:src_data -> TimerSYS_timer_0_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                            // TimerSYS_timer_0_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [11:0] cmd_mux_007_src_channel;                                                          // cmd_mux_007:src_channel -> TimerSYS_timer_0_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                    // cmd_mux_007:src_startofpacket -> TimerSYS_timer_0_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                      // cmd_mux_007:src_endofpacket -> TimerSYS_timer_0_s1_agent:cp_endofpacket
	wire  [31:0] timersys_timer_1_s1_agent_m0_readdata;                                            // TimerSYS_timer_1_s1_translator:uav_readdata -> TimerSYS_timer_1_s1_agent:m0_readdata
	wire         timersys_timer_1_s1_agent_m0_waitrequest;                                         // TimerSYS_timer_1_s1_translator:uav_waitrequest -> TimerSYS_timer_1_s1_agent:m0_waitrequest
	wire         timersys_timer_1_s1_agent_m0_debugaccess;                                         // TimerSYS_timer_1_s1_agent:m0_debugaccess -> TimerSYS_timer_1_s1_translator:uav_debugaccess
	wire  [10:0] timersys_timer_1_s1_agent_m0_address;                                             // TimerSYS_timer_1_s1_agent:m0_address -> TimerSYS_timer_1_s1_translator:uav_address
	wire   [3:0] timersys_timer_1_s1_agent_m0_byteenable;                                          // TimerSYS_timer_1_s1_agent:m0_byteenable -> TimerSYS_timer_1_s1_translator:uav_byteenable
	wire         timersys_timer_1_s1_agent_m0_read;                                                // TimerSYS_timer_1_s1_agent:m0_read -> TimerSYS_timer_1_s1_translator:uav_read
	wire         timersys_timer_1_s1_agent_m0_readdatavalid;                                       // TimerSYS_timer_1_s1_translator:uav_readdatavalid -> TimerSYS_timer_1_s1_agent:m0_readdatavalid
	wire         timersys_timer_1_s1_agent_m0_lock;                                                // TimerSYS_timer_1_s1_agent:m0_lock -> TimerSYS_timer_1_s1_translator:uav_lock
	wire  [31:0] timersys_timer_1_s1_agent_m0_writedata;                                           // TimerSYS_timer_1_s1_agent:m0_writedata -> TimerSYS_timer_1_s1_translator:uav_writedata
	wire         timersys_timer_1_s1_agent_m0_write;                                               // TimerSYS_timer_1_s1_agent:m0_write -> TimerSYS_timer_1_s1_translator:uav_write
	wire   [2:0] timersys_timer_1_s1_agent_m0_burstcount;                                          // TimerSYS_timer_1_s1_agent:m0_burstcount -> TimerSYS_timer_1_s1_translator:uav_burstcount
	wire         timersys_timer_1_s1_agent_rf_source_valid;                                        // TimerSYS_timer_1_s1_agent:rf_source_valid -> TimerSYS_timer_1_s1_agent_rsp_fifo:in_valid
	wire  [87:0] timersys_timer_1_s1_agent_rf_source_data;                                         // TimerSYS_timer_1_s1_agent:rf_source_data -> TimerSYS_timer_1_s1_agent_rsp_fifo:in_data
	wire         timersys_timer_1_s1_agent_rf_source_ready;                                        // TimerSYS_timer_1_s1_agent_rsp_fifo:in_ready -> TimerSYS_timer_1_s1_agent:rf_source_ready
	wire         timersys_timer_1_s1_agent_rf_source_startofpacket;                                // TimerSYS_timer_1_s1_agent:rf_source_startofpacket -> TimerSYS_timer_1_s1_agent_rsp_fifo:in_startofpacket
	wire         timersys_timer_1_s1_agent_rf_source_endofpacket;                                  // TimerSYS_timer_1_s1_agent:rf_source_endofpacket -> TimerSYS_timer_1_s1_agent_rsp_fifo:in_endofpacket
	wire         timersys_timer_1_s1_agent_rsp_fifo_out_valid;                                     // TimerSYS_timer_1_s1_agent_rsp_fifo:out_valid -> TimerSYS_timer_1_s1_agent:rf_sink_valid
	wire  [87:0] timersys_timer_1_s1_agent_rsp_fifo_out_data;                                      // TimerSYS_timer_1_s1_agent_rsp_fifo:out_data -> TimerSYS_timer_1_s1_agent:rf_sink_data
	wire         timersys_timer_1_s1_agent_rsp_fifo_out_ready;                                     // TimerSYS_timer_1_s1_agent:rf_sink_ready -> TimerSYS_timer_1_s1_agent_rsp_fifo:out_ready
	wire         timersys_timer_1_s1_agent_rsp_fifo_out_startofpacket;                             // TimerSYS_timer_1_s1_agent_rsp_fifo:out_startofpacket -> TimerSYS_timer_1_s1_agent:rf_sink_startofpacket
	wire         timersys_timer_1_s1_agent_rsp_fifo_out_endofpacket;                               // TimerSYS_timer_1_s1_agent_rsp_fifo:out_endofpacket -> TimerSYS_timer_1_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                            // cmd_mux_008:src_valid -> TimerSYS_timer_1_s1_agent:cp_valid
	wire  [86:0] cmd_mux_008_src_data;                                                             // cmd_mux_008:src_data -> TimerSYS_timer_1_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                            // TimerSYS_timer_1_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [11:0] cmd_mux_008_src_channel;                                                          // cmd_mux_008:src_channel -> TimerSYS_timer_1_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                    // cmd_mux_008:src_startofpacket -> TimerSYS_timer_1_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                      // cmd_mux_008:src_endofpacket -> TimerSYS_timer_1_s1_agent:cp_endofpacket
	wire  [31:0] timersys_timer_2_s1_agent_m0_readdata;                                            // TimerSYS_timer_2_s1_translator:uav_readdata -> TimerSYS_timer_2_s1_agent:m0_readdata
	wire         timersys_timer_2_s1_agent_m0_waitrequest;                                         // TimerSYS_timer_2_s1_translator:uav_waitrequest -> TimerSYS_timer_2_s1_agent:m0_waitrequest
	wire         timersys_timer_2_s1_agent_m0_debugaccess;                                         // TimerSYS_timer_2_s1_agent:m0_debugaccess -> TimerSYS_timer_2_s1_translator:uav_debugaccess
	wire  [10:0] timersys_timer_2_s1_agent_m0_address;                                             // TimerSYS_timer_2_s1_agent:m0_address -> TimerSYS_timer_2_s1_translator:uav_address
	wire   [3:0] timersys_timer_2_s1_agent_m0_byteenable;                                          // TimerSYS_timer_2_s1_agent:m0_byteenable -> TimerSYS_timer_2_s1_translator:uav_byteenable
	wire         timersys_timer_2_s1_agent_m0_read;                                                // TimerSYS_timer_2_s1_agent:m0_read -> TimerSYS_timer_2_s1_translator:uav_read
	wire         timersys_timer_2_s1_agent_m0_readdatavalid;                                       // TimerSYS_timer_2_s1_translator:uav_readdatavalid -> TimerSYS_timer_2_s1_agent:m0_readdatavalid
	wire         timersys_timer_2_s1_agent_m0_lock;                                                // TimerSYS_timer_2_s1_agent:m0_lock -> TimerSYS_timer_2_s1_translator:uav_lock
	wire  [31:0] timersys_timer_2_s1_agent_m0_writedata;                                           // TimerSYS_timer_2_s1_agent:m0_writedata -> TimerSYS_timer_2_s1_translator:uav_writedata
	wire         timersys_timer_2_s1_agent_m0_write;                                               // TimerSYS_timer_2_s1_agent:m0_write -> TimerSYS_timer_2_s1_translator:uav_write
	wire   [2:0] timersys_timer_2_s1_agent_m0_burstcount;                                          // TimerSYS_timer_2_s1_agent:m0_burstcount -> TimerSYS_timer_2_s1_translator:uav_burstcount
	wire         timersys_timer_2_s1_agent_rf_source_valid;                                        // TimerSYS_timer_2_s1_agent:rf_source_valid -> TimerSYS_timer_2_s1_agent_rsp_fifo:in_valid
	wire  [87:0] timersys_timer_2_s1_agent_rf_source_data;                                         // TimerSYS_timer_2_s1_agent:rf_source_data -> TimerSYS_timer_2_s1_agent_rsp_fifo:in_data
	wire         timersys_timer_2_s1_agent_rf_source_ready;                                        // TimerSYS_timer_2_s1_agent_rsp_fifo:in_ready -> TimerSYS_timer_2_s1_agent:rf_source_ready
	wire         timersys_timer_2_s1_agent_rf_source_startofpacket;                                // TimerSYS_timer_2_s1_agent:rf_source_startofpacket -> TimerSYS_timer_2_s1_agent_rsp_fifo:in_startofpacket
	wire         timersys_timer_2_s1_agent_rf_source_endofpacket;                                  // TimerSYS_timer_2_s1_agent:rf_source_endofpacket -> TimerSYS_timer_2_s1_agent_rsp_fifo:in_endofpacket
	wire         timersys_timer_2_s1_agent_rsp_fifo_out_valid;                                     // TimerSYS_timer_2_s1_agent_rsp_fifo:out_valid -> TimerSYS_timer_2_s1_agent:rf_sink_valid
	wire  [87:0] timersys_timer_2_s1_agent_rsp_fifo_out_data;                                      // TimerSYS_timer_2_s1_agent_rsp_fifo:out_data -> TimerSYS_timer_2_s1_agent:rf_sink_data
	wire         timersys_timer_2_s1_agent_rsp_fifo_out_ready;                                     // TimerSYS_timer_2_s1_agent:rf_sink_ready -> TimerSYS_timer_2_s1_agent_rsp_fifo:out_ready
	wire         timersys_timer_2_s1_agent_rsp_fifo_out_startofpacket;                             // TimerSYS_timer_2_s1_agent_rsp_fifo:out_startofpacket -> TimerSYS_timer_2_s1_agent:rf_sink_startofpacket
	wire         timersys_timer_2_s1_agent_rsp_fifo_out_endofpacket;                               // TimerSYS_timer_2_s1_agent_rsp_fifo:out_endofpacket -> TimerSYS_timer_2_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                            // cmd_mux_009:src_valid -> TimerSYS_timer_2_s1_agent:cp_valid
	wire  [86:0] cmd_mux_009_src_data;                                                             // cmd_mux_009:src_data -> TimerSYS_timer_2_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                            // TimerSYS_timer_2_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [11:0] cmd_mux_009_src_channel;                                                          // cmd_mux_009:src_channel -> TimerSYS_timer_2_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                    // cmd_mux_009:src_startofpacket -> TimerSYS_timer_2_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                      // cmd_mux_009:src_endofpacket -> TimerSYS_timer_2_s1_agent:cp_endofpacket
	wire  [31:0] pheriphals_tp_gpio_s1_agent_m0_readdata;                                          // Pheriphals_tp_gpio_s1_translator:uav_readdata -> Pheriphals_tp_gpio_s1_agent:m0_readdata
	wire         pheriphals_tp_gpio_s1_agent_m0_waitrequest;                                       // Pheriphals_tp_gpio_s1_translator:uav_waitrequest -> Pheriphals_tp_gpio_s1_agent:m0_waitrequest
	wire         pheriphals_tp_gpio_s1_agent_m0_debugaccess;                                       // Pheriphals_tp_gpio_s1_agent:m0_debugaccess -> Pheriphals_tp_gpio_s1_translator:uav_debugaccess
	wire  [10:0] pheriphals_tp_gpio_s1_agent_m0_address;                                           // Pheriphals_tp_gpio_s1_agent:m0_address -> Pheriphals_tp_gpio_s1_translator:uav_address
	wire   [3:0] pheriphals_tp_gpio_s1_agent_m0_byteenable;                                        // Pheriphals_tp_gpio_s1_agent:m0_byteenable -> Pheriphals_tp_gpio_s1_translator:uav_byteenable
	wire         pheriphals_tp_gpio_s1_agent_m0_read;                                              // Pheriphals_tp_gpio_s1_agent:m0_read -> Pheriphals_tp_gpio_s1_translator:uav_read
	wire         pheriphals_tp_gpio_s1_agent_m0_readdatavalid;                                     // Pheriphals_tp_gpio_s1_translator:uav_readdatavalid -> Pheriphals_tp_gpio_s1_agent:m0_readdatavalid
	wire         pheriphals_tp_gpio_s1_agent_m0_lock;                                              // Pheriphals_tp_gpio_s1_agent:m0_lock -> Pheriphals_tp_gpio_s1_translator:uav_lock
	wire  [31:0] pheriphals_tp_gpio_s1_agent_m0_writedata;                                         // Pheriphals_tp_gpio_s1_agent:m0_writedata -> Pheriphals_tp_gpio_s1_translator:uav_writedata
	wire         pheriphals_tp_gpio_s1_agent_m0_write;                                             // Pheriphals_tp_gpio_s1_agent:m0_write -> Pheriphals_tp_gpio_s1_translator:uav_write
	wire   [2:0] pheriphals_tp_gpio_s1_agent_m0_burstcount;                                        // Pheriphals_tp_gpio_s1_agent:m0_burstcount -> Pheriphals_tp_gpio_s1_translator:uav_burstcount
	wire         pheriphals_tp_gpio_s1_agent_rf_source_valid;                                      // Pheriphals_tp_gpio_s1_agent:rf_source_valid -> Pheriphals_tp_gpio_s1_agent_rsp_fifo:in_valid
	wire  [87:0] pheriphals_tp_gpio_s1_agent_rf_source_data;                                       // Pheriphals_tp_gpio_s1_agent:rf_source_data -> Pheriphals_tp_gpio_s1_agent_rsp_fifo:in_data
	wire         pheriphals_tp_gpio_s1_agent_rf_source_ready;                                      // Pheriphals_tp_gpio_s1_agent_rsp_fifo:in_ready -> Pheriphals_tp_gpio_s1_agent:rf_source_ready
	wire         pheriphals_tp_gpio_s1_agent_rf_source_startofpacket;                              // Pheriphals_tp_gpio_s1_agent:rf_source_startofpacket -> Pheriphals_tp_gpio_s1_agent_rsp_fifo:in_startofpacket
	wire         pheriphals_tp_gpio_s1_agent_rf_source_endofpacket;                                // Pheriphals_tp_gpio_s1_agent:rf_source_endofpacket -> Pheriphals_tp_gpio_s1_agent_rsp_fifo:in_endofpacket
	wire         pheriphals_tp_gpio_s1_agent_rsp_fifo_out_valid;                                   // Pheriphals_tp_gpio_s1_agent_rsp_fifo:out_valid -> Pheriphals_tp_gpio_s1_agent:rf_sink_valid
	wire  [87:0] pheriphals_tp_gpio_s1_agent_rsp_fifo_out_data;                                    // Pheriphals_tp_gpio_s1_agent_rsp_fifo:out_data -> Pheriphals_tp_gpio_s1_agent:rf_sink_data
	wire         pheriphals_tp_gpio_s1_agent_rsp_fifo_out_ready;                                   // Pheriphals_tp_gpio_s1_agent:rf_sink_ready -> Pheriphals_tp_gpio_s1_agent_rsp_fifo:out_ready
	wire         pheriphals_tp_gpio_s1_agent_rsp_fifo_out_startofpacket;                           // Pheriphals_tp_gpio_s1_agent_rsp_fifo:out_startofpacket -> Pheriphals_tp_gpio_s1_agent:rf_sink_startofpacket
	wire         pheriphals_tp_gpio_s1_agent_rsp_fifo_out_endofpacket;                             // Pheriphals_tp_gpio_s1_agent_rsp_fifo:out_endofpacket -> Pheriphals_tp_gpio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_010_src_valid;                                                            // cmd_mux_010:src_valid -> Pheriphals_tp_gpio_s1_agent:cp_valid
	wire  [86:0] cmd_mux_010_src_data;                                                             // cmd_mux_010:src_data -> Pheriphals_tp_gpio_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                            // Pheriphals_tp_gpio_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [11:0] cmd_mux_010_src_channel;                                                          // cmd_mux_010:src_channel -> Pheriphals_tp_gpio_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                                    // cmd_mux_010:src_startofpacket -> Pheriphals_tp_gpio_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                      // cmd_mux_010:src_endofpacket -> Pheriphals_tp_gpio_s1_agent:cp_endofpacket
	wire  [31:0] usb_data_sys_usb_gpio_s1_agent_m0_readdata;                                       // USB_Data_SYS_usb_gpio_s1_translator:uav_readdata -> USB_Data_SYS_usb_gpio_s1_agent:m0_readdata
	wire         usb_data_sys_usb_gpio_s1_agent_m0_waitrequest;                                    // USB_Data_SYS_usb_gpio_s1_translator:uav_waitrequest -> USB_Data_SYS_usb_gpio_s1_agent:m0_waitrequest
	wire         usb_data_sys_usb_gpio_s1_agent_m0_debugaccess;                                    // USB_Data_SYS_usb_gpio_s1_agent:m0_debugaccess -> USB_Data_SYS_usb_gpio_s1_translator:uav_debugaccess
	wire  [10:0] usb_data_sys_usb_gpio_s1_agent_m0_address;                                        // USB_Data_SYS_usb_gpio_s1_agent:m0_address -> USB_Data_SYS_usb_gpio_s1_translator:uav_address
	wire   [3:0] usb_data_sys_usb_gpio_s1_agent_m0_byteenable;                                     // USB_Data_SYS_usb_gpio_s1_agent:m0_byteenable -> USB_Data_SYS_usb_gpio_s1_translator:uav_byteenable
	wire         usb_data_sys_usb_gpio_s1_agent_m0_read;                                           // USB_Data_SYS_usb_gpio_s1_agent:m0_read -> USB_Data_SYS_usb_gpio_s1_translator:uav_read
	wire         usb_data_sys_usb_gpio_s1_agent_m0_readdatavalid;                                  // USB_Data_SYS_usb_gpio_s1_translator:uav_readdatavalid -> USB_Data_SYS_usb_gpio_s1_agent:m0_readdatavalid
	wire         usb_data_sys_usb_gpio_s1_agent_m0_lock;                                           // USB_Data_SYS_usb_gpio_s1_agent:m0_lock -> USB_Data_SYS_usb_gpio_s1_translator:uav_lock
	wire  [31:0] usb_data_sys_usb_gpio_s1_agent_m0_writedata;                                      // USB_Data_SYS_usb_gpio_s1_agent:m0_writedata -> USB_Data_SYS_usb_gpio_s1_translator:uav_writedata
	wire         usb_data_sys_usb_gpio_s1_agent_m0_write;                                          // USB_Data_SYS_usb_gpio_s1_agent:m0_write -> USB_Data_SYS_usb_gpio_s1_translator:uav_write
	wire   [2:0] usb_data_sys_usb_gpio_s1_agent_m0_burstcount;                                     // USB_Data_SYS_usb_gpio_s1_agent:m0_burstcount -> USB_Data_SYS_usb_gpio_s1_translator:uav_burstcount
	wire         usb_data_sys_usb_gpio_s1_agent_rf_source_valid;                                   // USB_Data_SYS_usb_gpio_s1_agent:rf_source_valid -> USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:in_valid
	wire  [87:0] usb_data_sys_usb_gpio_s1_agent_rf_source_data;                                    // USB_Data_SYS_usb_gpio_s1_agent:rf_source_data -> USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:in_data
	wire         usb_data_sys_usb_gpio_s1_agent_rf_source_ready;                                   // USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:in_ready -> USB_Data_SYS_usb_gpio_s1_agent:rf_source_ready
	wire         usb_data_sys_usb_gpio_s1_agent_rf_source_startofpacket;                           // USB_Data_SYS_usb_gpio_s1_agent:rf_source_startofpacket -> USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:in_startofpacket
	wire         usb_data_sys_usb_gpio_s1_agent_rf_source_endofpacket;                             // USB_Data_SYS_usb_gpio_s1_agent:rf_source_endofpacket -> USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:in_endofpacket
	wire         usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_valid;                                // USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:out_valid -> USB_Data_SYS_usb_gpio_s1_agent:rf_sink_valid
	wire  [87:0] usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_data;                                 // USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:out_data -> USB_Data_SYS_usb_gpio_s1_agent:rf_sink_data
	wire         usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_ready;                                // USB_Data_SYS_usb_gpio_s1_agent:rf_sink_ready -> USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:out_ready
	wire         usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_startofpacket;                        // USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:out_startofpacket -> USB_Data_SYS_usb_gpio_s1_agent:rf_sink_startofpacket
	wire         usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_endofpacket;                          // USB_Data_SYS_usb_gpio_s1_agent_rsp_fifo:out_endofpacket -> USB_Data_SYS_usb_gpio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_011_src_valid;                                                            // cmd_mux_011:src_valid -> USB_Data_SYS_usb_gpio_s1_agent:cp_valid
	wire  [86:0] cmd_mux_011_src_data;                                                             // cmd_mux_011:src_data -> USB_Data_SYS_usb_gpio_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                            // USB_Data_SYS_usb_gpio_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [11:0] cmd_mux_011_src_channel;                                                          // cmd_mux_011:src_channel -> USB_Data_SYS_usb_gpio_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                                    // cmd_mux_011:src_startofpacket -> USB_Data_SYS_usb_gpio_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                                      // cmd_mux_011:src_endofpacket -> USB_Data_SYS_usb_gpio_s1_agent:cp_endofpacket
	wire         mm_clock_crossing_bridge_1_m0_agent_cp_valid;                                     // mm_clock_crossing_bridge_1_m0_agent:cp_valid -> router:sink_valid
	wire  [86:0] mm_clock_crossing_bridge_1_m0_agent_cp_data;                                      // mm_clock_crossing_bridge_1_m0_agent:cp_data -> router:sink_data
	wire         mm_clock_crossing_bridge_1_m0_agent_cp_ready;                                     // router:sink_ready -> mm_clock_crossing_bridge_1_m0_agent:cp_ready
	wire         mm_clock_crossing_bridge_1_m0_agent_cp_startofpacket;                             // mm_clock_crossing_bridge_1_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         mm_clock_crossing_bridge_1_m0_agent_cp_endofpacket;                               // mm_clock_crossing_bridge_1_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rp_valid;                        // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rp_valid -> router_001:sink_valid
	wire  [59:0] parameter_sys_crc_init_bridge_avalon_slave_agent_rp_data;                         // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rp_data -> router_001:sink_data
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rp_ready;                        // router_001:sink_ready -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rp_ready
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rp_startofpacket;                // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rp_endofpacket;                  // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         currctrl_sys_currctrl_gpio_s1_agent_rp_valid;                                     // CurrCTRL_SYS_currctrl_gpio_s1_agent:rp_valid -> router_002:sink_valid
	wire  [86:0] currctrl_sys_currctrl_gpio_s1_agent_rp_data;                                      // CurrCTRL_SYS_currctrl_gpio_s1_agent:rp_data -> router_002:sink_data
	wire         currctrl_sys_currctrl_gpio_s1_agent_rp_ready;                                     // router_002:sink_ready -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rp_ready
	wire         currctrl_sys_currctrl_gpio_s1_agent_rp_startofpacket;                             // CurrCTRL_SYS_currctrl_gpio_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         currctrl_sys_currctrl_gpio_s1_agent_rp_endofpacket;                               // CurrCTRL_SYS_currctrl_gpio_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                             // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [86:0] router_002_src_data;                                                              // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                             // rsp_demux_001:sink_ready -> router_002:src_ready
	wire  [11:0] router_002_src_channel;                                                           // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rp_valid;                             // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rp_valid -> router_003:sink_valid
	wire  [86:0] currctrl_sys_currctrl_register_ram_s1_agent_rp_data;                              // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rp_data -> router_003:sink_data
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rp_ready;                             // router_003:sink_ready -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rp_ready
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rp_startofpacket;                     // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rp_endofpacket;                       // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                             // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [86:0] router_003_src_data;                                                              // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                             // rsp_demux_002:sink_ready -> router_003:src_ready
	wire  [11:0] router_003_src_channel;                                                           // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_valid;                      // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rp_valid -> router_004:sink_valid
	wire  [86:0] currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_data;                       // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rp_data -> router_004:sink_data
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_ready;                      // router_004:sink_ready -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rp_ready
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_startofpacket;              // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_endofpacket;                // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                             // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [86:0] router_004_src_data;                                                              // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                             // rsp_demux_003:sink_ready -> router_004:src_ready
	wire  [11:0] router_004_src_channel;                                                           // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         pheriphals_led_gpio_s1_agent_rp_valid;                                            // Pheriphals_led_gpio_s1_agent:rp_valid -> router_005:sink_valid
	wire  [86:0] pheriphals_led_gpio_s1_agent_rp_data;                                             // Pheriphals_led_gpio_s1_agent:rp_data -> router_005:sink_data
	wire         pheriphals_led_gpio_s1_agent_rp_ready;                                            // router_005:sink_ready -> Pheriphals_led_gpio_s1_agent:rp_ready
	wire         pheriphals_led_gpio_s1_agent_rp_startofpacket;                                    // Pheriphals_led_gpio_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         pheriphals_led_gpio_s1_agent_rp_endofpacket;                                      // Pheriphals_led_gpio_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [86:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                             // rsp_demux_004:sink_ready -> router_005:src_ready
	wire  [11:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         parameter_sys_parameter_gpio_s1_agent_rp_valid;                                   // Parameter_SYS_parameter_gpio_s1_agent:rp_valid -> router_006:sink_valid
	wire  [86:0] parameter_sys_parameter_gpio_s1_agent_rp_data;                                    // Parameter_SYS_parameter_gpio_s1_agent:rp_data -> router_006:sink_data
	wire         parameter_sys_parameter_gpio_s1_agent_rp_ready;                                   // router_006:sink_ready -> Parameter_SYS_parameter_gpio_s1_agent:rp_ready
	wire         parameter_sys_parameter_gpio_s1_agent_rp_startofpacket;                           // Parameter_SYS_parameter_gpio_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         parameter_sys_parameter_gpio_s1_agent_rp_endofpacket;                             // Parameter_SYS_parameter_gpio_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                             // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [86:0] router_006_src_data;                                                              // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                             // rsp_demux_005:sink_ready -> router_006:src_ready
	wire  [11:0] router_006_src_channel;                                                           // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         parameter_sys_parameterlengthpage_s1_agent_rp_valid;                              // Parameter_SYS_parameterlengthpage_s1_agent:rp_valid -> router_007:sink_valid
	wire  [86:0] parameter_sys_parameterlengthpage_s1_agent_rp_data;                               // Parameter_SYS_parameterlengthpage_s1_agent:rp_data -> router_007:sink_data
	wire         parameter_sys_parameterlengthpage_s1_agent_rp_ready;                              // router_007:sink_ready -> Parameter_SYS_parameterlengthpage_s1_agent:rp_ready
	wire         parameter_sys_parameterlengthpage_s1_agent_rp_startofpacket;                      // Parameter_SYS_parameterlengthpage_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         parameter_sys_parameterlengthpage_s1_agent_rp_endofpacket;                        // Parameter_SYS_parameterlengthpage_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                             // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [86:0] router_007_src_data;                                                              // router_007:src_data -> rsp_demux_006:sink_data
	wire         router_007_src_ready;                                                             // rsp_demux_006:sink_ready -> router_007:src_ready
	wire  [11:0] router_007_src_channel;                                                           // router_007:src_channel -> rsp_demux_006:sink_channel
	wire         router_007_src_startofpacket;                                                     // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_007_src_endofpacket;                                                       // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         timersys_timer_0_s1_agent_rp_valid;                                               // TimerSYS_timer_0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [86:0] timersys_timer_0_s1_agent_rp_data;                                                // TimerSYS_timer_0_s1_agent:rp_data -> router_008:sink_data
	wire         timersys_timer_0_s1_agent_rp_ready;                                               // router_008:sink_ready -> TimerSYS_timer_0_s1_agent:rp_ready
	wire         timersys_timer_0_s1_agent_rp_startofpacket;                                       // TimerSYS_timer_0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         timersys_timer_0_s1_agent_rp_endofpacket;                                         // TimerSYS_timer_0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                             // router_008:src_valid -> rsp_demux_007:sink_valid
	wire  [86:0] router_008_src_data;                                                              // router_008:src_data -> rsp_demux_007:sink_data
	wire         router_008_src_ready;                                                             // rsp_demux_007:sink_ready -> router_008:src_ready
	wire  [11:0] router_008_src_channel;                                                           // router_008:src_channel -> rsp_demux_007:sink_channel
	wire         router_008_src_startofpacket;                                                     // router_008:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_008_src_endofpacket;                                                       // router_008:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         timersys_timer_1_s1_agent_rp_valid;                                               // TimerSYS_timer_1_s1_agent:rp_valid -> router_009:sink_valid
	wire  [86:0] timersys_timer_1_s1_agent_rp_data;                                                // TimerSYS_timer_1_s1_agent:rp_data -> router_009:sink_data
	wire         timersys_timer_1_s1_agent_rp_ready;                                               // router_009:sink_ready -> TimerSYS_timer_1_s1_agent:rp_ready
	wire         timersys_timer_1_s1_agent_rp_startofpacket;                                       // TimerSYS_timer_1_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         timersys_timer_1_s1_agent_rp_endofpacket;                                         // TimerSYS_timer_1_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                             // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [86:0] router_009_src_data;                                                              // router_009:src_data -> rsp_demux_008:sink_data
	wire         router_009_src_ready;                                                             // rsp_demux_008:sink_ready -> router_009:src_ready
	wire  [11:0] router_009_src_channel;                                                           // router_009:src_channel -> rsp_demux_008:sink_channel
	wire         router_009_src_startofpacket;                                                     // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_009_src_endofpacket;                                                       // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         timersys_timer_2_s1_agent_rp_valid;                                               // TimerSYS_timer_2_s1_agent:rp_valid -> router_010:sink_valid
	wire  [86:0] timersys_timer_2_s1_agent_rp_data;                                                // TimerSYS_timer_2_s1_agent:rp_data -> router_010:sink_data
	wire         timersys_timer_2_s1_agent_rp_ready;                                               // router_010:sink_ready -> TimerSYS_timer_2_s1_agent:rp_ready
	wire         timersys_timer_2_s1_agent_rp_startofpacket;                                       // TimerSYS_timer_2_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         timersys_timer_2_s1_agent_rp_endofpacket;                                         // TimerSYS_timer_2_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                             // router_010:src_valid -> rsp_demux_009:sink_valid
	wire  [86:0] router_010_src_data;                                                              // router_010:src_data -> rsp_demux_009:sink_data
	wire         router_010_src_ready;                                                             // rsp_demux_009:sink_ready -> router_010:src_ready
	wire  [11:0] router_010_src_channel;                                                           // router_010:src_channel -> rsp_demux_009:sink_channel
	wire         router_010_src_startofpacket;                                                     // router_010:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_010_src_endofpacket;                                                       // router_010:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         pheriphals_tp_gpio_s1_agent_rp_valid;                                             // Pheriphals_tp_gpio_s1_agent:rp_valid -> router_011:sink_valid
	wire  [86:0] pheriphals_tp_gpio_s1_agent_rp_data;                                              // Pheriphals_tp_gpio_s1_agent:rp_data -> router_011:sink_data
	wire         pheriphals_tp_gpio_s1_agent_rp_ready;                                             // router_011:sink_ready -> Pheriphals_tp_gpio_s1_agent:rp_ready
	wire         pheriphals_tp_gpio_s1_agent_rp_startofpacket;                                     // Pheriphals_tp_gpio_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         pheriphals_tp_gpio_s1_agent_rp_endofpacket;                                       // Pheriphals_tp_gpio_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                             // router_011:src_valid -> rsp_demux_010:sink_valid
	wire  [86:0] router_011_src_data;                                                              // router_011:src_data -> rsp_demux_010:sink_data
	wire         router_011_src_ready;                                                             // rsp_demux_010:sink_ready -> router_011:src_ready
	wire  [11:0] router_011_src_channel;                                                           // router_011:src_channel -> rsp_demux_010:sink_channel
	wire         router_011_src_startofpacket;                                                     // router_011:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_011_src_endofpacket;                                                       // router_011:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         usb_data_sys_usb_gpio_s1_agent_rp_valid;                                          // USB_Data_SYS_usb_gpio_s1_agent:rp_valid -> router_012:sink_valid
	wire  [86:0] usb_data_sys_usb_gpio_s1_agent_rp_data;                                           // USB_Data_SYS_usb_gpio_s1_agent:rp_data -> router_012:sink_data
	wire         usb_data_sys_usb_gpio_s1_agent_rp_ready;                                          // router_012:sink_ready -> USB_Data_SYS_usb_gpio_s1_agent:rp_ready
	wire         usb_data_sys_usb_gpio_s1_agent_rp_startofpacket;                                  // USB_Data_SYS_usb_gpio_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         usb_data_sys_usb_gpio_s1_agent_rp_endofpacket;                                    // USB_Data_SYS_usb_gpio_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                             // router_012:src_valid -> rsp_demux_011:sink_valid
	wire  [86:0] router_012_src_data;                                                              // router_012:src_data -> rsp_demux_011:sink_data
	wire         router_012_src_ready;                                                             // rsp_demux_011:sink_ready -> router_012:src_ready
	wire  [11:0] router_012_src_channel;                                                           // router_012:src_channel -> rsp_demux_011:sink_channel
	wire         router_012_src_startofpacket;                                                     // router_012:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_012_src_endofpacket;                                                       // router_012:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         router_src_valid;                                                                 // router:src_valid -> mm_clock_crossing_bridge_1_m0_limiter:cmd_sink_valid
	wire  [86:0] router_src_data;                                                                  // router:src_data -> mm_clock_crossing_bridge_1_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                                 // mm_clock_crossing_bridge_1_m0_limiter:cmd_sink_ready -> router:src_ready
	wire  [11:0] router_src_channel;                                                               // router:src_channel -> mm_clock_crossing_bridge_1_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                         // router:src_startofpacket -> mm_clock_crossing_bridge_1_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                           // router:src_endofpacket -> mm_clock_crossing_bridge_1_m0_limiter:cmd_sink_endofpacket
	wire  [86:0] mm_clock_crossing_bridge_1_m0_limiter_cmd_src_data;                               // mm_clock_crossing_bridge_1_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         mm_clock_crossing_bridge_1_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_clock_crossing_bridge_1_m0_limiter:cmd_src_ready
	wire  [11:0] mm_clock_crossing_bridge_1_m0_limiter_cmd_src_channel;                            // mm_clock_crossing_bridge_1_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         mm_clock_crossing_bridge_1_m0_limiter_cmd_src_startofpacket;                      // mm_clock_crossing_bridge_1_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         mm_clock_crossing_bridge_1_m0_limiter_cmd_src_endofpacket;                        // mm_clock_crossing_bridge_1_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> mm_clock_crossing_bridge_1_m0_limiter:rsp_sink_valid
	wire  [86:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> mm_clock_crossing_bridge_1_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                                // mm_clock_crossing_bridge_1_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire  [11:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> mm_clock_crossing_bridge_1_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> mm_clock_crossing_bridge_1_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> mm_clock_crossing_bridge_1_m0_limiter:rsp_sink_endofpacket
	wire         mm_clock_crossing_bridge_1_m0_limiter_rsp_src_valid;                              // mm_clock_crossing_bridge_1_m0_limiter:rsp_src_valid -> mm_clock_crossing_bridge_1_m0_agent:rp_valid
	wire  [86:0] mm_clock_crossing_bridge_1_m0_limiter_rsp_src_data;                               // mm_clock_crossing_bridge_1_m0_limiter:rsp_src_data -> mm_clock_crossing_bridge_1_m0_agent:rp_data
	wire         mm_clock_crossing_bridge_1_m0_limiter_rsp_src_ready;                              // mm_clock_crossing_bridge_1_m0_agent:rp_ready -> mm_clock_crossing_bridge_1_m0_limiter:rsp_src_ready
	wire  [11:0] mm_clock_crossing_bridge_1_m0_limiter_rsp_src_channel;                            // mm_clock_crossing_bridge_1_m0_limiter:rsp_src_channel -> mm_clock_crossing_bridge_1_m0_agent:rp_channel
	wire         mm_clock_crossing_bridge_1_m0_limiter_rsp_src_startofpacket;                      // mm_clock_crossing_bridge_1_m0_limiter:rsp_src_startofpacket -> mm_clock_crossing_bridge_1_m0_agent:rp_startofpacket
	wire         mm_clock_crossing_bridge_1_m0_limiter_rsp_src_endofpacket;                        // mm_clock_crossing_bridge_1_m0_limiter:rsp_src_endofpacket -> mm_clock_crossing_bridge_1_m0_agent:rp_endofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_valid;           // Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:source0_valid -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:cp_valid
	wire  [59:0] parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_data;            // Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:source0_data -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:cp_data
	wire         parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_ready;           // Parameter_SYS_crc_init_bridge_avalon_slave_agent:cp_ready -> Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:source0_ready
	wire  [11:0] parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_channel;         // Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:source0_channel -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:cp_channel
	wire         parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_startofpacket;   // Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:source0_startofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:cp_startofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_endofpacket;     // Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:source0_endofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:cp_endofpacket
	wire         cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [86:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [11:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [86:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [11:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [86:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [11:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [86:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [11:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [86:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [11:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [86:0] cmd_demux_src5_data;                                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [11:0] cmd_demux_src5_channel;                                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                             // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [86:0] cmd_demux_src6_data;                                                              // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                             // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [11:0] cmd_demux_src6_channel;                                                           // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                     // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                       // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                             // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [86:0] cmd_demux_src7_data;                                                              // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                             // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [11:0] cmd_demux_src7_channel;                                                           // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                     // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                       // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [86:0] cmd_demux_src8_data;                                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [11:0] cmd_demux_src8_channel;                                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                             // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [86:0] cmd_demux_src9_data;                                                              // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                             // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [11:0] cmd_demux_src9_channel;                                                           // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                     // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                       // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                            // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [86:0] cmd_demux_src10_data;                                                             // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                            // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [11:0] cmd_demux_src10_channel;                                                          // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                                    // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                      // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                            // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [86:0] cmd_demux_src11_data;                                                             // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                            // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [11:0] cmd_demux_src11_channel;                                                          // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                                    // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                                      // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [86:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [11:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [86:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [11:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [86:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [11:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [86:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [11:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [86:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [11:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [86:0] rsp_demux_005_src0_data;                                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [11:0] rsp_demux_005_src0_channel;                                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                         // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [86:0] rsp_demux_006_src0_data;                                                          // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                         // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [11:0] rsp_demux_006_src0_channel;                                                       // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                                 // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                   // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                         // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [86:0] rsp_demux_007_src0_data;                                                          // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                         // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [11:0] rsp_demux_007_src0_channel;                                                       // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                                 // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                   // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [86:0] rsp_demux_008_src0_data;                                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [11:0] rsp_demux_008_src0_channel;                                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                         // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [86:0] rsp_demux_009_src0_data;                                                          // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                         // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [11:0] rsp_demux_009_src0_channel;                                                       // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                                 // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                   // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                         // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [86:0] rsp_demux_010_src0_data;                                                          // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                         // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [11:0] rsp_demux_010_src0_channel;                                                       // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                                 // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                                   // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                         // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [86:0] rsp_demux_011_src0_data;                                                          // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                         // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [11:0] rsp_demux_011_src0_channel;                                                       // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                                 // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                                   // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         router_001_src_valid;                                                             // router_001:src_valid -> Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:in_valid
	wire  [59:0] router_001_src_data;                                                              // router_001:src_data -> Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:in_data
	wire         router_001_src_ready;                                                             // Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:in_ready -> router_001:src_ready
	wire  [11:0] router_001_src_channel;                                                           // router_001:src_channel -> Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:in_channel
	wire         router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:in_startofpacket
	wire         router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:in_endofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_valid;           // Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [86:0] parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_data;            // Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire         parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_ready;           // rsp_demux:sink_ready -> Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:out_ready
	wire  [11:0] parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_channel;         // Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire         parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_startofpacket;   // Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_endofpacket;     // Parameter_SYS_crc_init_bridge_avalon_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:in_valid
	wire  [86:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:in_data
	wire         cmd_mux_src_ready;                                                                // Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire  [11:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:in_channel
	wire         cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:in_endofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_valid;           // Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:out_valid -> Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:sink0_valid
	wire  [59:0] parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_data;            // Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:out_data -> Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:sink0_data
	wire         parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_ready;           // Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:sink0_ready -> Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:out_ready
	wire  [11:0] parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_channel;         // Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:out_channel -> Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:sink0_channel
	wire         parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_startofpacket;   // Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:out_startofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:sink0_startofpacket
	wire         parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_endofpacket;     // Parameter_SYS_crc_init_bridge_avalon_slave_cmd_width_adapter:out_endofpacket -> Parameter_SYS_crc_init_bridge_avalon_slave_burst_adapter:sink0_endofpacket
	wire  [11:0] mm_clock_crossing_bridge_1_m0_limiter_cmd_valid_data;                             // mm_clock_crossing_bridge_1_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rdata_fifo_src_valid;            // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [9:0] parameter_sys_crc_init_bridge_avalon_slave_agent_rdata_fifo_src_data;             // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         parameter_sys_crc_init_bridge_avalon_slave_agent_rdata_fifo_src_ready;            // avalon_st_adapter:in_0_ready -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                    // Parameter_SYS_crc_init_bridge_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> Parameter_SYS_crc_init_bridge_avalon_slave_agent:rdata_fifo_sink_error
	wire         currctrl_sys_currctrl_gpio_s1_agent_rdata_fifo_src_valid;                         // CurrCTRL_SYS_currctrl_gpio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] currctrl_sys_currctrl_gpio_s1_agent_rdata_fifo_src_data;                          // CurrCTRL_SYS_currctrl_gpio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         currctrl_sys_currctrl_gpio_s1_agent_rdata_fifo_src_ready;                         // avalon_st_adapter_001:in_0_ready -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                // CurrCTRL_SYS_currctrl_gpio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> CurrCTRL_SYS_currctrl_gpio_s1_agent:rdata_fifo_sink_error
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rdata_fifo_src_valid;                 // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] currctrl_sys_currctrl_register_ram_s1_agent_rdata_fifo_src_data;                  // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         currctrl_sys_currctrl_register_ram_s1_agent_rdata_fifo_src_ready;                 // avalon_st_adapter_002:in_0_ready -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                // CurrCTRL_SYS_currctrl_register_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> CurrCTRL_SYS_currctrl_register_ram_s1_agent:rdata_fifo_sink_error
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rdata_fifo_src_valid;          // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rdata_fifo_src_data;           // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rdata_fifo_src_ready;          // avalon_st_adapter_003:in_0_ready -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                // CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_agent:rdata_fifo_sink_error
	wire         pheriphals_led_gpio_s1_agent_rdata_fifo_src_valid;                                // Pheriphals_led_gpio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] pheriphals_led_gpio_s1_agent_rdata_fifo_src_data;                                 // Pheriphals_led_gpio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         pheriphals_led_gpio_s1_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_004:in_0_ready -> Pheriphals_led_gpio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> Pheriphals_led_gpio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> Pheriphals_led_gpio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                // Pheriphals_led_gpio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> Pheriphals_led_gpio_s1_agent:rdata_fifo_sink_error
	wire         parameter_sys_parameter_gpio_s1_agent_rdata_fifo_src_valid;                       // Parameter_SYS_parameter_gpio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] parameter_sys_parameter_gpio_s1_agent_rdata_fifo_src_data;                        // Parameter_SYS_parameter_gpio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         parameter_sys_parameter_gpio_s1_agent_rdata_fifo_src_ready;                       // avalon_st_adapter_005:in_0_ready -> Parameter_SYS_parameter_gpio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                // avalon_st_adapter_005:out_0_valid -> Parameter_SYS_parameter_gpio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                 // avalon_st_adapter_005:out_0_data -> Parameter_SYS_parameter_gpio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                // Parameter_SYS_parameter_gpio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                // avalon_st_adapter_005:out_0_error -> Parameter_SYS_parameter_gpio_s1_agent:rdata_fifo_sink_error
	wire         parameter_sys_parameterlengthpage_s1_agent_rdata_fifo_src_valid;                  // Parameter_SYS_parameterlengthpage_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] parameter_sys_parameterlengthpage_s1_agent_rdata_fifo_src_data;                   // Parameter_SYS_parameterlengthpage_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         parameter_sys_parameterlengthpage_s1_agent_rdata_fifo_src_ready;                  // avalon_st_adapter_006:in_0_ready -> Parameter_SYS_parameterlengthpage_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                                // avalon_st_adapter_006:out_0_valid -> Parameter_SYS_parameterlengthpage_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                                 // avalon_st_adapter_006:out_0_data -> Parameter_SYS_parameterlengthpage_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                                // Parameter_SYS_parameterlengthpage_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                                // avalon_st_adapter_006:out_0_error -> Parameter_SYS_parameterlengthpage_s1_agent:rdata_fifo_sink_error
	wire         timersys_timer_0_s1_agent_rdata_fifo_src_valid;                                   // TimerSYS_timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] timersys_timer_0_s1_agent_rdata_fifo_src_data;                                    // TimerSYS_timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         timersys_timer_0_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_007:in_0_ready -> TimerSYS_timer_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                                // avalon_st_adapter_007:out_0_valid -> TimerSYS_timer_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                                 // avalon_st_adapter_007:out_0_data -> TimerSYS_timer_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                                // TimerSYS_timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                                // avalon_st_adapter_007:out_0_error -> TimerSYS_timer_0_s1_agent:rdata_fifo_sink_error
	wire         timersys_timer_1_s1_agent_rdata_fifo_src_valid;                                   // TimerSYS_timer_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] timersys_timer_1_s1_agent_rdata_fifo_src_data;                                    // TimerSYS_timer_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         timersys_timer_1_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_008:in_0_ready -> TimerSYS_timer_1_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                                // avalon_st_adapter_008:out_0_valid -> TimerSYS_timer_1_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                                 // avalon_st_adapter_008:out_0_data -> TimerSYS_timer_1_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                                // TimerSYS_timer_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                                // avalon_st_adapter_008:out_0_error -> TimerSYS_timer_1_s1_agent:rdata_fifo_sink_error
	wire         timersys_timer_2_s1_agent_rdata_fifo_src_valid;                                   // TimerSYS_timer_2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] timersys_timer_2_s1_agent_rdata_fifo_src_data;                                    // TimerSYS_timer_2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         timersys_timer_2_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_009:in_0_ready -> TimerSYS_timer_2_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                                // avalon_st_adapter_009:out_0_valid -> TimerSYS_timer_2_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                                 // avalon_st_adapter_009:out_0_data -> TimerSYS_timer_2_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                                // TimerSYS_timer_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                                // avalon_st_adapter_009:out_0_error -> TimerSYS_timer_2_s1_agent:rdata_fifo_sink_error
	wire         pheriphals_tp_gpio_s1_agent_rdata_fifo_src_valid;                                 // Pheriphals_tp_gpio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] pheriphals_tp_gpio_s1_agent_rdata_fifo_src_data;                                  // Pheriphals_tp_gpio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         pheriphals_tp_gpio_s1_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_010:in_0_ready -> Pheriphals_tp_gpio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                                // avalon_st_adapter_010:out_0_valid -> Pheriphals_tp_gpio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                                 // avalon_st_adapter_010:out_0_data -> Pheriphals_tp_gpio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                                // Pheriphals_tp_gpio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                                // avalon_st_adapter_010:out_0_error -> Pheriphals_tp_gpio_s1_agent:rdata_fifo_sink_error
	wire         usb_data_sys_usb_gpio_s1_agent_rdata_fifo_src_valid;                              // USB_Data_SYS_usb_gpio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] usb_data_sys_usb_gpio_s1_agent_rdata_fifo_src_data;                               // USB_Data_SYS_usb_gpio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         usb_data_sys_usb_gpio_s1_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_011:in_0_ready -> USB_Data_SYS_usb_gpio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                                // avalon_st_adapter_011:out_0_valid -> USB_Data_SYS_usb_gpio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                                 // avalon_st_adapter_011:out_0_data -> USB_Data_SYS_usb_gpio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                                // USB_Data_SYS_usb_gpio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                                // avalon_st_adapter_011:out_0_error -> USB_Data_SYS_usb_gpio_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (11),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (11),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_clock_crossing_bridge_1_m0_translator (
		.clk                    (clk_50_clk_clk),                                                                   //                       clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_clock_crossing_bridge_1_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_clock_crossing_bridge_1_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_clock_crossing_bridge_1_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_clock_crossing_bridge_1_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_clock_crossing_bridge_1_m0_read),                                               //                          .read
		.av_readdata            (mm_clock_crossing_bridge_1_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_clock_crossing_bridge_1_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_clock_crossing_bridge_1_m0_write),                                              //                          .write
		.av_writedata           (mm_clock_crossing_bridge_1_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_clock_crossing_bridge_1_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameter_sys_crc_init_bridge_avalon_slave_translator (
		.clk                    (clk_50_clk_clk),                                                    //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Parameter_SYS_crc_init_bridge_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Parameter_SYS_crc_init_bridge_avalon_slave_write),                  //                         .write
		.av_read                (Parameter_SYS_crc_init_bridge_avalon_slave_read),                   //                         .read
		.av_readdata            (Parameter_SYS_crc_init_bridge_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (Parameter_SYS_crc_init_bridge_avalon_slave_writedata),              //                         .writedata
		.av_byteenable          (Parameter_SYS_crc_init_bridge_avalon_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Parameter_SYS_crc_init_bridge_avalon_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (Parameter_SYS_crc_init_bridge_avalon_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                                  //              (terminated)
		.av_burstcount          (),                                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                                              //              (terminated)
		.av_writebyteenable     (),                                                                  //              (terminated)
		.av_lock                (),                                                                  //              (terminated)
		.av_clken               (),                                                                  //              (terminated)
		.uav_clken              (1'b0),                                                              //              (terminated)
		.av_debugaccess         (),                                                                  //              (terminated)
		.av_outputenable        (),                                                                  //              (terminated)
		.uav_response           (),                                                                  //              (terminated)
		.av_response            (2'b00),                                                             //              (terminated)
		.uav_writeresponsevalid (),                                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) currctrl_sys_currctrl_gpio_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (currctrl_sys_currctrl_gpio_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (currctrl_sys_currctrl_gpio_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (currctrl_sys_currctrl_gpio_s1_agent_m0_read),                     //                         .read
		.uav_write              (currctrl_sys_currctrl_gpio_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (currctrl_sys_currctrl_gpio_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (currctrl_sys_currctrl_gpio_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (currctrl_sys_currctrl_gpio_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (currctrl_sys_currctrl_gpio_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (currctrl_sys_currctrl_gpio_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (currctrl_sys_currctrl_gpio_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (currctrl_sys_currctrl_gpio_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (CurrCTRL_SYS_currctrl_gpio_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (CurrCTRL_SYS_currctrl_gpio_s1_write),                             //                         .write
		.av_readdata            (CurrCTRL_SYS_currctrl_gpio_s1_readdata),                          //                         .readdata
		.av_writedata           (CurrCTRL_SYS_currctrl_gpio_s1_writedata),                         //                         .writedata
		.av_chipselect          (CurrCTRL_SYS_currctrl_gpio_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) currctrl_sys_currctrl_register_ram_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (currctrl_sys_currctrl_register_ram_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (currctrl_sys_currctrl_register_ram_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (currctrl_sys_currctrl_register_ram_s1_agent_m0_read),             //                         .read
		.uav_write              (currctrl_sys_currctrl_register_ram_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (currctrl_sys_currctrl_register_ram_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (currctrl_sys_currctrl_register_ram_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (currctrl_sys_currctrl_register_ram_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (currctrl_sys_currctrl_register_ram_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (currctrl_sys_currctrl_register_ram_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (currctrl_sys_currctrl_register_ram_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (currctrl_sys_currctrl_register_ram_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (CurrCTRL_SYS_currctrl_register_ram_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (CurrCTRL_SYS_currctrl_register_ram_s1_write),                     //                         .write
		.av_readdata            (CurrCTRL_SYS_currctrl_register_ram_s1_readdata),                  //                         .readdata
		.av_writedata           (CurrCTRL_SYS_currctrl_register_ram_s1_writedata),                 //                         .writedata
		.av_byteenable          (CurrCTRL_SYS_currctrl_register_ram_s1_byteenable),                //                         .byteenable
		.av_chipselect          (CurrCTRL_SYS_currctrl_register_ram_s1_chipselect),                //                         .chipselect
		.av_clken               (CurrCTRL_SYS_currctrl_register_ram_s1_clken),                     //                         .clken
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) currctrl_sys_currctrlsys_bridge_avalon_slave_translator (
		.clk                    (clk_50_clk_clk),                                                      //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_write),                  //                         .write
		.av_read                (CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_read),                   //                         .read
		.av_readdata            (CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_writedata),              //                         .writedata
		.av_byteenable          (CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (CurrCTRL_SYS_currctrlsys_bridge_avalon_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pheriphals_led_gpio_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pheriphals_led_gpio_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (pheriphals_led_gpio_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (pheriphals_led_gpio_s1_agent_m0_read),                            //                         .read
		.uav_write              (pheriphals_led_gpio_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (pheriphals_led_gpio_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (pheriphals_led_gpio_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (pheriphals_led_gpio_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (pheriphals_led_gpio_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (pheriphals_led_gpio_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (pheriphals_led_gpio_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (pheriphals_led_gpio_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (Pheriphals_led_gpio_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (Pheriphals_led_gpio_s1_write),                                    //                         .write
		.av_readdata            (Pheriphals_led_gpio_s1_readdata),                                 //                         .readdata
		.av_writedata           (Pheriphals_led_gpio_s1_writedata),                                //                         .writedata
		.av_chipselect          (Pheriphals_led_gpio_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameter_sys_parameter_gpio_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameter_sys_parameter_gpio_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (parameter_sys_parameter_gpio_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (parameter_sys_parameter_gpio_s1_agent_m0_read),                   //                         .read
		.uav_write              (parameter_sys_parameter_gpio_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (parameter_sys_parameter_gpio_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (parameter_sys_parameter_gpio_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (parameter_sys_parameter_gpio_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (parameter_sys_parameter_gpio_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (parameter_sys_parameter_gpio_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (parameter_sys_parameter_gpio_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (parameter_sys_parameter_gpio_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (Parameter_SYS_parameter_gpio_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (Parameter_SYS_parameter_gpio_s1_write),                           //                         .write
		.av_readdata            (Parameter_SYS_parameter_gpio_s1_readdata),                        //                         .readdata
		.av_writedata           (Parameter_SYS_parameter_gpio_s1_writedata),                       //                         .writedata
		.av_chipselect          (Parameter_SYS_parameter_gpio_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameter_sys_parameterlengthpage_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameter_sys_parameterlengthpage_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (parameter_sys_parameterlengthpage_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (parameter_sys_parameterlengthpage_s1_agent_m0_read),              //                         .read
		.uav_write              (parameter_sys_parameterlengthpage_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (parameter_sys_parameterlengthpage_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (parameter_sys_parameterlengthpage_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (parameter_sys_parameterlengthpage_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (parameter_sys_parameterlengthpage_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (parameter_sys_parameterlengthpage_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (parameter_sys_parameterlengthpage_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (parameter_sys_parameterlengthpage_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (Parameter_SYS_parameterlengthpage_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (Parameter_SYS_parameterlengthpage_s1_write),                      //                         .write
		.av_readdata            (Parameter_SYS_parameterlengthpage_s1_readdata),                   //                         .readdata
		.av_writedata           (Parameter_SYS_parameterlengthpage_s1_writedata),                  //                         .writedata
		.av_chipselect          (Parameter_SYS_parameterlengthpage_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timersys_timer_0_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timersys_timer_0_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (timersys_timer_0_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (timersys_timer_0_s1_agent_m0_read),                               //                         .read
		.uav_write              (timersys_timer_0_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (timersys_timer_0_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (timersys_timer_0_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (timersys_timer_0_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (timersys_timer_0_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (timersys_timer_0_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (timersys_timer_0_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (timersys_timer_0_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (TimerSYS_timer_0_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (TimerSYS_timer_0_s1_write),                                       //                         .write
		.av_readdata            (TimerSYS_timer_0_s1_readdata),                                    //                         .readdata
		.av_writedata           (TimerSYS_timer_0_s1_writedata),                                   //                         .writedata
		.av_chipselect          (TimerSYS_timer_0_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timersys_timer_1_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timersys_timer_1_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (timersys_timer_1_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (timersys_timer_1_s1_agent_m0_read),                               //                         .read
		.uav_write              (timersys_timer_1_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (timersys_timer_1_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (timersys_timer_1_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (timersys_timer_1_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (timersys_timer_1_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (timersys_timer_1_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (timersys_timer_1_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (timersys_timer_1_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (TimerSYS_timer_1_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (TimerSYS_timer_1_s1_write),                                       //                         .write
		.av_readdata            (TimerSYS_timer_1_s1_readdata),                                    //                         .readdata
		.av_writedata           (TimerSYS_timer_1_s1_writedata),                                   //                         .writedata
		.av_chipselect          (TimerSYS_timer_1_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timersys_timer_2_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timersys_timer_2_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (timersys_timer_2_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (timersys_timer_2_s1_agent_m0_read),                               //                         .read
		.uav_write              (timersys_timer_2_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (timersys_timer_2_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (timersys_timer_2_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (timersys_timer_2_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (timersys_timer_2_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (timersys_timer_2_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (timersys_timer_2_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (timersys_timer_2_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (TimerSYS_timer_2_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (TimerSYS_timer_2_s1_write),                                       //                         .write
		.av_readdata            (TimerSYS_timer_2_s1_readdata),                                    //                         .readdata
		.av_writedata           (TimerSYS_timer_2_s1_writedata),                                   //                         .writedata
		.av_chipselect          (TimerSYS_timer_2_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pheriphals_tp_gpio_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pheriphals_tp_gpio_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (pheriphals_tp_gpio_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (pheriphals_tp_gpio_s1_agent_m0_read),                             //                         .read
		.uav_write              (pheriphals_tp_gpio_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (pheriphals_tp_gpio_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (pheriphals_tp_gpio_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (pheriphals_tp_gpio_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (pheriphals_tp_gpio_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (pheriphals_tp_gpio_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (pheriphals_tp_gpio_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (pheriphals_tp_gpio_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (Pheriphals_tp_gpio_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (Pheriphals_tp_gpio_s1_write),                                     //                         .write
		.av_readdata            (Pheriphals_tp_gpio_s1_readdata),                                  //                         .readdata
		.av_writedata           (Pheriphals_tp_gpio_s1_writedata),                                 //                         .writedata
		.av_chipselect          (Pheriphals_tp_gpio_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) usb_data_sys_usb_gpio_s1_translator (
		.clk                    (clk_50_clk_clk),                                                  //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (usb_data_sys_usb_gpio_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (usb_data_sys_usb_gpio_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (usb_data_sys_usb_gpio_s1_agent_m0_read),                          //                         .read
		.uav_write              (usb_data_sys_usb_gpio_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (usb_data_sys_usb_gpio_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (usb_data_sys_usb_gpio_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (usb_data_sys_usb_gpio_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (usb_data_sys_usb_gpio_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (usb_data_sys_usb_gpio_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (usb_data_sys_usb_gpio_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (usb_data_sys_usb_gpio_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (USB_Data_SYS_usb_gpio_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (USB_Data_SYS_usb_gpio_s1_write),                                  //                         .write
		.av_readdata            (USB_Data_SYS_usb_gpio_s1_readdata),                               //                         .readdata
		.av_writedata           (USB_Data_SYS_usb_gpio_s1_writedata),                              //                         .writedata
		.av_chipselect          (USB_Data_SYS_usb_gpio_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_QOS_H                 (65),
		.PKT_QOS_L                 (65),
		.PKT_DATA_SIDEBAND_H       (63),
		.PKT_DATA_SIDEBAND_L       (63),
		.PKT_ADDR_SIDEBAND_H       (62),
		.PKT_ADDR_SIDEBAND_L       (62),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_CACHE_H               (81),
		.PKT_CACHE_L               (78),
		.PKT_THREAD_ID_H           (74),
		.PKT_THREAD_ID_L           (74),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_EXCLUSIVE       (52),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_clock_crossing_bridge_1_m0_agent (
		.clk                   (clk_50_clk_clk),                                                                   //       clk.clk
		.reset                 (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_clock_crossing_bridge_1_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_clock_crossing_bridge_1_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_clock_crossing_bridge_1_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_clock_crossing_bridge_1_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_clock_crossing_bridge_1_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_clock_crossing_bridge_1_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (59),
		.PKT_ORI_BURST_SIZE_L      (57),
		.PKT_RESPONSE_STATUS_H     (56),
		.PKT_RESPONSE_STATUS_L     (55),
		.PKT_BURST_SIZE_H          (32),
		.PKT_BURST_SIZE_L          (30),
		.PKT_TRANS_LOCK            (24),
		.PKT_BEGIN_BURST           (37),
		.PKT_PROTECTION_H          (50),
		.PKT_PROTECTION_L          (48),
		.PKT_BURSTWRAP_H           (29),
		.PKT_BURSTWRAP_L           (29),
		.PKT_BYTE_CNT_H            (28),
		.PKT_BYTE_CNT_L            (26),
		.PKT_ADDR_H                (19),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (20),
		.PKT_TRANS_POSTED          (21),
		.PKT_TRANS_WRITE           (22),
		.PKT_TRANS_READ            (23),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (42),
		.PKT_SRC_ID_L              (39),
		.PKT_DEST_ID_H             (46),
		.PKT_DEST_ID_L             (43),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (60),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameter_sys_crc_init_bridge_avalon_slave_agent (
		.clk                     (clk_50_clk_clk),                                                                 //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (parameter_sys_crc_init_bridge_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                  //                .error
		.rdata_fifo_src_ready    (parameter_sys_crc_init_bridge_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameter_sys_crc_init_bridge_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (parameter_sys_crc_init_bridge_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (61),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                              //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parameter_sys_crc_init_bridge_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parameter_sys_crc_init_bridge_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) currctrl_sys_currctrl_gpio_s1_agent (
		.clk                     (clk_50_clk_clk),                                                  //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (currctrl_sys_currctrl_gpio_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (currctrl_sys_currctrl_gpio_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (currctrl_sys_currctrl_gpio_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (currctrl_sys_currctrl_gpio_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (currctrl_sys_currctrl_gpio_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (currctrl_sys_currctrl_gpio_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (currctrl_sys_currctrl_gpio_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (currctrl_sys_currctrl_gpio_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (currctrl_sys_currctrl_gpio_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (currctrl_sys_currctrl_gpio_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (currctrl_sys_currctrl_gpio_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (currctrl_sys_currctrl_gpio_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (currctrl_sys_currctrl_gpio_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (currctrl_sys_currctrl_gpio_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (currctrl_sys_currctrl_gpio_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (currctrl_sys_currctrl_gpio_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                         //                .channel
		.rf_sink_ready           (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (currctrl_sys_currctrl_gpio_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (currctrl_sys_currctrl_gpio_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (currctrl_sys_currctrl_gpio_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (currctrl_sys_currctrl_gpio_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (currctrl_sys_currctrl_gpio_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (currctrl_sys_currctrl_gpio_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (currctrl_sys_currctrl_gpio_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (currctrl_sys_currctrl_gpio_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                  //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (currctrl_sys_currctrl_gpio_s1_agent_rf_source_data),              //        in.data
		.in_valid          (currctrl_sys_currctrl_gpio_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (currctrl_sys_currctrl_gpio_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (currctrl_sys_currctrl_gpio_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (currctrl_sys_currctrl_gpio_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (currctrl_sys_currctrl_gpio_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) currctrl_sys_currctrl_register_ram_s1_agent (
		.clk                     (clk_50_clk_clk),                                                         //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (currctrl_sys_currctrl_register_ram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (currctrl_sys_currctrl_register_ram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (currctrl_sys_currctrl_register_ram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (currctrl_sys_currctrl_register_ram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (currctrl_sys_currctrl_register_ram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (currctrl_sys_currctrl_register_ram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (currctrl_sys_currctrl_register_ram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (currctrl_sys_currctrl_register_ram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (currctrl_sys_currctrl_register_ram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (currctrl_sys_currctrl_register_ram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (currctrl_sys_currctrl_register_ram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (currctrl_sys_currctrl_register_ram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (currctrl_sys_currctrl_register_ram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (currctrl_sys_currctrl_register_ram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (currctrl_sys_currctrl_register_ram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (currctrl_sys_currctrl_register_ram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                //                .channel
		.rf_sink_ready           (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (currctrl_sys_currctrl_register_ram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (currctrl_sys_currctrl_register_ram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (currctrl_sys_currctrl_register_ram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                         //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (currctrl_sys_currctrl_register_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (currctrl_sys_currctrl_register_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) currctrl_sys_currctrlsys_bridge_avalon_slave_agent (
		.clk                     (clk_50_clk_clk),                                                                //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                         //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                         //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                          //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                                   //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                                       //                .channel
		.rf_sink_ready           (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                             //                .error
		.rdata_fifo_src_ready    (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                                //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pheriphals_led_gpio_s1_agent (
		.clk                     (clk_50_clk_clk),                                                  //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pheriphals_led_gpio_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (pheriphals_led_gpio_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (pheriphals_led_gpio_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (pheriphals_led_gpio_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (pheriphals_led_gpio_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (pheriphals_led_gpio_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (pheriphals_led_gpio_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (pheriphals_led_gpio_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (pheriphals_led_gpio_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (pheriphals_led_gpio_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (pheriphals_led_gpio_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (pheriphals_led_gpio_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (pheriphals_led_gpio_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (pheriphals_led_gpio_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (pheriphals_led_gpio_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (pheriphals_led_gpio_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                         //                .channel
		.rf_sink_ready           (pheriphals_led_gpio_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (pheriphals_led_gpio_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (pheriphals_led_gpio_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (pheriphals_led_gpio_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (pheriphals_led_gpio_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (pheriphals_led_gpio_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (pheriphals_led_gpio_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (pheriphals_led_gpio_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (pheriphals_led_gpio_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (pheriphals_led_gpio_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (pheriphals_led_gpio_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pheriphals_led_gpio_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (pheriphals_led_gpio_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pheriphals_led_gpio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                  //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pheriphals_led_gpio_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (pheriphals_led_gpio_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (pheriphals_led_gpio_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (pheriphals_led_gpio_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (pheriphals_led_gpio_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (pheriphals_led_gpio_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (pheriphals_led_gpio_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (pheriphals_led_gpio_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (pheriphals_led_gpio_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (pheriphals_led_gpio_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameter_sys_parameter_gpio_s1_agent (
		.clk                     (clk_50_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (parameter_sys_parameter_gpio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (parameter_sys_parameter_gpio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (parameter_sys_parameter_gpio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (parameter_sys_parameter_gpio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (parameter_sys_parameter_gpio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (parameter_sys_parameter_gpio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (parameter_sys_parameter_gpio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (parameter_sys_parameter_gpio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (parameter_sys_parameter_gpio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (parameter_sys_parameter_gpio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (parameter_sys_parameter_gpio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (parameter_sys_parameter_gpio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (parameter_sys_parameter_gpio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (parameter_sys_parameter_gpio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (parameter_sys_parameter_gpio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (parameter_sys_parameter_gpio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                          //                .channel
		.rf_sink_ready           (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (parameter_sys_parameter_gpio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (parameter_sys_parameter_gpio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (parameter_sys_parameter_gpio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (parameter_sys_parameter_gpio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (parameter_sys_parameter_gpio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (parameter_sys_parameter_gpio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameter_sys_parameter_gpio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (parameter_sys_parameter_gpio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameter_sys_parameter_gpio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (parameter_sys_parameter_gpio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (parameter_sys_parameter_gpio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (parameter_sys_parameter_gpio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parameter_sys_parameter_gpio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parameter_sys_parameter_gpio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parameter_sys_parameter_gpio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameter_sys_parameterlengthpage_s1_agent (
		.clk                     (clk_50_clk_clk),                                                        //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (parameter_sys_parameterlengthpage_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (parameter_sys_parameterlengthpage_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (parameter_sys_parameterlengthpage_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (parameter_sys_parameterlengthpage_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (parameter_sys_parameterlengthpage_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (parameter_sys_parameterlengthpage_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (parameter_sys_parameterlengthpage_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (parameter_sys_parameterlengthpage_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (parameter_sys_parameterlengthpage_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (parameter_sys_parameterlengthpage_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (parameter_sys_parameterlengthpage_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (parameter_sys_parameterlengthpage_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (parameter_sys_parameterlengthpage_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (parameter_sys_parameterlengthpage_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (parameter_sys_parameterlengthpage_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (parameter_sys_parameterlengthpage_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                               //                .channel
		.rf_sink_ready           (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (parameter_sys_parameterlengthpage_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (parameter_sys_parameterlengthpage_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (parameter_sys_parameterlengthpage_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (parameter_sys_parameterlengthpage_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (parameter_sys_parameterlengthpage_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (parameter_sys_parameterlengthpage_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameter_sys_parameterlengthpage_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (parameter_sys_parameterlengthpage_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameter_sys_parameterlengthpage_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                        //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (parameter_sys_parameterlengthpage_s1_agent_rf_source_data),             //        in.data
		.in_valid          (parameter_sys_parameterlengthpage_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (parameter_sys_parameterlengthpage_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parameter_sys_parameterlengthpage_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parameter_sys_parameterlengthpage_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parameter_sys_parameterlengthpage_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timersys_timer_0_s1_agent (
		.clk                     (clk_50_clk_clk),                                                  //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timersys_timer_0_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (timersys_timer_0_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (timersys_timer_0_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (timersys_timer_0_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (timersys_timer_0_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (timersys_timer_0_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (timersys_timer_0_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (timersys_timer_0_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (timersys_timer_0_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (timersys_timer_0_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (timersys_timer_0_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (timersys_timer_0_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (timersys_timer_0_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (timersys_timer_0_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (timersys_timer_0_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (timersys_timer_0_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                         //                .channel
		.rf_sink_ready           (timersys_timer_0_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (timersys_timer_0_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (timersys_timer_0_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (timersys_timer_0_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (timersys_timer_0_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (timersys_timer_0_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (timersys_timer_0_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (timersys_timer_0_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (timersys_timer_0_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (timersys_timer_0_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (timersys_timer_0_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timersys_timer_0_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (timersys_timer_0_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timersys_timer_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                  //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timersys_timer_0_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (timersys_timer_0_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (timersys_timer_0_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (timersys_timer_0_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (timersys_timer_0_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (timersys_timer_0_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (timersys_timer_0_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (timersys_timer_0_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (timersys_timer_0_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (timersys_timer_0_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timersys_timer_1_s1_agent (
		.clk                     (clk_50_clk_clk),                                                  //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timersys_timer_1_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (timersys_timer_1_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (timersys_timer_1_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (timersys_timer_1_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (timersys_timer_1_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (timersys_timer_1_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (timersys_timer_1_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (timersys_timer_1_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (timersys_timer_1_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (timersys_timer_1_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (timersys_timer_1_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (timersys_timer_1_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (timersys_timer_1_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (timersys_timer_1_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (timersys_timer_1_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (timersys_timer_1_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                         //                .channel
		.rf_sink_ready           (timersys_timer_1_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (timersys_timer_1_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (timersys_timer_1_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (timersys_timer_1_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (timersys_timer_1_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (timersys_timer_1_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (timersys_timer_1_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (timersys_timer_1_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (timersys_timer_1_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (timersys_timer_1_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (timersys_timer_1_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timersys_timer_1_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (timersys_timer_1_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timersys_timer_1_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                  //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timersys_timer_1_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (timersys_timer_1_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (timersys_timer_1_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (timersys_timer_1_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (timersys_timer_1_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (timersys_timer_1_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (timersys_timer_1_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (timersys_timer_1_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (timersys_timer_1_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (timersys_timer_1_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timersys_timer_2_s1_agent (
		.clk                     (clk_50_clk_clk),                                                  //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timersys_timer_2_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (timersys_timer_2_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (timersys_timer_2_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (timersys_timer_2_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (timersys_timer_2_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (timersys_timer_2_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (timersys_timer_2_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (timersys_timer_2_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (timersys_timer_2_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (timersys_timer_2_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (timersys_timer_2_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (timersys_timer_2_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (timersys_timer_2_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (timersys_timer_2_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (timersys_timer_2_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (timersys_timer_2_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                         //                .channel
		.rf_sink_ready           (timersys_timer_2_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (timersys_timer_2_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (timersys_timer_2_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (timersys_timer_2_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (timersys_timer_2_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (timersys_timer_2_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (timersys_timer_2_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (timersys_timer_2_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (timersys_timer_2_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (timersys_timer_2_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (timersys_timer_2_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timersys_timer_2_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (timersys_timer_2_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timersys_timer_2_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                  //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timersys_timer_2_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (timersys_timer_2_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (timersys_timer_2_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (timersys_timer_2_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (timersys_timer_2_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (timersys_timer_2_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (timersys_timer_2_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (timersys_timer_2_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (timersys_timer_2_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (timersys_timer_2_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pheriphals_tp_gpio_s1_agent (
		.clk                     (clk_50_clk_clk),                                                  //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pheriphals_tp_gpio_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (pheriphals_tp_gpio_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (pheriphals_tp_gpio_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (pheriphals_tp_gpio_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (pheriphals_tp_gpio_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (pheriphals_tp_gpio_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (pheriphals_tp_gpio_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (pheriphals_tp_gpio_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (pheriphals_tp_gpio_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (pheriphals_tp_gpio_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (pheriphals_tp_gpio_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (pheriphals_tp_gpio_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (pheriphals_tp_gpio_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (pheriphals_tp_gpio_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (pheriphals_tp_gpio_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (pheriphals_tp_gpio_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                         //                .channel
		.rf_sink_ready           (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (pheriphals_tp_gpio_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (pheriphals_tp_gpio_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (pheriphals_tp_gpio_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (pheriphals_tp_gpio_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (pheriphals_tp_gpio_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (pheriphals_tp_gpio_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pheriphals_tp_gpio_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (pheriphals_tp_gpio_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pheriphals_tp_gpio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                  //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pheriphals_tp_gpio_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (pheriphals_tp_gpio_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (pheriphals_tp_gpio_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (pheriphals_tp_gpio_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (pheriphals_tp_gpio_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (pheriphals_tp_gpio_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (86),
		.PKT_ORI_BURST_SIZE_L      (84),
		.PKT_RESPONSE_STATUS_H     (83),
		.PKT_RESPONSE_STATUS_L     (82),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (77),
		.PKT_PROTECTION_L          (75),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (87),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) usb_data_sys_usb_gpio_s1_agent (
		.clk                     (clk_50_clk_clk),                                                  //             clk.clk
		.reset                   (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (usb_data_sys_usb_gpio_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (usb_data_sys_usb_gpio_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (usb_data_sys_usb_gpio_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (usb_data_sys_usb_gpio_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (usb_data_sys_usb_gpio_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (usb_data_sys_usb_gpio_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (usb_data_sys_usb_gpio_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (usb_data_sys_usb_gpio_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (usb_data_sys_usb_gpio_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (usb_data_sys_usb_gpio_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (usb_data_sys_usb_gpio_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (usb_data_sys_usb_gpio_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (usb_data_sys_usb_gpio_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (usb_data_sys_usb_gpio_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (usb_data_sys_usb_gpio_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (usb_data_sys_usb_gpio_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                         //                .channel
		.rf_sink_ready           (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (usb_data_sys_usb_gpio_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (usb_data_sys_usb_gpio_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (usb_data_sys_usb_gpio_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (usb_data_sys_usb_gpio_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (usb_data_sys_usb_gpio_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (usb_data_sys_usb_gpio_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (usb_data_sys_usb_gpio_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (usb_data_sys_usb_gpio_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (88),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) usb_data_sys_usb_gpio_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                  //       clk.clk
		.reset             (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (usb_data_sys_usb_gpio_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (usb_data_sys_usb_gpio_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (usb_data_sys_usb_gpio_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (usb_data_sys_usb_gpio_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (usb_data_sys_usb_gpio_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (usb_data_sys_usb_gpio_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router router (
		.sink_ready         (mm_clock_crossing_bridge_1_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (mm_clock_crossing_bridge_1_m0_agent_cp_valid),                    //          .valid
		.sink_data          (mm_clock_crossing_bridge_1_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (mm_clock_crossing_bridge_1_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_1_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                //       src.ready
		.src_valid          (router_src_valid),                                                //          .valid
		.src_data           (router_src_data),                                                 //          .data
		.src_channel        (router_src_channel),                                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                           //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (parameter_sys_crc_init_bridge_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                    //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_001_src_ready),                                              //       src.ready
		.src_valid          (router_001_src_valid),                                              //          .valid
		.src_data           (router_001_src_data),                                               //          .data
		.src_channel        (router_001_src_channel),                                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                         //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (currctrl_sys_currctrl_gpio_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (currctrl_sys_currctrl_gpio_s1_agent_rp_valid),                    //          .valid
		.sink_data          (currctrl_sys_currctrl_gpio_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (currctrl_sys_currctrl_gpio_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (currctrl_sys_currctrl_gpio_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //       src.ready
		.src_valid          (router_002_src_valid),                                            //          .valid
		.src_data           (router_002_src_data),                                             //          .data
		.src_channel        (router_002_src_channel),                                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_003 (
		.sink_ready         (currctrl_sys_currctrl_register_ram_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (currctrl_sys_currctrl_register_ram_s1_agent_rp_valid),            //          .valid
		.sink_data          (currctrl_sys_currctrl_register_ram_s1_agent_rp_data),             //          .data
		.sink_startofpacket (currctrl_sys_currctrl_register_ram_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (currctrl_sys_currctrl_register_ram_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //       src.ready
		.src_valid          (router_003_src_valid),                                            //          .valid
		.src_data           (router_003_src_data),                                             //          .data
		.src_channel        (router_003_src_channel),                                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_004 (
		.sink_ready         (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                      //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_004_src_ready),                                                //       src.ready
		.src_valid          (router_004_src_valid),                                                //          .valid
		.src_data           (router_004_src_data),                                                 //          .data
		.src_channel        (router_004_src_channel),                                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                           //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_005 (
		.sink_ready         (pheriphals_led_gpio_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (pheriphals_led_gpio_s1_agent_rp_valid),                           //          .valid
		.sink_data          (pheriphals_led_gpio_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (pheriphals_led_gpio_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (pheriphals_led_gpio_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                            //       src.ready
		.src_valid          (router_005_src_valid),                                            //          .valid
		.src_data           (router_005_src_data),                                             //          .data
		.src_channel        (router_005_src_channel),                                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_006 (
		.sink_ready         (parameter_sys_parameter_gpio_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (parameter_sys_parameter_gpio_s1_agent_rp_valid),                  //          .valid
		.sink_data          (parameter_sys_parameter_gpio_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (parameter_sys_parameter_gpio_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (parameter_sys_parameter_gpio_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                            //       src.ready
		.src_valid          (router_006_src_valid),                                            //          .valid
		.src_data           (router_006_src_data),                                             //          .data
		.src_channel        (router_006_src_channel),                                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_007 (
		.sink_ready         (parameter_sys_parameterlengthpage_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (parameter_sys_parameterlengthpage_s1_agent_rp_valid),             //          .valid
		.sink_data          (parameter_sys_parameterlengthpage_s1_agent_rp_data),              //          .data
		.sink_startofpacket (parameter_sys_parameterlengthpage_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (parameter_sys_parameterlengthpage_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                            //       src.ready
		.src_valid          (router_007_src_valid),                                            //          .valid
		.src_data           (router_007_src_data),                                             //          .data
		.src_channel        (router_007_src_channel),                                          //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_008 (
		.sink_ready         (timersys_timer_0_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (timersys_timer_0_s1_agent_rp_valid),                              //          .valid
		.sink_data          (timersys_timer_0_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (timersys_timer_0_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (timersys_timer_0_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                            //       src.ready
		.src_valid          (router_008_src_valid),                                            //          .valid
		.src_data           (router_008_src_data),                                             //          .data
		.src_channel        (router_008_src_channel),                                          //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_009 (
		.sink_ready         (timersys_timer_1_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (timersys_timer_1_s1_agent_rp_valid),                              //          .valid
		.sink_data          (timersys_timer_1_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (timersys_timer_1_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (timersys_timer_1_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                            //       src.ready
		.src_valid          (router_009_src_valid),                                            //          .valid
		.src_data           (router_009_src_data),                                             //          .data
		.src_channel        (router_009_src_channel),                                          //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_010 (
		.sink_ready         (timersys_timer_2_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (timersys_timer_2_s1_agent_rp_valid),                              //          .valid
		.sink_data          (timersys_timer_2_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (timersys_timer_2_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (timersys_timer_2_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                            //       src.ready
		.src_valid          (router_010_src_valid),                                            //          .valid
		.src_data           (router_010_src_data),                                             //          .data
		.src_channel        (router_010_src_channel),                                          //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_011 (
		.sink_ready         (pheriphals_tp_gpio_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (pheriphals_tp_gpio_s1_agent_rp_valid),                            //          .valid
		.sink_data          (pheriphals_tp_gpio_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (pheriphals_tp_gpio_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (pheriphals_tp_gpio_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                            //       src.ready
		.src_valid          (router_011_src_valid),                                            //          .valid
		.src_data           (router_011_src_data),                                             //          .data
		.src_channel        (router_011_src_channel),                                          //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_router_002 router_012 (
		.sink_ready         (usb_data_sys_usb_gpio_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (usb_data_sys_usb_gpio_s1_agent_rp_valid),                         //          .valid
		.sink_data          (usb_data_sys_usb_gpio_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (usb_data_sys_usb_gpio_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (usb_data_sys_usb_gpio_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                            //       src.ready
		.src_valid          (router_012_src_valid),                                            //          .valid
		.src_data           (router_012_src_data),                                             //          .data
		.src_channel        (router_012_src_channel),                                          //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (70),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (66),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (87),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_clock_crossing_bridge_1_m0_limiter (
		.clk                    (clk_50_clk_clk),                                                  //       clk.clk
		.reset                  (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                //          .valid
		.cmd_sink_data          (router_src_data),                                                 //          .data
		.cmd_sink_channel       (router_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (mm_clock_crossing_bridge_1_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (mm_clock_crossing_bridge_1_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (19),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (37),
		.PKT_BYTE_CNT_H            (28),
		.PKT_BYTE_CNT_L            (26),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (32),
		.PKT_BURST_SIZE_L          (30),
		.PKT_BURST_TYPE_H          (34),
		.PKT_BURST_TYPE_L          (33),
		.PKT_BURSTWRAP_H           (29),
		.PKT_BURSTWRAP_L           (29),
		.PKT_TRANS_COMPRESSED_READ (20),
		.PKT_TRANS_WRITE           (22),
		.PKT_TRANS_READ            (23),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (60),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (26),
		.OUT_BURSTWRAP_H           (29),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) parameter_sys_crc_init_bridge_avalon_slave_burst_adapter (
		.clk                   (clk_50_clk_clk),                                                                 //       cr0.clk
		.reset                 (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (parameter_sys_crc_init_bridge_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (clk_50_clk_clk),                                                  //        clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel        (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data           (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket  (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket    (mm_clock_crossing_bridge_1_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid          (mm_clock_crossing_bridge_1_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                            //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                            //           .valid
		.src0_data           (cmd_demux_src0_data),                                             //           .data
		.src0_channel        (cmd_demux_src0_channel),                                          //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                      //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                            //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                            //           .valid
		.src1_data           (cmd_demux_src1_data),                                             //           .data
		.src1_channel        (cmd_demux_src1_channel),                                          //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                      //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                            //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                            //           .valid
		.src2_data           (cmd_demux_src2_data),                                             //           .data
		.src2_channel        (cmd_demux_src2_channel),                                          //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                      //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                            //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                            //           .valid
		.src3_data           (cmd_demux_src3_data),                                             //           .data
		.src3_channel        (cmd_demux_src3_channel),                                          //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                      //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                            //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                            //           .valid
		.src4_data           (cmd_demux_src4_data),                                             //           .data
		.src4_channel        (cmd_demux_src4_channel),                                          //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                      //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                            //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                            //           .valid
		.src5_data           (cmd_demux_src5_data),                                             //           .data
		.src5_channel        (cmd_demux_src5_channel),                                          //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                      //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                            //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                            //           .valid
		.src6_data           (cmd_demux_src6_data),                                             //           .data
		.src6_channel        (cmd_demux_src6_channel),                                          //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                      //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                            //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                            //           .valid
		.src7_data           (cmd_demux_src7_data),                                             //           .data
		.src7_channel        (cmd_demux_src7_channel),                                          //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                      //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                            //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                            //           .valid
		.src8_data           (cmd_demux_src8_data),                                             //           .data
		.src8_channel        (cmd_demux_src8_channel),                                          //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                      //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                            //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                            //           .valid
		.src9_data           (cmd_demux_src9_data),                                             //           .data
		.src9_channel        (cmd_demux_src9_channel),                                          //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                      //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                           //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                           //           .valid
		.src10_data          (cmd_demux_src10_data),                                            //           .data
		.src10_channel       (cmd_demux_src10_channel),                                         //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                     //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                           //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                           //           .valid
		.src11_data          (cmd_demux_src11_data),                                            //           .data
		.src11_channel       (cmd_demux_src11_channel),                                         //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                   //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket)                                      //           .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src0_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                           //          .valid
		.src_data            (cmd_mux_001_src_data),                                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src1_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                           //          .valid
		.src_data            (cmd_mux_002_src_data),                                            //          .data
		.src_channel         (cmd_mux_002_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src2_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                           //          .valid
		.src_data            (cmd_mux_003_src_data),                                            //          .data
		.src_channel         (cmd_mux_003_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src3_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                           //          .valid
		.src_data            (cmd_mux_004_src_data),                                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src4_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                           //          .valid
		.src_data            (cmd_mux_005_src_data),                                            //          .data
		.src_channel         (cmd_mux_005_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src5_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                           //          .valid
		.src_data            (cmd_mux_006_src_data),                                            //          .data
		.src_channel         (cmd_mux_006_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src6_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                           //          .valid
		.src_data            (cmd_mux_007_src_data),                                            //          .data
		.src_channel         (cmd_mux_007_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src7_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                           //          .valid
		.src_data            (cmd_mux_008_src_data),                                            //          .data
		.src_channel         (cmd_mux_008_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src8_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                           //          .valid
		.src_data            (cmd_mux_009_src_data),                                            //          .data
		.src_channel         (cmd_mux_009_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src9_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                           //          .valid
		.src_data            (cmd_mux_010_src_data),                                            //          .data
		.src_channel         (cmd_mux_010_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src10_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                                      //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_cmd_mux cmd_mux_011 (
		.clk                 (clk_50_clk_clk),                                                  //       clk.clk
		.reset               (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                           //          .valid
		.src_data            (cmd_mux_011_src_data),                                            //          .data
		.src_channel         (cmd_mux_011_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src11_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                                      //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                                                                 //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.sink_ready         (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                           //          .valid
		.src0_data          (rsp_demux_src0_data),                                                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                      //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                            //      sink.ready
		.sink_channel       (router_002_src_channel),                                          //          .channel
		.sink_data          (router_002_src_data),                                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                            //      sink.ready
		.sink_channel       (router_003_src_channel),                                          //          .channel
		.sink_data          (router_003_src_data),                                             //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_003_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                            //      sink.ready
		.sink_channel       (router_004_src_channel),                                          //          .channel
		.sink_data          (router_004_src_data),                                             //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_004_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                            //      sink.ready
		.sink_channel       (router_005_src_channel),                                          //          .channel
		.sink_data          (router_005_src_data),                                             //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_005_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                            //      sink.ready
		.sink_channel       (router_006_src_channel),                                          //          .channel
		.sink_data          (router_006_src_data),                                             //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_006_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                            //      sink.ready
		.sink_channel       (router_007_src_channel),                                          //          .channel
		.sink_data          (router_007_src_data),                                             //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_007_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                            //      sink.ready
		.sink_channel       (router_008_src_channel),                                          //          .channel
		.sink_data          (router_008_src_data),                                             //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_008_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                            //      sink.ready
		.sink_channel       (router_009_src_channel),                                          //          .channel
		.sink_data          (router_009_src_data),                                             //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_009_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                            //      sink.ready
		.sink_channel       (router_010_src_channel),                                          //          .channel
		.sink_data          (router_010_src_data),                                             //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_010_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_010 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                            //      sink.ready
		.sink_channel       (router_011_src_channel),                                          //          .channel
		.sink_data          (router_011_src_data),                                             //          .data
		.sink_startofpacket (router_011_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_011_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_demux rsp_demux_011 (
		.clk                (clk_50_clk_clk),                                                  //       clk.clk
		.reset              (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                            //      sink.ready
		.sink_channel       (router_012_src_channel),                                          //          .channel
		.sink_data          (router_012_src_data),                                             //          .data
		.sink_startofpacket (router_012_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_012_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (clk_50_clk_clk),                                                  //       clk.clk
		.reset                (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                               //       src.ready
		.src_valid            (rsp_mux_src_valid),                                               //          .valid
		.src_data             (rsp_mux_src_data),                                                //          .data
		.src_channel          (rsp_mux_src_channel),                                             //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                            //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                            //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                          //          .channel
		.sink0_data           (rsp_demux_src0_data),                                             //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                      //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                        //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                        //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                      //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                         //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                  //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                        //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                        //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                      //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                         //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                  //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                        //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                        //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                      //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                         //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                  //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                        //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                        //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                      //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                         //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                  //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                        //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                        //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                      //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                         //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                  //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                        //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                        //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                      //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                         //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                  //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                        //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                        //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                      //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                         //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                  //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                        //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                        //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                      //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                         //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                  //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                        //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                        //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                      //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                         //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                  //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                        //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                        //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                      //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                         //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                  //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                        //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                        //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                      //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                         //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (19),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (28),
		.IN_PKT_BYTE_CNT_L             (26),
		.IN_PKT_TRANS_COMPRESSED_READ  (20),
		.IN_PKT_TRANS_WRITE            (22),
		.IN_PKT_BURSTWRAP_H            (29),
		.IN_PKT_BURSTWRAP_L            (29),
		.IN_PKT_BURST_SIZE_H           (32),
		.IN_PKT_BURST_SIZE_L           (30),
		.IN_PKT_RESPONSE_STATUS_H      (56),
		.IN_PKT_RESPONSE_STATUS_L      (55),
		.IN_PKT_TRANS_EXCLUSIVE        (25),
		.IN_PKT_BURST_TYPE_H           (34),
		.IN_PKT_BURST_TYPE_L           (33),
		.IN_PKT_ORI_BURST_SIZE_L       (57),
		.IN_PKT_ORI_BURST_SIZE_H       (59),
		.IN_ST_DATA_W                  (60),
		.OUT_PKT_ADDR_H                (46),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (53),
		.OUT_PKT_TRANS_COMPRESSED_READ (47),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (83),
		.OUT_PKT_RESPONSE_STATUS_L     (82),
		.OUT_PKT_TRANS_EXCLUSIVE       (52),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (84),
		.OUT_PKT_ORI_BURST_SIZE_H      (86),
		.OUT_ST_DATA_W                 (87),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter (
		.clk                  (clk_50_clk_clk),                                                                 //       clk.clk
		.reset                (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (router_001_src_valid),                                                           //      sink.valid
		.in_channel           (router_001_src_channel),                                                         //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                                     //          .endofpacket
		.in_ready             (router_001_src_ready),                                                           //          .ready
		.in_data              (router_001_src_data),                                                            //          .data
		.out_endofpacket      (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (parameter_sys_crc_init_bridge_avalon_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (46),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (53),
		.IN_PKT_TRANS_COMPRESSED_READ  (47),
		.IN_PKT_TRANS_WRITE            (49),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (83),
		.IN_PKT_RESPONSE_STATUS_L      (82),
		.IN_PKT_TRANS_EXCLUSIVE        (52),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (84),
		.IN_PKT_ORI_BURST_SIZE_H       (86),
		.IN_ST_DATA_W                  (87),
		.OUT_PKT_ADDR_H                (19),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (28),
		.OUT_PKT_BYTE_CNT_L            (26),
		.OUT_PKT_TRANS_COMPRESSED_READ (20),
		.OUT_PKT_BURST_SIZE_H          (32),
		.OUT_PKT_BURST_SIZE_L          (30),
		.OUT_PKT_RESPONSE_STATUS_H     (56),
		.OUT_PKT_RESPONSE_STATUS_L     (55),
		.OUT_PKT_TRANS_EXCLUSIVE       (25),
		.OUT_PKT_BURST_TYPE_H          (34),
		.OUT_PKT_BURST_TYPE_L          (33),
		.OUT_PKT_ORI_BURST_SIZE_L      (57),
		.OUT_PKT_ORI_BURST_SIZE_H      (59),
		.OUT_ST_DATA_W                 (60),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter (
		.clk                  (clk_50_clk_clk),                                                                 //       clk.clk
		.reset                (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                              //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                            //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                              //          .ready
		.in_data              (cmd_mux_src_data),                                                               //          .data
		.out_endofpacket      (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (parameter_sys_crc_init_bridge_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	Mk8_InlineController_CPU_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_50_clk_clk),                                                        // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (parameter_sys_crc_init_bridge_avalon_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (parameter_sys_crc_init_bridge_avalon_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (parameter_sys_crc_init_bridge_avalon_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                          //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (currctrl_sys_currctrl_gpio_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (currctrl_sys_currctrl_gpio_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (currctrl_sys_currctrl_gpio_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (currctrl_sys_currctrl_register_ram_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (currctrl_sys_currctrl_register_ram_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (currctrl_sys_currctrl_register_ram_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                 //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                          // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (currctrl_sys_currctrlsys_bridge_avalon_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                        //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pheriphals_led_gpio_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (pheriphals_led_gpio_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (pheriphals_led_gpio_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameter_sys_parameter_gpio_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (parameter_sys_parameter_gpio_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (parameter_sys_parameter_gpio_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameter_sys_parameterlengthpage_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (parameter_sys_parameterlengthpage_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (parameter_sys_parameterlengthpage_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timersys_timer_0_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (timersys_timer_0_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (timersys_timer_0_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timersys_timer_1_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (timersys_timer_1_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (timersys_timer_1_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timersys_timer_2_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (timersys_timer_2_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (timersys_timer_2_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pheriphals_tp_gpio_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (pheriphals_tp_gpio_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (pheriphals_tp_gpio_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_1_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (usb_data_sys_usb_gpio_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (usb_data_sys_usb_gpio_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (usb_data_sys_usb_gpio_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                                //         .error
	);

endmodule
