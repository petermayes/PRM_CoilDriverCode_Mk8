// Mk8_InlineController_CPU_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 646

`timescale 1 ps / 1 ps
module Mk8_InlineController_CPU_mm_interconnect_0 (
		input  wire         altpll_sys_c0_clk,                                            //                                          altpll_sys_c0.clk
		input  wire         clk_50_clk_clk,                                               //                                             clk_50_clk.clk
		input  wire         altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset, // altpll_sys_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire         msgdma_0_reset_n_reset_bridge_in_reset_reset,                 //                 msgdma_0_reset_n_reset_bridge_in_reset.reset
		input  wire         nios2_gen2_reset_reset_bridge_in_reset_reset,                 //                 nios2_gen2_reset_reset_bridge_in_reset.reset
		input  wire         Parameter_SYS_cpu_reset_reset_bridge_in_reset_reset,          //          Parameter_SYS_cpu_reset_reset_bridge_in_reset.reset
		input  wire [24:0]  msgdma_0_mm_read_address,                                     //                                       msgdma_0_mm_read.address
		output wire         msgdma_0_mm_read_waitrequest,                                 //                                                       .waitrequest
		input  wire [3:0]   msgdma_0_mm_read_byteenable,                                  //                                                       .byteenable
		input  wire         msgdma_0_mm_read_read,                                        //                                                       .read
		output wire [31:0]  msgdma_0_mm_read_readdata,                                    //                                                       .readdata
		output wire         msgdma_0_mm_read_readdatavalid,                               //                                                       .readdatavalid
		input  wire [24:0]  msgdma_0_mm_write_address,                                    //                                      msgdma_0_mm_write.address
		output wire         msgdma_0_mm_write_waitrequest,                                //                                                       .waitrequest
		input  wire [3:0]   msgdma_0_mm_write_byteenable,                                 //                                                       .byteenable
		input  wire         msgdma_0_mm_write_write,                                      //                                                       .write
		input  wire [31:0]  msgdma_0_mm_write_writedata,                                  //                                                       .writedata
		input  wire [25:0]  nios2_gen2_data_master_address,                               //                                 nios2_gen2_data_master.address
		output wire         nios2_gen2_data_master_waitrequest,                           //                                                       .waitrequest
		input  wire [3:0]   nios2_gen2_data_master_byteenable,                            //                                                       .byteenable
		input  wire         nios2_gen2_data_master_read,                                  //                                                       .read
		output wire [31:0]  nios2_gen2_data_master_readdata,                              //                                                       .readdata
		input  wire         nios2_gen2_data_master_write,                                 //                                                       .write
		input  wire [31:0]  nios2_gen2_data_master_writedata,                             //                                                       .writedata
		input  wire         nios2_gen2_data_master_debugaccess,                           //                                                       .debugaccess
		input  wire [16:0]  nios2_gen2_instruction_master_address,                        //                          nios2_gen2_instruction_master.address
		output wire         nios2_gen2_instruction_master_waitrequest,                    //                                                       .waitrequest
		input  wire         nios2_gen2_instruction_master_read,                           //                                                       .read
		output wire [31:0]  nios2_gen2_instruction_master_readdata,                       //                                                       .readdata
		output wire         nios2_gen2_instruction_master_readdatavalid,                  //                                                       .readdatavalid
		output wire [1:0]   altpll_sys_pll_slave_address,                                 //                                   altpll_sys_pll_slave.address
		output wire         altpll_sys_pll_slave_write,                                   //                                                       .write
		output wire         altpll_sys_pll_slave_read,                                    //                                                       .read
		input  wire [31:0]  altpll_sys_pll_slave_readdata,                                //                                                       .readdata
		output wire [31:0]  altpll_sys_pll_slave_writedata,                               //                                                       .writedata
		output wire [11:0]  Data_Memory_s1_address,                                       //                                         Data_Memory_s1.address
		output wire         Data_Memory_s1_write,                                         //                                                       .write
		input  wire [31:0]  Data_Memory_s1_readdata,                                      //                                                       .readdata
		output wire [31:0]  Data_Memory_s1_writedata,                                     //                                                       .writedata
		output wire [3:0]   Data_Memory_s1_byteenable,                                    //                                                       .byteenable
		output wire         Data_Memory_s1_chipselect,                                    //                                                       .chipselect
		output wire         Data_Memory_s1_clken,                                         //                                                       .clken
		output wire [10:0]  mm_clock_crossing_bridge_1_s0_address,                        //                          mm_clock_crossing_bridge_1_s0.address
		output wire         mm_clock_crossing_bridge_1_s0_write,                          //                                                       .write
		output wire         mm_clock_crossing_bridge_1_s0_read,                           //                                                       .read
		input  wire [31:0]  mm_clock_crossing_bridge_1_s0_readdata,                       //                                                       .readdata
		output wire [31:0]  mm_clock_crossing_bridge_1_s0_writedata,                      //                                                       .writedata
		output wire [0:0]   mm_clock_crossing_bridge_1_s0_burstcount,                     //                                                       .burstcount
		output wire [3:0]   mm_clock_crossing_bridge_1_s0_byteenable,                     //                                                       .byteenable
		input  wire         mm_clock_crossing_bridge_1_s0_readdatavalid,                  //                                                       .readdatavalid
		input  wire         mm_clock_crossing_bridge_1_s0_waitrequest,                    //                                                       .waitrequest
		output wire         mm_clock_crossing_bridge_1_s0_debugaccess,                    //                                                       .debugaccess
		output wire [2:0]   msgdma_0_csr_address,                                         //                                           msgdma_0_csr.address
		output wire         msgdma_0_csr_write,                                           //                                                       .write
		output wire         msgdma_0_csr_read,                                            //                                                       .read
		input  wire [31:0]  msgdma_0_csr_readdata,                                        //                                                       .readdata
		output wire [31:0]  msgdma_0_csr_writedata,                                       //                                                       .writedata
		output wire [3:0]   msgdma_0_csr_byteenable,                                      //                                                       .byteenable
		output wire         msgdma_0_descriptor_slave_write,                              //                              msgdma_0_descriptor_slave.write
		output wire [255:0] msgdma_0_descriptor_slave_writedata,                          //                                                       .writedata
		output wire [31:0]  msgdma_0_descriptor_slave_byteenable,                         //                                                       .byteenable
		input  wire         msgdma_0_descriptor_slave_waitrequest,                        //                                                       .waitrequest
		output wire [8:0]   nios2_gen2_debug_mem_slave_address,                           //                             nios2_gen2_debug_mem_slave.address
		output wire         nios2_gen2_debug_mem_slave_write,                             //                                                       .write
		output wire         nios2_gen2_debug_mem_slave_read,                              //                                                       .read
		input  wire [31:0]  nios2_gen2_debug_mem_slave_readdata,                          //                                                       .readdata
		output wire [31:0]  nios2_gen2_debug_mem_slave_writedata,                         //                                                       .writedata
		output wire [3:0]   nios2_gen2_debug_mem_slave_byteenable,                        //                                                       .byteenable
		input  wire         nios2_gen2_debug_mem_slave_waitrequest,                       //                                                       .waitrequest
		output wire         nios2_gen2_debug_mem_slave_debugaccess,                       //                                                       .debugaccess
		output wire [10:0]  Parameter_SYS_parameter_rx_ram_s1_address,                    //                      Parameter_SYS_parameter_rx_ram_s1.address
		output wire         Parameter_SYS_parameter_rx_ram_s1_write,                      //                                                       .write
		input  wire [31:0]  Parameter_SYS_parameter_rx_ram_s1_readdata,                   //                                                       .readdata
		output wire [31:0]  Parameter_SYS_parameter_rx_ram_s1_writedata,                  //                                                       .writedata
		output wire [3:0]   Parameter_SYS_parameter_rx_ram_s1_byteenable,                 //                                                       .byteenable
		output wire         Parameter_SYS_parameter_rx_ram_s1_chipselect,                 //                                                       .chipselect
		output wire         Parameter_SYS_parameter_rx_ram_s1_clken,                      //                                                       .clken
		output wire [10:0]  Parameter_SYS_parameter_tx_ram_s1_address,                    //                      Parameter_SYS_parameter_tx_ram_s1.address
		output wire         Parameter_SYS_parameter_tx_ram_s1_write,                      //                                                       .write
		input  wire [31:0]  Parameter_SYS_parameter_tx_ram_s1_readdata,                   //                                                       .readdata
		output wire [31:0]  Parameter_SYS_parameter_tx_ram_s1_writedata,                  //                                                       .writedata
		output wire [3:0]   Parameter_SYS_parameter_tx_ram_s1_byteenable,                 //                                                       .byteenable
		output wire         Parameter_SYS_parameter_tx_ram_s1_chipselect,                 //                                                       .chipselect
		output wire         Parameter_SYS_parameter_tx_ram_s1_clken,                      //                                                       .clken
		output wire [12:0]  Program_Memory_s1_address,                                    //                                      Program_Memory_s1.address
		output wire         Program_Memory_s1_write,                                      //                                                       .write
		input  wire [31:0]  Program_Memory_s1_readdata,                                   //                                                       .readdata
		output wire [31:0]  Program_Memory_s1_writedata,                                  //                                                       .writedata
		output wire [3:0]   Program_Memory_s1_byteenable,                                 //                                                       .byteenable
		output wire         Program_Memory_s1_chipselect,                                 //                                                       .chipselect
		output wire         Program_Memory_s1_clken,                                      //                                                       .clken
		output wire [10:0]  USB_Data_SYS_usb_rx_ram_s1_address,                           //                             USB_Data_SYS_usb_rx_ram_s1.address
		output wire         USB_Data_SYS_usb_rx_ram_s1_write,                             //                                                       .write
		input  wire [31:0]  USB_Data_SYS_usb_rx_ram_s1_readdata,                          //                                                       .readdata
		output wire [31:0]  USB_Data_SYS_usb_rx_ram_s1_writedata,                         //                                                       .writedata
		output wire [3:0]   USB_Data_SYS_usb_rx_ram_s1_byteenable,                        //                                                       .byteenable
		output wire         USB_Data_SYS_usb_rx_ram_s1_chipselect,                        //                                                       .chipselect
		output wire         USB_Data_SYS_usb_rx_ram_s1_clken,                             //                                                       .clken
		output wire [7:0]   vic_0_csr_access_address,                                     //                                       vic_0_csr_access.address
		output wire         vic_0_csr_access_write,                                       //                                                       .write
		output wire         vic_0_csr_access_read,                                        //                                                       .read
		input  wire [31:0]  vic_0_csr_access_readdata,                                    //                                                       .readdata
		output wire [31:0]  vic_0_csr_access_writedata                                    //                                                       .writedata
	);

	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_data_master_agent:av_waitrequest -> nios2_gen2_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_data_master_agent:av_readdata -> nios2_gen2_data_master_translator:uav_readdata
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_data_master_translator:uav_debugaccess -> nios2_gen2_data_master_agent:av_debugaccess
	wire   [25:0] nios2_gen2_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_data_master_translator:uav_address -> nios2_gen2_data_master_agent:av_address
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_data_master_translator:uav_read -> nios2_gen2_data_master_agent:av_read
	wire    [3:0] nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_data_master_translator:uav_byteenable -> nios2_gen2_data_master_agent:av_byteenable
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_data_master_agent:av_readdatavalid -> nios2_gen2_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_data_master_translator:uav_lock -> nios2_gen2_data_master_agent:av_lock
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_data_master_translator:uav_write -> nios2_gen2_data_master_agent:av_write
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_data_master_translator:uav_writedata -> nios2_gen2_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_data_master_translator:uav_burstcount -> nios2_gen2_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> nios2_gen2_data_master_agent:rp_valid
	wire  [106:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> nios2_gen2_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                // nios2_gen2_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [10:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> nios2_gen2_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> nios2_gen2_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> nios2_gen2_data_master_agent:rp_endofpacket
	wire          msgdma_0_mm_read_translator_avalon_universal_master_0_waitrequest;                // msgdma_0_mm_read_agent:av_waitrequest -> msgdma_0_mm_read_translator:uav_waitrequest
	wire   [31:0] msgdma_0_mm_read_translator_avalon_universal_master_0_readdata;                   // msgdma_0_mm_read_agent:av_readdata -> msgdma_0_mm_read_translator:uav_readdata
	wire          msgdma_0_mm_read_translator_avalon_universal_master_0_debugaccess;                // msgdma_0_mm_read_translator:uav_debugaccess -> msgdma_0_mm_read_agent:av_debugaccess
	wire   [25:0] msgdma_0_mm_read_translator_avalon_universal_master_0_address;                    // msgdma_0_mm_read_translator:uav_address -> msgdma_0_mm_read_agent:av_address
	wire          msgdma_0_mm_read_translator_avalon_universal_master_0_read;                       // msgdma_0_mm_read_translator:uav_read -> msgdma_0_mm_read_agent:av_read
	wire    [3:0] msgdma_0_mm_read_translator_avalon_universal_master_0_byteenable;                 // msgdma_0_mm_read_translator:uav_byteenable -> msgdma_0_mm_read_agent:av_byteenable
	wire          msgdma_0_mm_read_translator_avalon_universal_master_0_readdatavalid;              // msgdma_0_mm_read_agent:av_readdatavalid -> msgdma_0_mm_read_translator:uav_readdatavalid
	wire          msgdma_0_mm_read_translator_avalon_universal_master_0_lock;                       // msgdma_0_mm_read_translator:uav_lock -> msgdma_0_mm_read_agent:av_lock
	wire          msgdma_0_mm_read_translator_avalon_universal_master_0_write;                      // msgdma_0_mm_read_translator:uav_write -> msgdma_0_mm_read_agent:av_write
	wire   [31:0] msgdma_0_mm_read_translator_avalon_universal_master_0_writedata;                  // msgdma_0_mm_read_translator:uav_writedata -> msgdma_0_mm_read_agent:av_writedata
	wire    [2:0] msgdma_0_mm_read_translator_avalon_universal_master_0_burstcount;                 // msgdma_0_mm_read_translator:uav_burstcount -> msgdma_0_mm_read_agent:av_burstcount
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_waitrequest;               // msgdma_0_mm_write_agent:av_waitrequest -> msgdma_0_mm_write_translator:uav_waitrequest
	wire   [31:0] msgdma_0_mm_write_translator_avalon_universal_master_0_readdata;                  // msgdma_0_mm_write_agent:av_readdata -> msgdma_0_mm_write_translator:uav_readdata
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_debugaccess;               // msgdma_0_mm_write_translator:uav_debugaccess -> msgdma_0_mm_write_agent:av_debugaccess
	wire   [25:0] msgdma_0_mm_write_translator_avalon_universal_master_0_address;                   // msgdma_0_mm_write_translator:uav_address -> msgdma_0_mm_write_agent:av_address
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_read;                      // msgdma_0_mm_write_translator:uav_read -> msgdma_0_mm_write_agent:av_read
	wire    [3:0] msgdma_0_mm_write_translator_avalon_universal_master_0_byteenable;                // msgdma_0_mm_write_translator:uav_byteenable -> msgdma_0_mm_write_agent:av_byteenable
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_readdatavalid;             // msgdma_0_mm_write_agent:av_readdatavalid -> msgdma_0_mm_write_translator:uav_readdatavalid
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_lock;                      // msgdma_0_mm_write_translator:uav_lock -> msgdma_0_mm_write_agent:av_lock
	wire          msgdma_0_mm_write_translator_avalon_universal_master_0_write;                     // msgdma_0_mm_write_translator:uav_write -> msgdma_0_mm_write_agent:av_write
	wire   [31:0] msgdma_0_mm_write_translator_avalon_universal_master_0_writedata;                 // msgdma_0_mm_write_translator:uav_writedata -> msgdma_0_mm_write_agent:av_writedata
	wire    [2:0] msgdma_0_mm_write_translator_avalon_universal_master_0_burstcount;                // msgdma_0_mm_write_translator:uav_burstcount -> msgdma_0_mm_write_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                            // rsp_mux_002:src_valid -> msgdma_0_mm_write_agent:rp_valid
	wire  [106:0] rsp_mux_002_src_data;                                                             // rsp_mux_002:src_data -> msgdma_0_mm_write_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                            // msgdma_0_mm_write_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [10:0] rsp_mux_002_src_channel;                                                          // rsp_mux_002:src_channel -> msgdma_0_mm_write_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                    // rsp_mux_002:src_startofpacket -> msgdma_0_mm_write_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                      // rsp_mux_002:src_endofpacket -> msgdma_0_mm_write_agent:rp_endofpacket
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_instruction_master_agent:av_waitrequest -> nios2_gen2_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_instruction_master_agent:av_readdata -> nios2_gen2_instruction_master_translator:uav_readdata
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_instruction_master_translator:uav_debugaccess -> nios2_gen2_instruction_master_agent:av_debugaccess
	wire   [25:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_instruction_master_translator:uav_address -> nios2_gen2_instruction_master_agent:av_address
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_instruction_master_translator:uav_read -> nios2_gen2_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_instruction_master_translator:uav_byteenable -> nios2_gen2_instruction_master_agent:av_byteenable
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_instruction_master_agent:av_readdatavalid -> nios2_gen2_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_instruction_master_translator:uav_lock -> nios2_gen2_instruction_master_agent:av_lock
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_instruction_master_translator:uav_write -> nios2_gen2_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_instruction_master_translator:uav_writedata -> nios2_gen2_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_instruction_master_translator:uav_burstcount -> nios2_gen2_instruction_master_agent:av_burstcount
	wire   [31:0] msgdma_0_csr_agent_m0_readdata;                                                   // msgdma_0_csr_translator:uav_readdata -> msgdma_0_csr_agent:m0_readdata
	wire          msgdma_0_csr_agent_m0_waitrequest;                                                // msgdma_0_csr_translator:uav_waitrequest -> msgdma_0_csr_agent:m0_waitrequest
	wire          msgdma_0_csr_agent_m0_debugaccess;                                                // msgdma_0_csr_agent:m0_debugaccess -> msgdma_0_csr_translator:uav_debugaccess
	wire   [25:0] msgdma_0_csr_agent_m0_address;                                                    // msgdma_0_csr_agent:m0_address -> msgdma_0_csr_translator:uav_address
	wire    [3:0] msgdma_0_csr_agent_m0_byteenable;                                                 // msgdma_0_csr_agent:m0_byteenable -> msgdma_0_csr_translator:uav_byteenable
	wire          msgdma_0_csr_agent_m0_read;                                                       // msgdma_0_csr_agent:m0_read -> msgdma_0_csr_translator:uav_read
	wire          msgdma_0_csr_agent_m0_readdatavalid;                                              // msgdma_0_csr_translator:uav_readdatavalid -> msgdma_0_csr_agent:m0_readdatavalid
	wire          msgdma_0_csr_agent_m0_lock;                                                       // msgdma_0_csr_agent:m0_lock -> msgdma_0_csr_translator:uav_lock
	wire   [31:0] msgdma_0_csr_agent_m0_writedata;                                                  // msgdma_0_csr_agent:m0_writedata -> msgdma_0_csr_translator:uav_writedata
	wire          msgdma_0_csr_agent_m0_write;                                                      // msgdma_0_csr_agent:m0_write -> msgdma_0_csr_translator:uav_write
	wire    [2:0] msgdma_0_csr_agent_m0_burstcount;                                                 // msgdma_0_csr_agent:m0_burstcount -> msgdma_0_csr_translator:uav_burstcount
	wire          msgdma_0_csr_agent_rf_source_valid;                                               // msgdma_0_csr_agent:rf_source_valid -> msgdma_0_csr_agent_rsp_fifo:in_valid
	wire  [107:0] msgdma_0_csr_agent_rf_source_data;                                                // msgdma_0_csr_agent:rf_source_data -> msgdma_0_csr_agent_rsp_fifo:in_data
	wire          msgdma_0_csr_agent_rf_source_ready;                                               // msgdma_0_csr_agent_rsp_fifo:in_ready -> msgdma_0_csr_agent:rf_source_ready
	wire          msgdma_0_csr_agent_rf_source_startofpacket;                                       // msgdma_0_csr_agent:rf_source_startofpacket -> msgdma_0_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_0_csr_agent_rf_source_endofpacket;                                         // msgdma_0_csr_agent:rf_source_endofpacket -> msgdma_0_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_0_csr_agent_rsp_fifo_out_valid;                                            // msgdma_0_csr_agent_rsp_fifo:out_valid -> msgdma_0_csr_agent:rf_sink_valid
	wire  [107:0] msgdma_0_csr_agent_rsp_fifo_out_data;                                             // msgdma_0_csr_agent_rsp_fifo:out_data -> msgdma_0_csr_agent:rf_sink_data
	wire          msgdma_0_csr_agent_rsp_fifo_out_ready;                                            // msgdma_0_csr_agent:rf_sink_ready -> msgdma_0_csr_agent_rsp_fifo:out_ready
	wire          msgdma_0_csr_agent_rsp_fifo_out_startofpacket;                                    // msgdma_0_csr_agent_rsp_fifo:out_startofpacket -> msgdma_0_csr_agent:rf_sink_startofpacket
	wire          msgdma_0_csr_agent_rsp_fifo_out_endofpacket;                                      // msgdma_0_csr_agent_rsp_fifo:out_endofpacket -> msgdma_0_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> msgdma_0_csr_agent:cp_valid
	wire  [106:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> msgdma_0_csr_agent:cp_data
	wire          cmd_mux_src_ready;                                                                // msgdma_0_csr_agent:cp_ready -> cmd_mux:src_ready
	wire   [10:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> msgdma_0_csr_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> msgdma_0_csr_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> msgdma_0_csr_agent:cp_endofpacket
	wire   [31:0] vic_0_csr_access_agent_m0_readdata;                                               // vic_0_csr_access_translator:uav_readdata -> vic_0_csr_access_agent:m0_readdata
	wire          vic_0_csr_access_agent_m0_waitrequest;                                            // vic_0_csr_access_translator:uav_waitrequest -> vic_0_csr_access_agent:m0_waitrequest
	wire          vic_0_csr_access_agent_m0_debugaccess;                                            // vic_0_csr_access_agent:m0_debugaccess -> vic_0_csr_access_translator:uav_debugaccess
	wire   [25:0] vic_0_csr_access_agent_m0_address;                                                // vic_0_csr_access_agent:m0_address -> vic_0_csr_access_translator:uav_address
	wire    [3:0] vic_0_csr_access_agent_m0_byteenable;                                             // vic_0_csr_access_agent:m0_byteenable -> vic_0_csr_access_translator:uav_byteenable
	wire          vic_0_csr_access_agent_m0_read;                                                   // vic_0_csr_access_agent:m0_read -> vic_0_csr_access_translator:uav_read
	wire          vic_0_csr_access_agent_m0_readdatavalid;                                          // vic_0_csr_access_translator:uav_readdatavalid -> vic_0_csr_access_agent:m0_readdatavalid
	wire          vic_0_csr_access_agent_m0_lock;                                                   // vic_0_csr_access_agent:m0_lock -> vic_0_csr_access_translator:uav_lock
	wire   [31:0] vic_0_csr_access_agent_m0_writedata;                                              // vic_0_csr_access_agent:m0_writedata -> vic_0_csr_access_translator:uav_writedata
	wire          vic_0_csr_access_agent_m0_write;                                                  // vic_0_csr_access_agent:m0_write -> vic_0_csr_access_translator:uav_write
	wire    [2:0] vic_0_csr_access_agent_m0_burstcount;                                             // vic_0_csr_access_agent:m0_burstcount -> vic_0_csr_access_translator:uav_burstcount
	wire          vic_0_csr_access_agent_rf_source_valid;                                           // vic_0_csr_access_agent:rf_source_valid -> vic_0_csr_access_agent_rsp_fifo:in_valid
	wire  [107:0] vic_0_csr_access_agent_rf_source_data;                                            // vic_0_csr_access_agent:rf_source_data -> vic_0_csr_access_agent_rsp_fifo:in_data
	wire          vic_0_csr_access_agent_rf_source_ready;                                           // vic_0_csr_access_agent_rsp_fifo:in_ready -> vic_0_csr_access_agent:rf_source_ready
	wire          vic_0_csr_access_agent_rf_source_startofpacket;                                   // vic_0_csr_access_agent:rf_source_startofpacket -> vic_0_csr_access_agent_rsp_fifo:in_startofpacket
	wire          vic_0_csr_access_agent_rf_source_endofpacket;                                     // vic_0_csr_access_agent:rf_source_endofpacket -> vic_0_csr_access_agent_rsp_fifo:in_endofpacket
	wire          vic_0_csr_access_agent_rsp_fifo_out_valid;                                        // vic_0_csr_access_agent_rsp_fifo:out_valid -> vic_0_csr_access_agent:rf_sink_valid
	wire  [107:0] vic_0_csr_access_agent_rsp_fifo_out_data;                                         // vic_0_csr_access_agent_rsp_fifo:out_data -> vic_0_csr_access_agent:rf_sink_data
	wire          vic_0_csr_access_agent_rsp_fifo_out_ready;                                        // vic_0_csr_access_agent:rf_sink_ready -> vic_0_csr_access_agent_rsp_fifo:out_ready
	wire          vic_0_csr_access_agent_rsp_fifo_out_startofpacket;                                // vic_0_csr_access_agent_rsp_fifo:out_startofpacket -> vic_0_csr_access_agent:rf_sink_startofpacket
	wire          vic_0_csr_access_agent_rsp_fifo_out_endofpacket;                                  // vic_0_csr_access_agent_rsp_fifo:out_endofpacket -> vic_0_csr_access_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> vic_0_csr_access_agent:cp_valid
	wire  [106:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> vic_0_csr_access_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                            // vic_0_csr_access_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [10:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> vic_0_csr_access_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> vic_0_csr_access_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> vic_0_csr_access_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_debug_mem_slave_translator:uav_readdata -> nios2_gen2_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_debug_mem_slave_translator:uav_debugaccess
	wire   [25:0] nios2_gen2_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_debug_mem_slave_agent:m0_address -> nios2_gen2_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_debug_mem_slave_agent:m0_read -> nios2_gen2_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_debug_mem_slave_agent:m0_lock -> nios2_gen2_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_debug_mem_slave_agent:m0_writedata -> nios2_gen2_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_debug_mem_slave_agent:m0_write -> nios2_gen2_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [107:0] nios2_gen2_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_debug_mem_slave_agent:rf_source_data -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_debug_mem_slave_agent:rf_sink_valid
	wire  [107:0] nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> nios2_gen2_debug_mem_slave_agent:cp_valid
	wire  [106:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> nios2_gen2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                            // nios2_gen2_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [10:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> nios2_gen2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> nios2_gen2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> nios2_gen2_debug_mem_slave_agent:cp_endofpacket
	wire  [255:0] msgdma_0_descriptor_slave_agent_m0_readdata;                                      // msgdma_0_descriptor_slave_translator:uav_readdata -> msgdma_0_descriptor_slave_agent:m0_readdata
	wire          msgdma_0_descriptor_slave_agent_m0_waitrequest;                                   // msgdma_0_descriptor_slave_translator:uav_waitrequest -> msgdma_0_descriptor_slave_agent:m0_waitrequest
	wire          msgdma_0_descriptor_slave_agent_m0_debugaccess;                                   // msgdma_0_descriptor_slave_agent:m0_debugaccess -> msgdma_0_descriptor_slave_translator:uav_debugaccess
	wire   [25:0] msgdma_0_descriptor_slave_agent_m0_address;                                       // msgdma_0_descriptor_slave_agent:m0_address -> msgdma_0_descriptor_slave_translator:uav_address
	wire   [31:0] msgdma_0_descriptor_slave_agent_m0_byteenable;                                    // msgdma_0_descriptor_slave_agent:m0_byteenable -> msgdma_0_descriptor_slave_translator:uav_byteenable
	wire          msgdma_0_descriptor_slave_agent_m0_read;                                          // msgdma_0_descriptor_slave_agent:m0_read -> msgdma_0_descriptor_slave_translator:uav_read
	wire          msgdma_0_descriptor_slave_agent_m0_readdatavalid;                                 // msgdma_0_descriptor_slave_translator:uav_readdatavalid -> msgdma_0_descriptor_slave_agent:m0_readdatavalid
	wire          msgdma_0_descriptor_slave_agent_m0_lock;                                          // msgdma_0_descriptor_slave_agent:m0_lock -> msgdma_0_descriptor_slave_translator:uav_lock
	wire  [255:0] msgdma_0_descriptor_slave_agent_m0_writedata;                                     // msgdma_0_descriptor_slave_agent:m0_writedata -> msgdma_0_descriptor_slave_translator:uav_writedata
	wire          msgdma_0_descriptor_slave_agent_m0_write;                                         // msgdma_0_descriptor_slave_agent:m0_write -> msgdma_0_descriptor_slave_translator:uav_write
	wire    [5:0] msgdma_0_descriptor_slave_agent_m0_burstcount;                                    // msgdma_0_descriptor_slave_agent:m0_burstcount -> msgdma_0_descriptor_slave_translator:uav_burstcount
	wire          msgdma_0_descriptor_slave_agent_rf_source_valid;                                  // msgdma_0_descriptor_slave_agent:rf_source_valid -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [359:0] msgdma_0_descriptor_slave_agent_rf_source_data;                                   // msgdma_0_descriptor_slave_agent:rf_source_data -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_data
	wire          msgdma_0_descriptor_slave_agent_rf_source_ready;                                  // msgdma_0_descriptor_slave_agent_rsp_fifo:in_ready -> msgdma_0_descriptor_slave_agent:rf_source_ready
	wire          msgdma_0_descriptor_slave_agent_rf_source_startofpacket;                          // msgdma_0_descriptor_slave_agent:rf_source_startofpacket -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rf_source_endofpacket;                            // msgdma_0_descriptor_slave_agent:rf_source_endofpacket -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid;                               // msgdma_0_descriptor_slave_agent_rsp_fifo:out_valid -> msgdma_0_descriptor_slave_agent:rf_sink_valid
	wire  [359:0] msgdma_0_descriptor_slave_agent_rsp_fifo_out_data;                                // msgdma_0_descriptor_slave_agent_rsp_fifo:out_data -> msgdma_0_descriptor_slave_agent:rf_sink_data
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready;                               // msgdma_0_descriptor_slave_agent:rf_sink_ready -> msgdma_0_descriptor_slave_agent_rsp_fifo:out_ready
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket;                       // msgdma_0_descriptor_slave_agent_rsp_fifo:out_startofpacket -> msgdma_0_descriptor_slave_agent:rf_sink_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket;                         // msgdma_0_descriptor_slave_agent_rsp_fifo:out_endofpacket -> msgdma_0_descriptor_slave_agent:rf_sink_endofpacket
	wire   [31:0] parameter_sys_parameter_rx_ram_s1_agent_m0_readdata;                              // Parameter_SYS_parameter_rx_ram_s1_translator:uav_readdata -> Parameter_SYS_parameter_rx_ram_s1_agent:m0_readdata
	wire          parameter_sys_parameter_rx_ram_s1_agent_m0_waitrequest;                           // Parameter_SYS_parameter_rx_ram_s1_translator:uav_waitrequest -> Parameter_SYS_parameter_rx_ram_s1_agent:m0_waitrequest
	wire          parameter_sys_parameter_rx_ram_s1_agent_m0_debugaccess;                           // Parameter_SYS_parameter_rx_ram_s1_agent:m0_debugaccess -> Parameter_SYS_parameter_rx_ram_s1_translator:uav_debugaccess
	wire   [25:0] parameter_sys_parameter_rx_ram_s1_agent_m0_address;                               // Parameter_SYS_parameter_rx_ram_s1_agent:m0_address -> Parameter_SYS_parameter_rx_ram_s1_translator:uav_address
	wire    [3:0] parameter_sys_parameter_rx_ram_s1_agent_m0_byteenable;                            // Parameter_SYS_parameter_rx_ram_s1_agent:m0_byteenable -> Parameter_SYS_parameter_rx_ram_s1_translator:uav_byteenable
	wire          parameter_sys_parameter_rx_ram_s1_agent_m0_read;                                  // Parameter_SYS_parameter_rx_ram_s1_agent:m0_read -> Parameter_SYS_parameter_rx_ram_s1_translator:uav_read
	wire          parameter_sys_parameter_rx_ram_s1_agent_m0_readdatavalid;                         // Parameter_SYS_parameter_rx_ram_s1_translator:uav_readdatavalid -> Parameter_SYS_parameter_rx_ram_s1_agent:m0_readdatavalid
	wire          parameter_sys_parameter_rx_ram_s1_agent_m0_lock;                                  // Parameter_SYS_parameter_rx_ram_s1_agent:m0_lock -> Parameter_SYS_parameter_rx_ram_s1_translator:uav_lock
	wire   [31:0] parameter_sys_parameter_rx_ram_s1_agent_m0_writedata;                             // Parameter_SYS_parameter_rx_ram_s1_agent:m0_writedata -> Parameter_SYS_parameter_rx_ram_s1_translator:uav_writedata
	wire          parameter_sys_parameter_rx_ram_s1_agent_m0_write;                                 // Parameter_SYS_parameter_rx_ram_s1_agent:m0_write -> Parameter_SYS_parameter_rx_ram_s1_translator:uav_write
	wire    [2:0] parameter_sys_parameter_rx_ram_s1_agent_m0_burstcount;                            // Parameter_SYS_parameter_rx_ram_s1_agent:m0_burstcount -> Parameter_SYS_parameter_rx_ram_s1_translator:uav_burstcount
	wire          parameter_sys_parameter_rx_ram_s1_agent_rf_source_valid;                          // Parameter_SYS_parameter_rx_ram_s1_agent:rf_source_valid -> Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:in_valid
	wire  [107:0] parameter_sys_parameter_rx_ram_s1_agent_rf_source_data;                           // Parameter_SYS_parameter_rx_ram_s1_agent:rf_source_data -> Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:in_data
	wire          parameter_sys_parameter_rx_ram_s1_agent_rf_source_ready;                          // Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:in_ready -> Parameter_SYS_parameter_rx_ram_s1_agent:rf_source_ready
	wire          parameter_sys_parameter_rx_ram_s1_agent_rf_source_startofpacket;                  // Parameter_SYS_parameter_rx_ram_s1_agent:rf_source_startofpacket -> Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          parameter_sys_parameter_rx_ram_s1_agent_rf_source_endofpacket;                    // Parameter_SYS_parameter_rx_ram_s1_agent:rf_source_endofpacket -> Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_valid;                       // Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:out_valid -> Parameter_SYS_parameter_rx_ram_s1_agent:rf_sink_valid
	wire  [107:0] parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_data;                        // Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:out_data -> Parameter_SYS_parameter_rx_ram_s1_agent:rf_sink_data
	wire          parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_ready;                       // Parameter_SYS_parameter_rx_ram_s1_agent:rf_sink_ready -> Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:out_ready
	wire          parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_startofpacket;               // Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:out_startofpacket -> Parameter_SYS_parameter_rx_ram_s1_agent:rf_sink_startofpacket
	wire          parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_endofpacket;                 // Parameter_SYS_parameter_rx_ram_s1_agent_rsp_fifo:out_endofpacket -> Parameter_SYS_parameter_rx_ram_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> Parameter_SYS_parameter_rx_ram_s1_agent:cp_valid
	wire  [106:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> Parameter_SYS_parameter_rx_ram_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                            // Parameter_SYS_parameter_rx_ram_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [10:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> Parameter_SYS_parameter_rx_ram_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> Parameter_SYS_parameter_rx_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> Parameter_SYS_parameter_rx_ram_s1_agent:cp_endofpacket
	wire   [31:0] parameter_sys_parameter_tx_ram_s1_agent_m0_readdata;                              // Parameter_SYS_parameter_tx_ram_s1_translator:uav_readdata -> Parameter_SYS_parameter_tx_ram_s1_agent:m0_readdata
	wire          parameter_sys_parameter_tx_ram_s1_agent_m0_waitrequest;                           // Parameter_SYS_parameter_tx_ram_s1_translator:uav_waitrequest -> Parameter_SYS_parameter_tx_ram_s1_agent:m0_waitrequest
	wire          parameter_sys_parameter_tx_ram_s1_agent_m0_debugaccess;                           // Parameter_SYS_parameter_tx_ram_s1_agent:m0_debugaccess -> Parameter_SYS_parameter_tx_ram_s1_translator:uav_debugaccess
	wire   [25:0] parameter_sys_parameter_tx_ram_s1_agent_m0_address;                               // Parameter_SYS_parameter_tx_ram_s1_agent:m0_address -> Parameter_SYS_parameter_tx_ram_s1_translator:uav_address
	wire    [3:0] parameter_sys_parameter_tx_ram_s1_agent_m0_byteenable;                            // Parameter_SYS_parameter_tx_ram_s1_agent:m0_byteenable -> Parameter_SYS_parameter_tx_ram_s1_translator:uav_byteenable
	wire          parameter_sys_parameter_tx_ram_s1_agent_m0_read;                                  // Parameter_SYS_parameter_tx_ram_s1_agent:m0_read -> Parameter_SYS_parameter_tx_ram_s1_translator:uav_read
	wire          parameter_sys_parameter_tx_ram_s1_agent_m0_readdatavalid;                         // Parameter_SYS_parameter_tx_ram_s1_translator:uav_readdatavalid -> Parameter_SYS_parameter_tx_ram_s1_agent:m0_readdatavalid
	wire          parameter_sys_parameter_tx_ram_s1_agent_m0_lock;                                  // Parameter_SYS_parameter_tx_ram_s1_agent:m0_lock -> Parameter_SYS_parameter_tx_ram_s1_translator:uav_lock
	wire   [31:0] parameter_sys_parameter_tx_ram_s1_agent_m0_writedata;                             // Parameter_SYS_parameter_tx_ram_s1_agent:m0_writedata -> Parameter_SYS_parameter_tx_ram_s1_translator:uav_writedata
	wire          parameter_sys_parameter_tx_ram_s1_agent_m0_write;                                 // Parameter_SYS_parameter_tx_ram_s1_agent:m0_write -> Parameter_SYS_parameter_tx_ram_s1_translator:uav_write
	wire    [2:0] parameter_sys_parameter_tx_ram_s1_agent_m0_burstcount;                            // Parameter_SYS_parameter_tx_ram_s1_agent:m0_burstcount -> Parameter_SYS_parameter_tx_ram_s1_translator:uav_burstcount
	wire          parameter_sys_parameter_tx_ram_s1_agent_rf_source_valid;                          // Parameter_SYS_parameter_tx_ram_s1_agent:rf_source_valid -> Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:in_valid
	wire  [107:0] parameter_sys_parameter_tx_ram_s1_agent_rf_source_data;                           // Parameter_SYS_parameter_tx_ram_s1_agent:rf_source_data -> Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:in_data
	wire          parameter_sys_parameter_tx_ram_s1_agent_rf_source_ready;                          // Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:in_ready -> Parameter_SYS_parameter_tx_ram_s1_agent:rf_source_ready
	wire          parameter_sys_parameter_tx_ram_s1_agent_rf_source_startofpacket;                  // Parameter_SYS_parameter_tx_ram_s1_agent:rf_source_startofpacket -> Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          parameter_sys_parameter_tx_ram_s1_agent_rf_source_endofpacket;                    // Parameter_SYS_parameter_tx_ram_s1_agent:rf_source_endofpacket -> Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_valid;                       // Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:out_valid -> Parameter_SYS_parameter_tx_ram_s1_agent:rf_sink_valid
	wire  [107:0] parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_data;                        // Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:out_data -> Parameter_SYS_parameter_tx_ram_s1_agent:rf_sink_data
	wire          parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_ready;                       // Parameter_SYS_parameter_tx_ram_s1_agent:rf_sink_ready -> Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:out_ready
	wire          parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_startofpacket;               // Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:out_startofpacket -> Parameter_SYS_parameter_tx_ram_s1_agent:rf_sink_startofpacket
	wire          parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_endofpacket;                 // Parameter_SYS_parameter_tx_ram_s1_agent_rsp_fifo:out_endofpacket -> Parameter_SYS_parameter_tx_ram_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                            // cmd_mux_005:src_valid -> Parameter_SYS_parameter_tx_ram_s1_agent:cp_valid
	wire  [106:0] cmd_mux_005_src_data;                                                             // cmd_mux_005:src_data -> Parameter_SYS_parameter_tx_ram_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                            // Parameter_SYS_parameter_tx_ram_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [10:0] cmd_mux_005_src_channel;                                                          // cmd_mux_005:src_channel -> Parameter_SYS_parameter_tx_ram_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                    // cmd_mux_005:src_startofpacket -> Parameter_SYS_parameter_tx_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                      // cmd_mux_005:src_endofpacket -> Parameter_SYS_parameter_tx_ram_s1_agent:cp_endofpacket
	wire   [31:0] altpll_sys_pll_slave_agent_m0_readdata;                                           // altpll_sys_pll_slave_translator:uav_readdata -> altpll_sys_pll_slave_agent:m0_readdata
	wire          altpll_sys_pll_slave_agent_m0_waitrequest;                                        // altpll_sys_pll_slave_translator:uav_waitrequest -> altpll_sys_pll_slave_agent:m0_waitrequest
	wire          altpll_sys_pll_slave_agent_m0_debugaccess;                                        // altpll_sys_pll_slave_agent:m0_debugaccess -> altpll_sys_pll_slave_translator:uav_debugaccess
	wire   [25:0] altpll_sys_pll_slave_agent_m0_address;                                            // altpll_sys_pll_slave_agent:m0_address -> altpll_sys_pll_slave_translator:uav_address
	wire    [3:0] altpll_sys_pll_slave_agent_m0_byteenable;                                         // altpll_sys_pll_slave_agent:m0_byteenable -> altpll_sys_pll_slave_translator:uav_byteenable
	wire          altpll_sys_pll_slave_agent_m0_read;                                               // altpll_sys_pll_slave_agent:m0_read -> altpll_sys_pll_slave_translator:uav_read
	wire          altpll_sys_pll_slave_agent_m0_readdatavalid;                                      // altpll_sys_pll_slave_translator:uav_readdatavalid -> altpll_sys_pll_slave_agent:m0_readdatavalid
	wire          altpll_sys_pll_slave_agent_m0_lock;                                               // altpll_sys_pll_slave_agent:m0_lock -> altpll_sys_pll_slave_translator:uav_lock
	wire   [31:0] altpll_sys_pll_slave_agent_m0_writedata;                                          // altpll_sys_pll_slave_agent:m0_writedata -> altpll_sys_pll_slave_translator:uav_writedata
	wire          altpll_sys_pll_slave_agent_m0_write;                                              // altpll_sys_pll_slave_agent:m0_write -> altpll_sys_pll_slave_translator:uav_write
	wire    [2:0] altpll_sys_pll_slave_agent_m0_burstcount;                                         // altpll_sys_pll_slave_agent:m0_burstcount -> altpll_sys_pll_slave_translator:uav_burstcount
	wire          altpll_sys_pll_slave_agent_rf_source_valid;                                       // altpll_sys_pll_slave_agent:rf_source_valid -> altpll_sys_pll_slave_agent_rsp_fifo:in_valid
	wire  [107:0] altpll_sys_pll_slave_agent_rf_source_data;                                        // altpll_sys_pll_slave_agent:rf_source_data -> altpll_sys_pll_slave_agent_rsp_fifo:in_data
	wire          altpll_sys_pll_slave_agent_rf_source_ready;                                       // altpll_sys_pll_slave_agent_rsp_fifo:in_ready -> altpll_sys_pll_slave_agent:rf_source_ready
	wire          altpll_sys_pll_slave_agent_rf_source_startofpacket;                               // altpll_sys_pll_slave_agent:rf_source_startofpacket -> altpll_sys_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          altpll_sys_pll_slave_agent_rf_source_endofpacket;                                 // altpll_sys_pll_slave_agent:rf_source_endofpacket -> altpll_sys_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          altpll_sys_pll_slave_agent_rsp_fifo_out_valid;                                    // altpll_sys_pll_slave_agent_rsp_fifo:out_valid -> altpll_sys_pll_slave_agent:rf_sink_valid
	wire  [107:0] altpll_sys_pll_slave_agent_rsp_fifo_out_data;                                     // altpll_sys_pll_slave_agent_rsp_fifo:out_data -> altpll_sys_pll_slave_agent:rf_sink_data
	wire          altpll_sys_pll_slave_agent_rsp_fifo_out_ready;                                    // altpll_sys_pll_slave_agent:rf_sink_ready -> altpll_sys_pll_slave_agent_rsp_fifo:out_ready
	wire          altpll_sys_pll_slave_agent_rsp_fifo_out_startofpacket;                            // altpll_sys_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_sys_pll_slave_agent:rf_sink_startofpacket
	wire          altpll_sys_pll_slave_agent_rsp_fifo_out_endofpacket;                              // altpll_sys_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_sys_pll_slave_agent:rf_sink_endofpacket
	wire          altpll_sys_pll_slave_agent_rdata_fifo_src_valid;                                  // altpll_sys_pll_slave_agent:rdata_fifo_src_valid -> altpll_sys_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] altpll_sys_pll_slave_agent_rdata_fifo_src_data;                                   // altpll_sys_pll_slave_agent:rdata_fifo_src_data -> altpll_sys_pll_slave_agent_rdata_fifo:in_data
	wire          altpll_sys_pll_slave_agent_rdata_fifo_src_ready;                                  // altpll_sys_pll_slave_agent_rdata_fifo:in_ready -> altpll_sys_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                            // cmd_mux_006:src_valid -> altpll_sys_pll_slave_agent:cp_valid
	wire  [106:0] cmd_mux_006_src_data;                                                             // cmd_mux_006:src_data -> altpll_sys_pll_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                            // altpll_sys_pll_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [10:0] cmd_mux_006_src_channel;                                                          // cmd_mux_006:src_channel -> altpll_sys_pll_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                    // cmd_mux_006:src_startofpacket -> altpll_sys_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                      // cmd_mux_006:src_endofpacket -> altpll_sys_pll_slave_agent:cp_endofpacket
	wire   [31:0] mm_clock_crossing_bridge_1_s0_agent_m0_readdata;                                  // mm_clock_crossing_bridge_1_s0_translator:uav_readdata -> mm_clock_crossing_bridge_1_s0_agent:m0_readdata
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_waitrequest;                               // mm_clock_crossing_bridge_1_s0_translator:uav_waitrequest -> mm_clock_crossing_bridge_1_s0_agent:m0_waitrequest
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_debugaccess;                               // mm_clock_crossing_bridge_1_s0_agent:m0_debugaccess -> mm_clock_crossing_bridge_1_s0_translator:uav_debugaccess
	wire   [25:0] mm_clock_crossing_bridge_1_s0_agent_m0_address;                                   // mm_clock_crossing_bridge_1_s0_agent:m0_address -> mm_clock_crossing_bridge_1_s0_translator:uav_address
	wire    [3:0] mm_clock_crossing_bridge_1_s0_agent_m0_byteenable;                                // mm_clock_crossing_bridge_1_s0_agent:m0_byteenable -> mm_clock_crossing_bridge_1_s0_translator:uav_byteenable
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_read;                                      // mm_clock_crossing_bridge_1_s0_agent:m0_read -> mm_clock_crossing_bridge_1_s0_translator:uav_read
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_readdatavalid;                             // mm_clock_crossing_bridge_1_s0_translator:uav_readdatavalid -> mm_clock_crossing_bridge_1_s0_agent:m0_readdatavalid
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_lock;                                      // mm_clock_crossing_bridge_1_s0_agent:m0_lock -> mm_clock_crossing_bridge_1_s0_translator:uav_lock
	wire   [31:0] mm_clock_crossing_bridge_1_s0_agent_m0_writedata;                                 // mm_clock_crossing_bridge_1_s0_agent:m0_writedata -> mm_clock_crossing_bridge_1_s0_translator:uav_writedata
	wire          mm_clock_crossing_bridge_1_s0_agent_m0_write;                                     // mm_clock_crossing_bridge_1_s0_agent:m0_write -> mm_clock_crossing_bridge_1_s0_translator:uav_write
	wire    [2:0] mm_clock_crossing_bridge_1_s0_agent_m0_burstcount;                                // mm_clock_crossing_bridge_1_s0_agent:m0_burstcount -> mm_clock_crossing_bridge_1_s0_translator:uav_burstcount
	wire          mm_clock_crossing_bridge_1_s0_agent_rf_source_valid;                              // mm_clock_crossing_bridge_1_s0_agent:rf_source_valid -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_valid
	wire  [107:0] mm_clock_crossing_bridge_1_s0_agent_rf_source_data;                               // mm_clock_crossing_bridge_1_s0_agent:rf_source_data -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_data
	wire          mm_clock_crossing_bridge_1_s0_agent_rf_source_ready;                              // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_ready -> mm_clock_crossing_bridge_1_s0_agent:rf_source_ready
	wire          mm_clock_crossing_bridge_1_s0_agent_rf_source_startofpacket;                      // mm_clock_crossing_bridge_1_s0_agent:rf_source_startofpacket -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_startofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rf_source_endofpacket;                        // mm_clock_crossing_bridge_1_s0_agent:rf_source_endofpacket -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_valid;                           // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_valid -> mm_clock_crossing_bridge_1_s0_agent:rf_sink_valid
	wire  [107:0] mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_data;                            // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_data -> mm_clock_crossing_bridge_1_s0_agent:rf_sink_data
	wire          mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_ready;                           // mm_clock_crossing_bridge_1_s0_agent:rf_sink_ready -> mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_ready
	wire          mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_startofpacket;                   // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_startofpacket -> mm_clock_crossing_bridge_1_s0_agent:rf_sink_startofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_endofpacket;                     // mm_clock_crossing_bridge_1_s0_agent_rsp_fifo:out_endofpacket -> mm_clock_crossing_bridge_1_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                            // cmd_mux_007:src_valid -> mm_clock_crossing_bridge_1_s0_agent:cp_valid
	wire  [106:0] cmd_mux_007_src_data;                                                             // cmd_mux_007:src_data -> mm_clock_crossing_bridge_1_s0_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                            // mm_clock_crossing_bridge_1_s0_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [10:0] cmd_mux_007_src_channel;                                                          // cmd_mux_007:src_channel -> mm_clock_crossing_bridge_1_s0_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                    // cmd_mux_007:src_startofpacket -> mm_clock_crossing_bridge_1_s0_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                      // cmd_mux_007:src_endofpacket -> mm_clock_crossing_bridge_1_s0_agent:cp_endofpacket
	wire   [31:0] program_memory_s1_agent_m0_readdata;                                              // Program_Memory_s1_translator:uav_readdata -> Program_Memory_s1_agent:m0_readdata
	wire          program_memory_s1_agent_m0_waitrequest;                                           // Program_Memory_s1_translator:uav_waitrequest -> Program_Memory_s1_agent:m0_waitrequest
	wire          program_memory_s1_agent_m0_debugaccess;                                           // Program_Memory_s1_agent:m0_debugaccess -> Program_Memory_s1_translator:uav_debugaccess
	wire   [25:0] program_memory_s1_agent_m0_address;                                               // Program_Memory_s1_agent:m0_address -> Program_Memory_s1_translator:uav_address
	wire    [3:0] program_memory_s1_agent_m0_byteenable;                                            // Program_Memory_s1_agent:m0_byteenable -> Program_Memory_s1_translator:uav_byteenable
	wire          program_memory_s1_agent_m0_read;                                                  // Program_Memory_s1_agent:m0_read -> Program_Memory_s1_translator:uav_read
	wire          program_memory_s1_agent_m0_readdatavalid;                                         // Program_Memory_s1_translator:uav_readdatavalid -> Program_Memory_s1_agent:m0_readdatavalid
	wire          program_memory_s1_agent_m0_lock;                                                  // Program_Memory_s1_agent:m0_lock -> Program_Memory_s1_translator:uav_lock
	wire   [31:0] program_memory_s1_agent_m0_writedata;                                             // Program_Memory_s1_agent:m0_writedata -> Program_Memory_s1_translator:uav_writedata
	wire          program_memory_s1_agent_m0_write;                                                 // Program_Memory_s1_agent:m0_write -> Program_Memory_s1_translator:uav_write
	wire    [2:0] program_memory_s1_agent_m0_burstcount;                                            // Program_Memory_s1_agent:m0_burstcount -> Program_Memory_s1_translator:uav_burstcount
	wire          program_memory_s1_agent_rf_source_valid;                                          // Program_Memory_s1_agent:rf_source_valid -> Program_Memory_s1_agent_rsp_fifo:in_valid
	wire  [107:0] program_memory_s1_agent_rf_source_data;                                           // Program_Memory_s1_agent:rf_source_data -> Program_Memory_s1_agent_rsp_fifo:in_data
	wire          program_memory_s1_agent_rf_source_ready;                                          // Program_Memory_s1_agent_rsp_fifo:in_ready -> Program_Memory_s1_agent:rf_source_ready
	wire          program_memory_s1_agent_rf_source_startofpacket;                                  // Program_Memory_s1_agent:rf_source_startofpacket -> Program_Memory_s1_agent_rsp_fifo:in_startofpacket
	wire          program_memory_s1_agent_rf_source_endofpacket;                                    // Program_Memory_s1_agent:rf_source_endofpacket -> Program_Memory_s1_agent_rsp_fifo:in_endofpacket
	wire          program_memory_s1_agent_rsp_fifo_out_valid;                                       // Program_Memory_s1_agent_rsp_fifo:out_valid -> Program_Memory_s1_agent:rf_sink_valid
	wire  [107:0] program_memory_s1_agent_rsp_fifo_out_data;                                        // Program_Memory_s1_agent_rsp_fifo:out_data -> Program_Memory_s1_agent:rf_sink_data
	wire          program_memory_s1_agent_rsp_fifo_out_ready;                                       // Program_Memory_s1_agent:rf_sink_ready -> Program_Memory_s1_agent_rsp_fifo:out_ready
	wire          program_memory_s1_agent_rsp_fifo_out_startofpacket;                               // Program_Memory_s1_agent_rsp_fifo:out_startofpacket -> Program_Memory_s1_agent:rf_sink_startofpacket
	wire          program_memory_s1_agent_rsp_fifo_out_endofpacket;                                 // Program_Memory_s1_agent_rsp_fifo:out_endofpacket -> Program_Memory_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                            // cmd_mux_008:src_valid -> Program_Memory_s1_agent:cp_valid
	wire  [106:0] cmd_mux_008_src_data;                                                             // cmd_mux_008:src_data -> Program_Memory_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                            // Program_Memory_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [10:0] cmd_mux_008_src_channel;                                                          // cmd_mux_008:src_channel -> Program_Memory_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                    // cmd_mux_008:src_startofpacket -> Program_Memory_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                      // cmd_mux_008:src_endofpacket -> Program_Memory_s1_agent:cp_endofpacket
	wire   [31:0] data_memory_s1_agent_m0_readdata;                                                 // Data_Memory_s1_translator:uav_readdata -> Data_Memory_s1_agent:m0_readdata
	wire          data_memory_s1_agent_m0_waitrequest;                                              // Data_Memory_s1_translator:uav_waitrequest -> Data_Memory_s1_agent:m0_waitrequest
	wire          data_memory_s1_agent_m0_debugaccess;                                              // Data_Memory_s1_agent:m0_debugaccess -> Data_Memory_s1_translator:uav_debugaccess
	wire   [25:0] data_memory_s1_agent_m0_address;                                                  // Data_Memory_s1_agent:m0_address -> Data_Memory_s1_translator:uav_address
	wire    [3:0] data_memory_s1_agent_m0_byteenable;                                               // Data_Memory_s1_agent:m0_byteenable -> Data_Memory_s1_translator:uav_byteenable
	wire          data_memory_s1_agent_m0_read;                                                     // Data_Memory_s1_agent:m0_read -> Data_Memory_s1_translator:uav_read
	wire          data_memory_s1_agent_m0_readdatavalid;                                            // Data_Memory_s1_translator:uav_readdatavalid -> Data_Memory_s1_agent:m0_readdatavalid
	wire          data_memory_s1_agent_m0_lock;                                                     // Data_Memory_s1_agent:m0_lock -> Data_Memory_s1_translator:uav_lock
	wire   [31:0] data_memory_s1_agent_m0_writedata;                                                // Data_Memory_s1_agent:m0_writedata -> Data_Memory_s1_translator:uav_writedata
	wire          data_memory_s1_agent_m0_write;                                                    // Data_Memory_s1_agent:m0_write -> Data_Memory_s1_translator:uav_write
	wire    [2:0] data_memory_s1_agent_m0_burstcount;                                               // Data_Memory_s1_agent:m0_burstcount -> Data_Memory_s1_translator:uav_burstcount
	wire          data_memory_s1_agent_rf_source_valid;                                             // Data_Memory_s1_agent:rf_source_valid -> Data_Memory_s1_agent_rsp_fifo:in_valid
	wire  [107:0] data_memory_s1_agent_rf_source_data;                                              // Data_Memory_s1_agent:rf_source_data -> Data_Memory_s1_agent_rsp_fifo:in_data
	wire          data_memory_s1_agent_rf_source_ready;                                             // Data_Memory_s1_agent_rsp_fifo:in_ready -> Data_Memory_s1_agent:rf_source_ready
	wire          data_memory_s1_agent_rf_source_startofpacket;                                     // Data_Memory_s1_agent:rf_source_startofpacket -> Data_Memory_s1_agent_rsp_fifo:in_startofpacket
	wire          data_memory_s1_agent_rf_source_endofpacket;                                       // Data_Memory_s1_agent:rf_source_endofpacket -> Data_Memory_s1_agent_rsp_fifo:in_endofpacket
	wire          data_memory_s1_agent_rsp_fifo_out_valid;                                          // Data_Memory_s1_agent_rsp_fifo:out_valid -> Data_Memory_s1_agent:rf_sink_valid
	wire  [107:0] data_memory_s1_agent_rsp_fifo_out_data;                                           // Data_Memory_s1_agent_rsp_fifo:out_data -> Data_Memory_s1_agent:rf_sink_data
	wire          data_memory_s1_agent_rsp_fifo_out_ready;                                          // Data_Memory_s1_agent:rf_sink_ready -> Data_Memory_s1_agent_rsp_fifo:out_ready
	wire          data_memory_s1_agent_rsp_fifo_out_startofpacket;                                  // Data_Memory_s1_agent_rsp_fifo:out_startofpacket -> Data_Memory_s1_agent:rf_sink_startofpacket
	wire          data_memory_s1_agent_rsp_fifo_out_endofpacket;                                    // Data_Memory_s1_agent_rsp_fifo:out_endofpacket -> Data_Memory_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                            // cmd_mux_009:src_valid -> Data_Memory_s1_agent:cp_valid
	wire  [106:0] cmd_mux_009_src_data;                                                             // cmd_mux_009:src_data -> Data_Memory_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                            // Data_Memory_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [10:0] cmd_mux_009_src_channel;                                                          // cmd_mux_009:src_channel -> Data_Memory_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                    // cmd_mux_009:src_startofpacket -> Data_Memory_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                      // cmd_mux_009:src_endofpacket -> Data_Memory_s1_agent:cp_endofpacket
	wire   [31:0] usb_data_sys_usb_rx_ram_s1_agent_m0_readdata;                                     // USB_Data_SYS_usb_rx_ram_s1_translator:uav_readdata -> USB_Data_SYS_usb_rx_ram_s1_agent:m0_readdata
	wire          usb_data_sys_usb_rx_ram_s1_agent_m0_waitrequest;                                  // USB_Data_SYS_usb_rx_ram_s1_translator:uav_waitrequest -> USB_Data_SYS_usb_rx_ram_s1_agent:m0_waitrequest
	wire          usb_data_sys_usb_rx_ram_s1_agent_m0_debugaccess;                                  // USB_Data_SYS_usb_rx_ram_s1_agent:m0_debugaccess -> USB_Data_SYS_usb_rx_ram_s1_translator:uav_debugaccess
	wire   [25:0] usb_data_sys_usb_rx_ram_s1_agent_m0_address;                                      // USB_Data_SYS_usb_rx_ram_s1_agent:m0_address -> USB_Data_SYS_usb_rx_ram_s1_translator:uav_address
	wire    [3:0] usb_data_sys_usb_rx_ram_s1_agent_m0_byteenable;                                   // USB_Data_SYS_usb_rx_ram_s1_agent:m0_byteenable -> USB_Data_SYS_usb_rx_ram_s1_translator:uav_byteenable
	wire          usb_data_sys_usb_rx_ram_s1_agent_m0_read;                                         // USB_Data_SYS_usb_rx_ram_s1_agent:m0_read -> USB_Data_SYS_usb_rx_ram_s1_translator:uav_read
	wire          usb_data_sys_usb_rx_ram_s1_agent_m0_readdatavalid;                                // USB_Data_SYS_usb_rx_ram_s1_translator:uav_readdatavalid -> USB_Data_SYS_usb_rx_ram_s1_agent:m0_readdatavalid
	wire          usb_data_sys_usb_rx_ram_s1_agent_m0_lock;                                         // USB_Data_SYS_usb_rx_ram_s1_agent:m0_lock -> USB_Data_SYS_usb_rx_ram_s1_translator:uav_lock
	wire   [31:0] usb_data_sys_usb_rx_ram_s1_agent_m0_writedata;                                    // USB_Data_SYS_usb_rx_ram_s1_agent:m0_writedata -> USB_Data_SYS_usb_rx_ram_s1_translator:uav_writedata
	wire          usb_data_sys_usb_rx_ram_s1_agent_m0_write;                                        // USB_Data_SYS_usb_rx_ram_s1_agent:m0_write -> USB_Data_SYS_usb_rx_ram_s1_translator:uav_write
	wire    [2:0] usb_data_sys_usb_rx_ram_s1_agent_m0_burstcount;                                   // USB_Data_SYS_usb_rx_ram_s1_agent:m0_burstcount -> USB_Data_SYS_usb_rx_ram_s1_translator:uav_burstcount
	wire          usb_data_sys_usb_rx_ram_s1_agent_rf_source_valid;                                 // USB_Data_SYS_usb_rx_ram_s1_agent:rf_source_valid -> USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:in_valid
	wire  [107:0] usb_data_sys_usb_rx_ram_s1_agent_rf_source_data;                                  // USB_Data_SYS_usb_rx_ram_s1_agent:rf_source_data -> USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:in_data
	wire          usb_data_sys_usb_rx_ram_s1_agent_rf_source_ready;                                 // USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:in_ready -> USB_Data_SYS_usb_rx_ram_s1_agent:rf_source_ready
	wire          usb_data_sys_usb_rx_ram_s1_agent_rf_source_startofpacket;                         // USB_Data_SYS_usb_rx_ram_s1_agent:rf_source_startofpacket -> USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          usb_data_sys_usb_rx_ram_s1_agent_rf_source_endofpacket;                           // USB_Data_SYS_usb_rx_ram_s1_agent:rf_source_endofpacket -> USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_valid;                              // USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:out_valid -> USB_Data_SYS_usb_rx_ram_s1_agent:rf_sink_valid
	wire  [107:0] usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_data;                               // USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:out_data -> USB_Data_SYS_usb_rx_ram_s1_agent:rf_sink_data
	wire          usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_ready;                              // USB_Data_SYS_usb_rx_ram_s1_agent:rf_sink_ready -> USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:out_ready
	wire          usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_startofpacket;                      // USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:out_startofpacket -> USB_Data_SYS_usb_rx_ram_s1_agent:rf_sink_startofpacket
	wire          usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_endofpacket;                        // USB_Data_SYS_usb_rx_ram_s1_agent_rsp_fifo:out_endofpacket -> USB_Data_SYS_usb_rx_ram_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                            // cmd_mux_010:src_valid -> USB_Data_SYS_usb_rx_ram_s1_agent:cp_valid
	wire  [106:0] cmd_mux_010_src_data;                                                             // cmd_mux_010:src_data -> USB_Data_SYS_usb_rx_ram_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                            // USB_Data_SYS_usb_rx_ram_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [10:0] cmd_mux_010_src_channel;                                                          // cmd_mux_010:src_channel -> USB_Data_SYS_usb_rx_ram_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                    // cmd_mux_010:src_startofpacket -> USB_Data_SYS_usb_rx_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                      // cmd_mux_010:src_endofpacket -> USB_Data_SYS_usb_rx_ram_s1_agent:cp_endofpacket
	wire          nios2_gen2_data_master_agent_cp_valid;                                            // nios2_gen2_data_master_agent:cp_valid -> router:sink_valid
	wire  [106:0] nios2_gen2_data_master_agent_cp_data;                                             // nios2_gen2_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_data_master_agent:cp_ready
	wire          nios2_gen2_data_master_agent_cp_startofpacket;                                    // nios2_gen2_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_data_master_agent_cp_endofpacket;                                      // nios2_gen2_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                 // router:src_valid -> cmd_demux:sink_valid
	wire  [106:0] router_src_data;                                                                  // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                 // cmd_demux:sink_ready -> router:src_ready
	wire   [10:0] router_src_channel;                                                               // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                         // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                           // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          msgdma_0_mm_read_agent_cp_valid;                                                  // msgdma_0_mm_read_agent:cp_valid -> router_001:sink_valid
	wire  [106:0] msgdma_0_mm_read_agent_cp_data;                                                   // msgdma_0_mm_read_agent:cp_data -> router_001:sink_data
	wire          msgdma_0_mm_read_agent_cp_ready;                                                  // router_001:sink_ready -> msgdma_0_mm_read_agent:cp_ready
	wire          msgdma_0_mm_read_agent_cp_startofpacket;                                          // msgdma_0_mm_read_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          msgdma_0_mm_read_agent_cp_endofpacket;                                            // msgdma_0_mm_read_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          msgdma_0_mm_write_agent_cp_valid;                                                 // msgdma_0_mm_write_agent:cp_valid -> router_002:sink_valid
	wire  [106:0] msgdma_0_mm_write_agent_cp_data;                                                  // msgdma_0_mm_write_agent:cp_data -> router_002:sink_data
	wire          msgdma_0_mm_write_agent_cp_ready;                                                 // router_002:sink_ready -> msgdma_0_mm_write_agent:cp_ready
	wire          msgdma_0_mm_write_agent_cp_startofpacket;                                         // msgdma_0_mm_write_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          msgdma_0_mm_write_agent_cp_endofpacket;                                           // msgdma_0_mm_write_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                             // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [106:0] router_002_src_data;                                                              // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                             // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [10:0] router_002_src_channel;                                                           // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          nios2_gen2_instruction_master_agent_cp_valid;                                     // nios2_gen2_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [106:0] nios2_gen2_instruction_master_agent_cp_data;                                      // nios2_gen2_instruction_master_agent:cp_data -> router_003:sink_data
	wire          nios2_gen2_instruction_master_agent_cp_ready;                                     // router_003:sink_ready -> nios2_gen2_instruction_master_agent:cp_ready
	wire          nios2_gen2_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          nios2_gen2_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          msgdma_0_csr_agent_rp_valid;                                                      // msgdma_0_csr_agent:rp_valid -> router_004:sink_valid
	wire  [106:0] msgdma_0_csr_agent_rp_data;                                                       // msgdma_0_csr_agent:rp_data -> router_004:sink_data
	wire          msgdma_0_csr_agent_rp_ready;                                                      // router_004:sink_ready -> msgdma_0_csr_agent:rp_ready
	wire          msgdma_0_csr_agent_rp_startofpacket;                                              // msgdma_0_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          msgdma_0_csr_agent_rp_endofpacket;                                                // msgdma_0_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                             // router_004:src_valid -> rsp_demux:sink_valid
	wire  [106:0] router_004_src_data;                                                              // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                             // rsp_demux:sink_ready -> router_004:src_ready
	wire   [10:0] router_004_src_channel;                                                           // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          vic_0_csr_access_agent_rp_valid;                                                  // vic_0_csr_access_agent:rp_valid -> router_005:sink_valid
	wire  [106:0] vic_0_csr_access_agent_rp_data;                                                   // vic_0_csr_access_agent:rp_data -> router_005:sink_data
	wire          vic_0_csr_access_agent_rp_ready;                                                  // router_005:sink_ready -> vic_0_csr_access_agent:rp_ready
	wire          vic_0_csr_access_agent_rp_startofpacket;                                          // vic_0_csr_access_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          vic_0_csr_access_agent_rp_endofpacket;                                            // vic_0_csr_access_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [106:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                             // rsp_demux_001:sink_ready -> router_005:src_ready
	wire   [10:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_debug_mem_slave_agent:rp_valid -> router_006:sink_valid
	wire  [106:0] nios2_gen2_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_debug_mem_slave_agent:rp_data -> router_006:sink_data
	wire          nios2_gen2_debug_mem_slave_agent_rp_ready;                                        // router_006:sink_ready -> nios2_gen2_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_debug_mem_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_debug_mem_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                             // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [106:0] router_006_src_data;                                                              // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                             // rsp_demux_002:sink_ready -> router_006:src_ready
	wire   [10:0] router_006_src_channel;                                                           // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rp_valid;                                         // msgdma_0_descriptor_slave_agent:rp_valid -> router_007:sink_valid
	wire  [358:0] msgdma_0_descriptor_slave_agent_rp_data;                                          // msgdma_0_descriptor_slave_agent:rp_data -> router_007:sink_data
	wire          msgdma_0_descriptor_slave_agent_rp_ready;                                         // router_007:sink_ready -> msgdma_0_descriptor_slave_agent:rp_ready
	wire          msgdma_0_descriptor_slave_agent_rp_startofpacket;                                 // msgdma_0_descriptor_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rp_endofpacket;                                   // msgdma_0_descriptor_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          parameter_sys_parameter_rx_ram_s1_agent_rp_valid;                                 // Parameter_SYS_parameter_rx_ram_s1_agent:rp_valid -> router_008:sink_valid
	wire  [106:0] parameter_sys_parameter_rx_ram_s1_agent_rp_data;                                  // Parameter_SYS_parameter_rx_ram_s1_agent:rp_data -> router_008:sink_data
	wire          parameter_sys_parameter_rx_ram_s1_agent_rp_ready;                                 // router_008:sink_ready -> Parameter_SYS_parameter_rx_ram_s1_agent:rp_ready
	wire          parameter_sys_parameter_rx_ram_s1_agent_rp_startofpacket;                         // Parameter_SYS_parameter_rx_ram_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          parameter_sys_parameter_rx_ram_s1_agent_rp_endofpacket;                           // Parameter_SYS_parameter_rx_ram_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                             // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [106:0] router_008_src_data;                                                              // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                                             // rsp_demux_004:sink_ready -> router_008:src_ready
	wire   [10:0] router_008_src_channel;                                                           // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                                     // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                                       // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          parameter_sys_parameter_tx_ram_s1_agent_rp_valid;                                 // Parameter_SYS_parameter_tx_ram_s1_agent:rp_valid -> router_009:sink_valid
	wire  [106:0] parameter_sys_parameter_tx_ram_s1_agent_rp_data;                                  // Parameter_SYS_parameter_tx_ram_s1_agent:rp_data -> router_009:sink_data
	wire          parameter_sys_parameter_tx_ram_s1_agent_rp_ready;                                 // router_009:sink_ready -> Parameter_SYS_parameter_tx_ram_s1_agent:rp_ready
	wire          parameter_sys_parameter_tx_ram_s1_agent_rp_startofpacket;                         // Parameter_SYS_parameter_tx_ram_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          parameter_sys_parameter_tx_ram_s1_agent_rp_endofpacket;                           // Parameter_SYS_parameter_tx_ram_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                             // router_009:src_valid -> rsp_demux_005:sink_valid
	wire  [106:0] router_009_src_data;                                                              // router_009:src_data -> rsp_demux_005:sink_data
	wire          router_009_src_ready;                                                             // rsp_demux_005:sink_ready -> router_009:src_ready
	wire   [10:0] router_009_src_channel;                                                           // router_009:src_channel -> rsp_demux_005:sink_channel
	wire          router_009_src_startofpacket;                                                     // router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_009_src_endofpacket;                                                       // router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          altpll_sys_pll_slave_agent_rp_valid;                                              // altpll_sys_pll_slave_agent:rp_valid -> router_010:sink_valid
	wire  [106:0] altpll_sys_pll_slave_agent_rp_data;                                               // altpll_sys_pll_slave_agent:rp_data -> router_010:sink_data
	wire          altpll_sys_pll_slave_agent_rp_ready;                                              // router_010:sink_ready -> altpll_sys_pll_slave_agent:rp_ready
	wire          altpll_sys_pll_slave_agent_rp_startofpacket;                                      // altpll_sys_pll_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          altpll_sys_pll_slave_agent_rp_endofpacket;                                        // altpll_sys_pll_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                             // router_010:src_valid -> rsp_demux_006:sink_valid
	wire  [106:0] router_010_src_data;                                                              // router_010:src_data -> rsp_demux_006:sink_data
	wire          router_010_src_ready;                                                             // rsp_demux_006:sink_ready -> router_010:src_ready
	wire   [10:0] router_010_src_channel;                                                           // router_010:src_channel -> rsp_demux_006:sink_channel
	wire          router_010_src_startofpacket;                                                     // router_010:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_010_src_endofpacket;                                                       // router_010:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rp_valid;                                     // mm_clock_crossing_bridge_1_s0_agent:rp_valid -> router_011:sink_valid
	wire  [106:0] mm_clock_crossing_bridge_1_s0_agent_rp_data;                                      // mm_clock_crossing_bridge_1_s0_agent:rp_data -> router_011:sink_data
	wire          mm_clock_crossing_bridge_1_s0_agent_rp_ready;                                     // router_011:sink_ready -> mm_clock_crossing_bridge_1_s0_agent:rp_ready
	wire          mm_clock_crossing_bridge_1_s0_agent_rp_startofpacket;                             // mm_clock_crossing_bridge_1_s0_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          mm_clock_crossing_bridge_1_s0_agent_rp_endofpacket;                               // mm_clock_crossing_bridge_1_s0_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                             // router_011:src_valid -> rsp_demux_007:sink_valid
	wire  [106:0] router_011_src_data;                                                              // router_011:src_data -> rsp_demux_007:sink_data
	wire          router_011_src_ready;                                                             // rsp_demux_007:sink_ready -> router_011:src_ready
	wire   [10:0] router_011_src_channel;                                                           // router_011:src_channel -> rsp_demux_007:sink_channel
	wire          router_011_src_startofpacket;                                                     // router_011:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_011_src_endofpacket;                                                       // router_011:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          program_memory_s1_agent_rp_valid;                                                 // Program_Memory_s1_agent:rp_valid -> router_012:sink_valid
	wire  [106:0] program_memory_s1_agent_rp_data;                                                  // Program_Memory_s1_agent:rp_data -> router_012:sink_data
	wire          program_memory_s1_agent_rp_ready;                                                 // router_012:sink_ready -> Program_Memory_s1_agent:rp_ready
	wire          program_memory_s1_agent_rp_startofpacket;                                         // Program_Memory_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          program_memory_s1_agent_rp_endofpacket;                                           // Program_Memory_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                             // router_012:src_valid -> rsp_demux_008:sink_valid
	wire  [106:0] router_012_src_data;                                                              // router_012:src_data -> rsp_demux_008:sink_data
	wire          router_012_src_ready;                                                             // rsp_demux_008:sink_ready -> router_012:src_ready
	wire   [10:0] router_012_src_channel;                                                           // router_012:src_channel -> rsp_demux_008:sink_channel
	wire          router_012_src_startofpacket;                                                     // router_012:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_012_src_endofpacket;                                                       // router_012:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          data_memory_s1_agent_rp_valid;                                                    // Data_Memory_s1_agent:rp_valid -> router_013:sink_valid
	wire  [106:0] data_memory_s1_agent_rp_data;                                                     // Data_Memory_s1_agent:rp_data -> router_013:sink_data
	wire          data_memory_s1_agent_rp_ready;                                                    // router_013:sink_ready -> Data_Memory_s1_agent:rp_ready
	wire          data_memory_s1_agent_rp_startofpacket;                                            // Data_Memory_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          data_memory_s1_agent_rp_endofpacket;                                              // Data_Memory_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                             // router_013:src_valid -> rsp_demux_009:sink_valid
	wire  [106:0] router_013_src_data;                                                              // router_013:src_data -> rsp_demux_009:sink_data
	wire          router_013_src_ready;                                                             // rsp_demux_009:sink_ready -> router_013:src_ready
	wire   [10:0] router_013_src_channel;                                                           // router_013:src_channel -> rsp_demux_009:sink_channel
	wire          router_013_src_startofpacket;                                                     // router_013:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_013_src_endofpacket;                                                       // router_013:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          usb_data_sys_usb_rx_ram_s1_agent_rp_valid;                                        // USB_Data_SYS_usb_rx_ram_s1_agent:rp_valid -> router_014:sink_valid
	wire  [106:0] usb_data_sys_usb_rx_ram_s1_agent_rp_data;                                         // USB_Data_SYS_usb_rx_ram_s1_agent:rp_data -> router_014:sink_data
	wire          usb_data_sys_usb_rx_ram_s1_agent_rp_ready;                                        // router_014:sink_ready -> USB_Data_SYS_usb_rx_ram_s1_agent:rp_ready
	wire          usb_data_sys_usb_rx_ram_s1_agent_rp_startofpacket;                                // USB_Data_SYS_usb_rx_ram_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          usb_data_sys_usb_rx_ram_s1_agent_rp_endofpacket;                                  // USB_Data_SYS_usb_rx_ram_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                             // router_014:src_valid -> rsp_demux_010:sink_valid
	wire  [106:0] router_014_src_data;                                                              // router_014:src_data -> rsp_demux_010:sink_data
	wire          router_014_src_ready;                                                             // rsp_demux_010:sink_ready -> router_014:src_ready
	wire   [10:0] router_014_src_channel;                                                           // router_014:src_channel -> rsp_demux_010:sink_channel
	wire          router_014_src_startofpacket;                                                     // router_014:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_014_src_endofpacket;                                                       // router_014:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_001_src_valid;                                                             // router_001:src_valid -> msgdma_0_mm_read_limiter:cmd_sink_valid
	wire  [106:0] router_001_src_data;                                                              // router_001:src_data -> msgdma_0_mm_read_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                             // msgdma_0_mm_read_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [10:0] router_001_src_channel;                                                           // router_001:src_channel -> msgdma_0_mm_read_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> msgdma_0_mm_read_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> msgdma_0_mm_read_limiter:cmd_sink_endofpacket
	wire  [106:0] msgdma_0_mm_read_limiter_cmd_src_data;                                            // msgdma_0_mm_read_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          msgdma_0_mm_read_limiter_cmd_src_ready;                                           // cmd_demux_001:sink_ready -> msgdma_0_mm_read_limiter:cmd_src_ready
	wire   [10:0] msgdma_0_mm_read_limiter_cmd_src_channel;                                         // msgdma_0_mm_read_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          msgdma_0_mm_read_limiter_cmd_src_startofpacket;                                   // msgdma_0_mm_read_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          msgdma_0_mm_read_limiter_cmd_src_endofpacket;                                     // msgdma_0_mm_read_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> msgdma_0_mm_read_limiter:rsp_sink_valid
	wire  [106:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> msgdma_0_mm_read_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                            // msgdma_0_mm_read_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [10:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> msgdma_0_mm_read_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> msgdma_0_mm_read_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> msgdma_0_mm_read_limiter:rsp_sink_endofpacket
	wire          msgdma_0_mm_read_limiter_rsp_src_valid;                                           // msgdma_0_mm_read_limiter:rsp_src_valid -> msgdma_0_mm_read_agent:rp_valid
	wire  [106:0] msgdma_0_mm_read_limiter_rsp_src_data;                                            // msgdma_0_mm_read_limiter:rsp_src_data -> msgdma_0_mm_read_agent:rp_data
	wire          msgdma_0_mm_read_limiter_rsp_src_ready;                                           // msgdma_0_mm_read_agent:rp_ready -> msgdma_0_mm_read_limiter:rsp_src_ready
	wire   [10:0] msgdma_0_mm_read_limiter_rsp_src_channel;                                         // msgdma_0_mm_read_limiter:rsp_src_channel -> msgdma_0_mm_read_agent:rp_channel
	wire          msgdma_0_mm_read_limiter_rsp_src_startofpacket;                                   // msgdma_0_mm_read_limiter:rsp_src_startofpacket -> msgdma_0_mm_read_agent:rp_startofpacket
	wire          msgdma_0_mm_read_limiter_rsp_src_endofpacket;                                     // msgdma_0_mm_read_limiter:rsp_src_endofpacket -> msgdma_0_mm_read_agent:rp_endofpacket
	wire          router_003_src_valid;                                                             // router_003:src_valid -> nios2_gen2_instruction_master_limiter:cmd_sink_valid
	wire  [106:0] router_003_src_data;                                                              // router_003:src_data -> nios2_gen2_instruction_master_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                             // nios2_gen2_instruction_master_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [10:0] router_003_src_channel;                                                           // router_003:src_channel -> nios2_gen2_instruction_master_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> nios2_gen2_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> nios2_gen2_instruction_master_limiter:cmd_sink_endofpacket
	wire  [106:0] nios2_gen2_instruction_master_limiter_cmd_src_data;                               // nios2_gen2_instruction_master_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          nios2_gen2_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_003:sink_ready -> nios2_gen2_instruction_master_limiter:cmd_src_ready
	wire   [10:0] nios2_gen2_instruction_master_limiter_cmd_src_channel;                            // nios2_gen2_instruction_master_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          nios2_gen2_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_gen2_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          nios2_gen2_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_gen2_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                            // rsp_mux_003:src_valid -> nios2_gen2_instruction_master_limiter:rsp_sink_valid
	wire  [106:0] rsp_mux_003_src_data;                                                             // rsp_mux_003:src_data -> nios2_gen2_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                            // nios2_gen2_instruction_master_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [10:0] rsp_mux_003_src_channel;                                                          // rsp_mux_003:src_channel -> nios2_gen2_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                    // rsp_mux_003:src_startofpacket -> nios2_gen2_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                      // rsp_mux_003:src_endofpacket -> nios2_gen2_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_instruction_master_limiter_rsp_src_valid;                              // nios2_gen2_instruction_master_limiter:rsp_src_valid -> nios2_gen2_instruction_master_agent:rp_valid
	wire  [106:0] nios2_gen2_instruction_master_limiter_rsp_src_data;                               // nios2_gen2_instruction_master_limiter:rsp_src_data -> nios2_gen2_instruction_master_agent:rp_data
	wire          nios2_gen2_instruction_master_limiter_rsp_src_ready;                              // nios2_gen2_instruction_master_agent:rp_ready -> nios2_gen2_instruction_master_limiter:rsp_src_ready
	wire   [10:0] nios2_gen2_instruction_master_limiter_rsp_src_channel;                            // nios2_gen2_instruction_master_limiter:rsp_src_channel -> nios2_gen2_instruction_master_agent:rp_channel
	wire          nios2_gen2_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_gen2_instruction_master_limiter:rsp_src_startofpacket -> nios2_gen2_instruction_master_agent:rp_startofpacket
	wire          nios2_gen2_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_gen2_instruction_master_limiter:rsp_src_endofpacket -> nios2_gen2_instruction_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [106:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [10:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [106:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [10:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [106:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [10:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [106:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [10:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [106:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [10:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [106:0] cmd_demux_src5_data;                                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [10:0] cmd_demux_src5_channel;                                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                             // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [106:0] cmd_demux_src7_data;                                                              // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                             // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [10:0] cmd_demux_src7_channel;                                                           // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                     // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                       // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [106:0] cmd_demux_src8_data;                                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [10:0] cmd_demux_src8_channel;                                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                             // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [106:0] cmd_demux_src9_data;                                                              // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                             // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [10:0] cmd_demux_src9_channel;                                                           // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                     // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                       // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                            // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [106:0] cmd_demux_src10_data;                                                             // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                            // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [10:0] cmd_demux_src10_channel;                                                          // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                    // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                      // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> cmd_mux_004:sink1_valid
	wire  [106:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src0_ready;                                                         // cmd_mux_004:sink1_ready -> cmd_demux_001:src0_ready
	wire   [10:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                         // cmd_demux_001:src1_valid -> cmd_mux_005:sink1_valid
	wire  [106:0] cmd_demux_001_src1_data;                                                          // cmd_demux_001:src1_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src1_ready;                                                         // cmd_mux_005:sink1_ready -> cmd_demux_001:src1_ready
	wire   [10:0] cmd_demux_001_src1_channel;                                                       // cmd_demux_001:src1_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                         // cmd_demux_001:src2_valid -> cmd_mux_009:sink1_valid
	wire  [106:0] cmd_demux_001_src2_data;                                                          // cmd_demux_001:src2_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src2_ready;                                                         // cmd_mux_009:sink1_ready -> cmd_demux_001:src2_ready
	wire   [10:0] cmd_demux_001_src2_channel;                                                       // cmd_demux_001:src2_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                         // cmd_demux_001:src3_valid -> cmd_mux_010:sink1_valid
	wire  [106:0] cmd_demux_001_src3_data;                                                          // cmd_demux_001:src3_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src3_ready;                                                         // cmd_mux_010:sink1_ready -> cmd_demux_001:src3_ready
	wire   [10:0] cmd_demux_001_src3_channel;                                                       // cmd_demux_001:src3_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                 // cmd_demux_001:src3_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                   // cmd_demux_001:src3_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                         // cmd_demux_002:src0_valid -> cmd_mux_004:sink2_valid
	wire  [106:0] cmd_demux_002_src0_data;                                                          // cmd_demux_002:src0_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_002_src0_ready;                                                         // cmd_mux_004:sink2_ready -> cmd_demux_002:src0_ready
	wire   [10:0] cmd_demux_002_src0_channel;                                                       // cmd_demux_002:src0_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                 // cmd_demux_002:src0_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                   // cmd_demux_002:src0_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                         // cmd_demux_002:src1_valid -> cmd_mux_005:sink2_valid
	wire  [106:0] cmd_demux_002_src1_data;                                                          // cmd_demux_002:src1_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_002_src1_ready;                                                         // cmd_mux_005:sink2_ready -> cmd_demux_002:src1_ready
	wire   [10:0] cmd_demux_002_src1_channel;                                                       // cmd_demux_002:src1_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                                 // cmd_demux_002:src1_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                   // cmd_demux_002:src1_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                         // cmd_demux_002:src2_valid -> cmd_mux_009:sink2_valid
	wire  [106:0] cmd_demux_002_src2_data;                                                          // cmd_demux_002:src2_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_002_src2_ready;                                                         // cmd_mux_009:sink2_ready -> cmd_demux_002:src2_ready
	wire   [10:0] cmd_demux_002_src2_channel;                                                       // cmd_demux_002:src2_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_002_src2_startofpacket;                                                 // cmd_demux_002:src2_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                   // cmd_demux_002:src2_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                         // cmd_demux_002:src3_valid -> cmd_mux_010:sink2_valid
	wire  [106:0] cmd_demux_002_src3_data;                                                          // cmd_demux_002:src3_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_002_src3_ready;                                                         // cmd_mux_010:sink2_ready -> cmd_demux_002:src3_ready
	wire   [10:0] cmd_demux_002_src3_channel;                                                       // cmd_demux_002:src3_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_002_src3_startofpacket;                                                 // cmd_demux_002:src3_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                   // cmd_demux_002:src3_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                         // cmd_demux_003:src0_valid -> cmd_mux_002:sink1_valid
	wire  [106:0] cmd_demux_003_src0_data;                                                          // cmd_demux_003:src0_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_003_src0_ready;                                                         // cmd_mux_002:sink1_ready -> cmd_demux_003:src0_ready
	wire   [10:0] cmd_demux_003_src0_channel;                                                       // cmd_demux_003:src0_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                 // cmd_demux_003:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                   // cmd_demux_003:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                         // cmd_demux_003:src1_valid -> cmd_mux_008:sink1_valid
	wire  [106:0] cmd_demux_003_src1_data;                                                          // cmd_demux_003:src1_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_003_src1_ready;                                                         // cmd_mux_008:sink1_ready -> cmd_demux_003:src1_ready
	wire   [10:0] cmd_demux_003_src1_channel;                                                       // cmd_demux_003:src1_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                 // cmd_demux_003:src1_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                   // cmd_demux_003:src1_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [106:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [10:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [106:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [10:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [106:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [10:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                         // rsp_demux_002:src1_valid -> rsp_mux_003:sink0_valid
	wire  [106:0] rsp_demux_002_src1_data;                                                          // rsp_demux_002:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_002_src1_ready;                                                         // rsp_mux_003:sink0_ready -> rsp_demux_002:src1_ready
	wire   [10:0] rsp_demux_002_src1_channel;                                                       // rsp_demux_002:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_002_src1_startofpacket;                                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [106:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [10:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [106:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [10:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                         // rsp_demux_004:src1_valid -> rsp_mux_001:sink0_valid
	wire  [106:0] rsp_demux_004_src1_data;                                                          // rsp_demux_004:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_004_src1_ready;                                                         // rsp_mux_001:sink0_ready -> rsp_demux_004:src1_ready
	wire   [10:0] rsp_demux_004_src1_channel;                                                       // rsp_demux_004:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_004_src1_startofpacket;                                                 // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                   // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_004_src2_valid;                                                         // rsp_demux_004:src2_valid -> rsp_mux_002:sink0_valid
	wire  [106:0] rsp_demux_004_src2_data;                                                          // rsp_demux_004:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_004_src2_ready;                                                         // rsp_mux_002:sink0_ready -> rsp_demux_004:src2_ready
	wire   [10:0] rsp_demux_004_src2_channel;                                                       // rsp_demux_004:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_004_src2_startofpacket;                                                 // rsp_demux_004:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                   // rsp_demux_004:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [106:0] rsp_demux_005_src0_data;                                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [10:0] rsp_demux_005_src0_channel;                                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                         // rsp_demux_005:src1_valid -> rsp_mux_001:sink1_valid
	wire  [106:0] rsp_demux_005_src1_data;                                                          // rsp_demux_005:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_005_src1_ready;                                                         // rsp_mux_001:sink1_ready -> rsp_demux_005:src1_ready
	wire   [10:0] rsp_demux_005_src1_channel;                                                       // rsp_demux_005:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_005_src1_startofpacket;                                                 // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                   // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_005_src2_valid;                                                         // rsp_demux_005:src2_valid -> rsp_mux_002:sink1_valid
	wire  [106:0] rsp_demux_005_src2_data;                                                          // rsp_demux_005:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_005_src2_ready;                                                         // rsp_mux_002:sink1_ready -> rsp_demux_005:src2_ready
	wire   [10:0] rsp_demux_005_src2_channel;                                                       // rsp_demux_005:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_005_src2_startofpacket;                                                 // rsp_demux_005:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                   // rsp_demux_005:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_007_src0_valid;                                                         // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [106:0] rsp_demux_007_src0_data;                                                          // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                         // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [10:0] rsp_demux_007_src0_channel;                                                       // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                 // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                   // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [106:0] rsp_demux_008_src0_data;                                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [10:0] rsp_demux_008_src0_channel;                                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                         // rsp_demux_008:src1_valid -> rsp_mux_003:sink1_valid
	wire  [106:0] rsp_demux_008_src1_data;                                                          // rsp_demux_008:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_008_src1_ready;                                                         // rsp_mux_003:sink1_ready -> rsp_demux_008:src1_ready
	wire   [10:0] rsp_demux_008_src1_channel;                                                       // rsp_demux_008:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_008_src1_startofpacket;                                                 // rsp_demux_008:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                   // rsp_demux_008:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_009_src0_valid;                                                         // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [106:0] rsp_demux_009_src0_data;                                                          // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                         // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [10:0] rsp_demux_009_src0_channel;                                                       // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                 // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                   // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                         // rsp_demux_009:src1_valid -> rsp_mux_001:sink2_valid
	wire  [106:0] rsp_demux_009_src1_data;                                                          // rsp_demux_009:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_009_src1_ready;                                                         // rsp_mux_001:sink2_ready -> rsp_demux_009:src1_ready
	wire   [10:0] rsp_demux_009_src1_channel;                                                       // rsp_demux_009:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_009_src1_startofpacket;                                                 // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                   // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_009_src2_valid;                                                         // rsp_demux_009:src2_valid -> rsp_mux_002:sink2_valid
	wire  [106:0] rsp_demux_009_src2_data;                                                          // rsp_demux_009:src2_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_009_src2_ready;                                                         // rsp_mux_002:sink2_ready -> rsp_demux_009:src2_ready
	wire   [10:0] rsp_demux_009_src2_channel;                                                       // rsp_demux_009:src2_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_009_src2_startofpacket;                                                 // rsp_demux_009:src2_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                   // rsp_demux_009:src2_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_010_src0_valid;                                                         // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [106:0] rsp_demux_010_src0_data;                                                          // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                         // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [10:0] rsp_demux_010_src0_channel;                                                       // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                 // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                   // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                         // rsp_demux_010:src1_valid -> rsp_mux_001:sink3_valid
	wire  [106:0] rsp_demux_010_src1_data;                                                          // rsp_demux_010:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_010_src1_ready;                                                         // rsp_mux_001:sink3_ready -> rsp_demux_010:src1_ready
	wire   [10:0] rsp_demux_010_src1_channel;                                                       // rsp_demux_010:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_010_src1_startofpacket;                                                 // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                   // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_010_src2_valid;                                                         // rsp_demux_010:src2_valid -> rsp_mux_002:sink3_valid
	wire  [106:0] rsp_demux_010_src2_data;                                                          // rsp_demux_010:src2_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_010_src2_ready;                                                         // rsp_mux_002:sink3_ready -> rsp_demux_010:src2_ready
	wire   [10:0] rsp_demux_010_src2_channel;                                                       // rsp_demux_010:src2_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_010_src2_startofpacket;                                                 // rsp_demux_010:src2_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                                   // rsp_demux_010:src2_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> msgdma_0_descriptor_slave_cmd_width_adapter:in_valid
	wire  [106:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> msgdma_0_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                            // msgdma_0_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire   [10:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> msgdma_0_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> msgdma_0_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> msgdma_0_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_valid;                            // msgdma_0_descriptor_slave_cmd_width_adapter:out_valid -> msgdma_0_descriptor_slave_agent:cp_valid
	wire  [358:0] msgdma_0_descriptor_slave_cmd_width_adapter_src_data;                             // msgdma_0_descriptor_slave_cmd_width_adapter:out_data -> msgdma_0_descriptor_slave_agent:cp_data
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_ready;                            // msgdma_0_descriptor_slave_agent:cp_ready -> msgdma_0_descriptor_slave_cmd_width_adapter:out_ready
	wire   [10:0] msgdma_0_descriptor_slave_cmd_width_adapter_src_channel;                          // msgdma_0_descriptor_slave_cmd_width_adapter:out_channel -> msgdma_0_descriptor_slave_agent:cp_channel
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket;                    // msgdma_0_descriptor_slave_cmd_width_adapter:out_startofpacket -> msgdma_0_descriptor_slave_agent:cp_startofpacket
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket;                      // msgdma_0_descriptor_slave_cmd_width_adapter:out_endofpacket -> msgdma_0_descriptor_slave_agent:cp_endofpacket
	wire          router_007_src_valid;                                                             // router_007:src_valid -> msgdma_0_descriptor_slave_rsp_width_adapter:in_valid
	wire  [358:0] router_007_src_data;                                                              // router_007:src_data -> msgdma_0_descriptor_slave_rsp_width_adapter:in_data
	wire          router_007_src_ready;                                                             // msgdma_0_descriptor_slave_rsp_width_adapter:in_ready -> router_007:src_ready
	wire   [10:0] router_007_src_channel;                                                           // router_007:src_channel -> msgdma_0_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_007_src_startofpacket;                                                     // router_007:src_startofpacket -> msgdma_0_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_007_src_endofpacket;                                                       // router_007:src_endofpacket -> msgdma_0_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_valid;                            // msgdma_0_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [106:0] msgdma_0_descriptor_slave_rsp_width_adapter_src_data;                             // msgdma_0_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_ready;                            // rsp_demux_003:sink_ready -> msgdma_0_descriptor_slave_rsp_width_adapter:out_ready
	wire   [10:0] msgdma_0_descriptor_slave_rsp_width_adapter_src_channel;                          // msgdma_0_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_startofpacket;                    // msgdma_0_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_endofpacket;                      // msgdma_0_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_demux_src6_valid;                                                             // cmd_demux:src6_valid -> crosser:in_valid
	wire  [106:0] cmd_demux_src6_data;                                                              // cmd_demux:src6_data -> crosser:in_data
	wire          cmd_demux_src6_ready;                                                             // crosser:in_ready -> cmd_demux:src6_ready
	wire   [10:0] cmd_demux_src6_channel;                                                           // cmd_demux:src6_channel -> crosser:in_channel
	wire          cmd_demux_src6_startofpacket;                                                     // cmd_demux:src6_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                       // cmd_demux:src6_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                // crosser:out_valid -> cmd_mux_006:sink0_valid
	wire  [106:0] crosser_out_data;                                                                 // crosser:out_data -> cmd_mux_006:sink0_data
	wire          crosser_out_ready;                                                                // cmd_mux_006:sink0_ready -> crosser:out_ready
	wire   [10:0] crosser_out_channel;                                                              // crosser:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_out_startofpacket;                                                        // crosser:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                          // crosser:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                         // rsp_demux_006:src0_valid -> crosser_001:in_valid
	wire  [106:0] rsp_demux_006_src0_data;                                                          // rsp_demux_006:src0_data -> crosser_001:in_data
	wire          rsp_demux_006_src0_ready;                                                         // crosser_001:in_ready -> rsp_demux_006:src0_ready
	wire   [10:0] rsp_demux_006_src0_channel;                                                       // rsp_demux_006:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                 // rsp_demux_006:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                   // rsp_demux_006:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                            // crosser_001:out_valid -> rsp_mux:sink6_valid
	wire  [106:0] crosser_001_out_data;                                                             // crosser_001:out_data -> rsp_mux:sink6_data
	wire          crosser_001_out_ready;                                                            // rsp_mux:sink6_ready -> crosser_001:out_ready
	wire   [10:0] crosser_001_out_channel;                                                          // crosser_001:out_channel -> rsp_mux:sink6_channel
	wire          crosser_001_out_startofpacket;                                                    // crosser_001:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_001_out_endofpacket;                                                      // crosser_001:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire   [10:0] msgdma_0_mm_read_limiter_cmd_valid_data;                                          // msgdma_0_mm_read_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [10:0] nios2_gen2_instruction_master_limiter_cmd_valid_data;                             // nios2_gen2_instruction_master_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire          msgdma_0_csr_agent_rdata_fifo_src_valid;                                          // msgdma_0_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] msgdma_0_csr_agent_rdata_fifo_src_data;                                           // msgdma_0_csr_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          msgdma_0_csr_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter:in_0_ready -> msgdma_0_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> msgdma_0_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> msgdma_0_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                    // msgdma_0_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> msgdma_0_csr_agent:rdata_fifo_sink_error
	wire          vic_0_csr_access_agent_rdata_fifo_src_valid;                                      // vic_0_csr_access_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] vic_0_csr_access_agent_rdata_fifo_src_data;                                       // vic_0_csr_access_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          vic_0_csr_access_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_001:in_0_ready -> vic_0_csr_access_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> vic_0_csr_access_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> vic_0_csr_access_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                // vic_0_csr_access_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> vic_0_csr_access_agent:rdata_fifo_sink_error
	wire          nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                // nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid;                             // msgdma_0_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [257:0] msgdma_0_descriptor_slave_agent_rdata_fifo_src_data;                              // msgdma_0_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_003:in_0_ready -> msgdma_0_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [257:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                // msgdma_0_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_error
	wire          parameter_sys_parameter_rx_ram_s1_agent_rdata_fifo_src_valid;                     // Parameter_SYS_parameter_rx_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] parameter_sys_parameter_rx_ram_s1_agent_rdata_fifo_src_data;                      // Parameter_SYS_parameter_rx_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          parameter_sys_parameter_rx_ram_s1_agent_rdata_fifo_src_ready;                     // avalon_st_adapter_004:in_0_ready -> Parameter_SYS_parameter_rx_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> Parameter_SYS_parameter_rx_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> Parameter_SYS_parameter_rx_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                // Parameter_SYS_parameter_rx_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> Parameter_SYS_parameter_rx_ram_s1_agent:rdata_fifo_sink_error
	wire          parameter_sys_parameter_tx_ram_s1_agent_rdata_fifo_src_valid;                     // Parameter_SYS_parameter_tx_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] parameter_sys_parameter_tx_ram_s1_agent_rdata_fifo_src_data;                      // Parameter_SYS_parameter_tx_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          parameter_sys_parameter_tx_ram_s1_agent_rdata_fifo_src_ready;                     // avalon_st_adapter_005:in_0_ready -> Parameter_SYS_parameter_tx_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                // avalon_st_adapter_005:out_0_valid -> Parameter_SYS_parameter_tx_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                 // avalon_st_adapter_005:out_0_data -> Parameter_SYS_parameter_tx_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                // Parameter_SYS_parameter_tx_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                // avalon_st_adapter_005:out_0_error -> Parameter_SYS_parameter_tx_ram_s1_agent:rdata_fifo_sink_error
	wire          altpll_sys_pll_slave_agent_rdata_fifo_out_valid;                                  // altpll_sys_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] altpll_sys_pll_slave_agent_rdata_fifo_out_data;                                   // altpll_sys_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          altpll_sys_pll_slave_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_006:in_0_ready -> altpll_sys_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                // avalon_st_adapter_006:out_0_valid -> altpll_sys_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                 // avalon_st_adapter_006:out_0_data -> altpll_sys_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                // altpll_sys_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                // avalon_st_adapter_006:out_0_error -> altpll_sys_pll_slave_agent:rdata_fifo_sink_error
	wire          mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_valid;                         // mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_data;                          // mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_ready;                         // avalon_st_adapter_007:in_0_ready -> mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                // avalon_st_adapter_007:out_0_valid -> mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                 // avalon_st_adapter_007:out_0_data -> mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                // mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                // avalon_st_adapter_007:out_0_error -> mm_clock_crossing_bridge_1_s0_agent:rdata_fifo_sink_error
	wire          program_memory_s1_agent_rdata_fifo_src_valid;                                     // Program_Memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] program_memory_s1_agent_rdata_fifo_src_data;                                      // Program_Memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          program_memory_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_008:in_0_ready -> Program_Memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                // avalon_st_adapter_008:out_0_valid -> Program_Memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                 // avalon_st_adapter_008:out_0_data -> Program_Memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                // Program_Memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                // avalon_st_adapter_008:out_0_error -> Program_Memory_s1_agent:rdata_fifo_sink_error
	wire          data_memory_s1_agent_rdata_fifo_src_valid;                                        // Data_Memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] data_memory_s1_agent_rdata_fifo_src_data;                                         // Data_Memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          data_memory_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_009:in_0_ready -> Data_Memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                // avalon_st_adapter_009:out_0_valid -> Data_Memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                 // avalon_st_adapter_009:out_0_data -> Data_Memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                // Data_Memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                // avalon_st_adapter_009:out_0_error -> Data_Memory_s1_agent:rdata_fifo_sink_error
	wire          usb_data_sys_usb_rx_ram_s1_agent_rdata_fifo_src_valid;                            // USB_Data_SYS_usb_rx_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] usb_data_sys_usb_rx_ram_s1_agent_rdata_fifo_src_data;                             // USB_Data_SYS_usb_rx_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          usb_data_sys_usb_rx_ram_s1_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_010:in_0_ready -> USB_Data_SYS_usb_rx_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                // avalon_st_adapter_010:out_0_valid -> USB_Data_SYS_usb_rx_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                 // avalon_st_adapter_010:out_0_data -> USB_Data_SYS_usb_rx_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                // USB_Data_SYS_usb_rx_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                // avalon_st_adapter_010:out_0_error -> USB_Data_SYS_usb_rx_ram_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_data_master_translator (
		.clk                    (altpll_sys_c0_clk),                                                         //                       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (25),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_0_mm_read_translator (
		.clk                    (altpll_sys_c0_clk),                                                   //                       clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (msgdma_0_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_0_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (msgdma_0_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (msgdma_0_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (msgdma_0_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (msgdma_0_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (msgdma_0_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (msgdma_0_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (msgdma_0_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (msgdma_0_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (msgdma_0_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (msgdma_0_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_0_mm_read_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (msgdma_0_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (msgdma_0_mm_read_read),                                               //                          .read
		.av_readdata            (msgdma_0_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (msgdma_0_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                //               (terminated)
		.av_write               (1'b0),                                                                //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                //               (terminated)
		.av_lock                (1'b0),                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                //               (terminated)
		.uav_clken              (),                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                //               (terminated)
		.uav_response           (2'b00),                                                               //               (terminated)
		.av_response            (),                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (25),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) msgdma_0_mm_write_translator (
		.clk                    (altpll_sys_c0_clk),                                                    //                       clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (msgdma_0_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (msgdma_0_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (msgdma_0_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (msgdma_0_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (msgdma_0_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (msgdma_0_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (msgdma_0_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (msgdma_0_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (msgdma_0_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (msgdma_0_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (msgdma_0_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (msgdma_0_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (msgdma_0_mm_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (msgdma_0_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (msgdma_0_mm_write_write),                                              //                          .write
		.av_writedata           (msgdma_0_mm_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_read                (1'b0),                                                                 //               (terminated)
		.av_readdata            (),                                                                     //               (terminated)
		.av_readdatavalid       (),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_instruction_master_translator (
		.clk                    (altpll_sys_c0_clk),                                                                //                       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_0_csr_translator (
		.clk                    (altpll_sys_c0_clk),                            //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (msgdma_0_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_0_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (msgdma_0_csr_agent_m0_read),                   //                         .read
		.uav_write              (msgdma_0_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (msgdma_0_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (msgdma_0_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (msgdma_0_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (msgdma_0_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (msgdma_0_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (msgdma_0_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (msgdma_0_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (msgdma_0_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (msgdma_0_csr_write),                           //                         .write
		.av_read                (msgdma_0_csr_read),                            //                         .read
		.av_readdata            (msgdma_0_csr_readdata),                        //                         .readdata
		.av_writedata           (msgdma_0_csr_writedata),                       //                         .writedata
		.av_byteenable          (msgdma_0_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vic_0_csr_access_translator (
		.clk                    (altpll_sys_c0_clk),                            //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vic_0_csr_access_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (vic_0_csr_access_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (vic_0_csr_access_agent_m0_read),               //                         .read
		.uav_write              (vic_0_csr_access_agent_m0_write),              //                         .write
		.uav_waitrequest        (vic_0_csr_access_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (vic_0_csr_access_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (vic_0_csr_access_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (vic_0_csr_access_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (vic_0_csr_access_agent_m0_writedata),          //                         .writedata
		.uav_lock               (vic_0_csr_access_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (vic_0_csr_access_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (vic_0_csr_access_address),                     //      avalon_anti_slave_0.address
		.av_write               (vic_0_csr_access_write),                       //                         .write
		.av_read                (vic_0_csr_access_read),                        //                         .read
		.av_readdata            (vic_0_csr_access_readdata),                    //                         .readdata
		.av_writedata           (vic_0_csr_access_writedata),                   //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_debug_mem_slave_translator (
		.clk                    (altpll_sys_c0_clk),                                 //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (256),
		.UAV_DATA_W                     (256),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (32),
		.UAV_BYTEENABLE_W               (32),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (32),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_0_descriptor_slave_translator (
		.clk                    (altpll_sys_c0_clk),                                                                                                                                                                                                                                                     //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),                                                                                                                                                                                                                          //                    reset.reset
		.uav_address            (msgdma_0_descriptor_slave_agent_m0_address),                                                                                                                                                                                                                            // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_0_descriptor_slave_agent_m0_burstcount),                                                                                                                                                                                                                         //                         .burstcount
		.uav_read               (msgdma_0_descriptor_slave_agent_m0_read),                                                                                                                                                                                                                               //                         .read
		.uav_write              (msgdma_0_descriptor_slave_agent_m0_write),                                                                                                                                                                                                                              //                         .write
		.uav_waitrequest        (msgdma_0_descriptor_slave_agent_m0_waitrequest),                                                                                                                                                                                                                        //                         .waitrequest
		.uav_readdatavalid      (msgdma_0_descriptor_slave_agent_m0_readdatavalid),                                                                                                                                                                                                                      //                         .readdatavalid
		.uav_byteenable         (msgdma_0_descriptor_slave_agent_m0_byteenable),                                                                                                                                                                                                                         //                         .byteenable
		.uav_readdata           (msgdma_0_descriptor_slave_agent_m0_readdata),                                                                                                                                                                                                                           //                         .readdata
		.uav_writedata          (msgdma_0_descriptor_slave_agent_m0_writedata),                                                                                                                                                                                                                          //                         .writedata
		.uav_lock               (msgdma_0_descriptor_slave_agent_m0_lock),                                                                                                                                                                                                                               //                         .lock
		.uav_debugaccess        (msgdma_0_descriptor_slave_agent_m0_debugaccess),                                                                                                                                                                                                                        //                         .debugaccess
		.av_write               (msgdma_0_descriptor_slave_write),                                                                                                                                                                                                                                       //      avalon_anti_slave_0.write
		.av_writedata           (msgdma_0_descriptor_slave_writedata),                                                                                                                                                                                                                                   //                         .writedata
		.av_byteenable          (msgdma_0_descriptor_slave_byteenable),                                                                                                                                                                                                                                  //                         .byteenable
		.av_waitrequest         (msgdma_0_descriptor_slave_waitrequest),                                                                                                                                                                                                                                 //                         .waitrequest
		.av_address             (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdata            (256'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameter_sys_parameter_rx_ram_s1_translator (
		.clk                    (altpll_sys_c0_clk),                                        //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (parameter_sys_parameter_rx_ram_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (parameter_sys_parameter_rx_ram_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (parameter_sys_parameter_rx_ram_s1_agent_m0_read),          //                         .read
		.uav_write              (parameter_sys_parameter_rx_ram_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (parameter_sys_parameter_rx_ram_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (parameter_sys_parameter_rx_ram_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (parameter_sys_parameter_rx_ram_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (parameter_sys_parameter_rx_ram_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (parameter_sys_parameter_rx_ram_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (parameter_sys_parameter_rx_ram_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (parameter_sys_parameter_rx_ram_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Parameter_SYS_parameter_rx_ram_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Parameter_SYS_parameter_rx_ram_s1_write),                  //                         .write
		.av_readdata            (Parameter_SYS_parameter_rx_ram_s1_readdata),               //                         .readdata
		.av_writedata           (Parameter_SYS_parameter_rx_ram_s1_writedata),              //                         .writedata
		.av_byteenable          (Parameter_SYS_parameter_rx_ram_s1_byteenable),             //                         .byteenable
		.av_chipselect          (Parameter_SYS_parameter_rx_ram_s1_chipselect),             //                         .chipselect
		.av_clken               (Parameter_SYS_parameter_rx_ram_s1_clken),                  //                         .clken
		.av_read                (),                                                         //              (terminated)
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameter_sys_parameter_tx_ram_s1_translator (
		.clk                    (altpll_sys_c0_clk),                                        //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (parameter_sys_parameter_tx_ram_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (parameter_sys_parameter_tx_ram_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (parameter_sys_parameter_tx_ram_s1_agent_m0_read),          //                         .read
		.uav_write              (parameter_sys_parameter_tx_ram_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (parameter_sys_parameter_tx_ram_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (parameter_sys_parameter_tx_ram_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (parameter_sys_parameter_tx_ram_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (parameter_sys_parameter_tx_ram_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (parameter_sys_parameter_tx_ram_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (parameter_sys_parameter_tx_ram_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (parameter_sys_parameter_tx_ram_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Parameter_SYS_parameter_tx_ram_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (Parameter_SYS_parameter_tx_ram_s1_write),                  //                         .write
		.av_readdata            (Parameter_SYS_parameter_tx_ram_s1_readdata),               //                         .readdata
		.av_writedata           (Parameter_SYS_parameter_tx_ram_s1_writedata),              //                         .writedata
		.av_byteenable          (Parameter_SYS_parameter_tx_ram_s1_byteenable),             //                         .byteenable
		.av_chipselect          (Parameter_SYS_parameter_tx_ram_s1_chipselect),             //                         .chipselect
		.av_clken               (Parameter_SYS_parameter_tx_ram_s1_clken),                  //                         .clken
		.av_read                (),                                                         //              (terminated)
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_sys_pll_slave_translator (
		.clk                    (clk_50_clk_clk),                                               //                      clk.clk
		.reset                  (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_sys_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_sys_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_sys_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_sys_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_sys_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_sys_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_sys_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_sys_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_sys_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_sys_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_sys_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (altpll_sys_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (altpll_sys_pll_slave_write),                                   //                         .write
		.av_read                (altpll_sys_pll_slave_read),                                    //                         .read
		.av_readdata            (altpll_sys_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (altpll_sys_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_clock_crossing_bridge_1_s0_translator (
		.clk                    (altpll_sys_c0_clk),                                    //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (mm_clock_crossing_bridge_1_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mm_clock_crossing_bridge_1_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mm_clock_crossing_bridge_1_s0_agent_m0_read),          //                         .read
		.uav_write              (mm_clock_crossing_bridge_1_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (mm_clock_crossing_bridge_1_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mm_clock_crossing_bridge_1_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mm_clock_crossing_bridge_1_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mm_clock_crossing_bridge_1_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mm_clock_crossing_bridge_1_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mm_clock_crossing_bridge_1_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mm_clock_crossing_bridge_1_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mm_clock_crossing_bridge_1_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (mm_clock_crossing_bridge_1_s0_write),                  //                         .write
		.av_read                (mm_clock_crossing_bridge_1_s0_read),                   //                         .read
		.av_readdata            (mm_clock_crossing_bridge_1_s0_readdata),               //                         .readdata
		.av_writedata           (mm_clock_crossing_bridge_1_s0_writedata),              //                         .writedata
		.av_burstcount          (mm_clock_crossing_bridge_1_s0_burstcount),             //                         .burstcount
		.av_byteenable          (mm_clock_crossing_bridge_1_s0_byteenable),             //                         .byteenable
		.av_readdatavalid       (mm_clock_crossing_bridge_1_s0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (mm_clock_crossing_bridge_1_s0_waitrequest),            //                         .waitrequest
		.av_debugaccess         (mm_clock_crossing_bridge_1_s0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) program_memory_s1_translator (
		.clk                    (altpll_sys_c0_clk),                            //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (program_memory_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (program_memory_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (program_memory_s1_agent_m0_read),              //                         .read
		.uav_write              (program_memory_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (program_memory_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (program_memory_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (program_memory_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (program_memory_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (program_memory_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (program_memory_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (program_memory_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (Program_Memory_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (Program_Memory_s1_write),                      //                         .write
		.av_readdata            (Program_Memory_s1_readdata),                   //                         .readdata
		.av_writedata           (Program_Memory_s1_writedata),                  //                         .writedata
		.av_byteenable          (Program_Memory_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (Program_Memory_s1_chipselect),                 //                         .chipselect
		.av_clken               (Program_Memory_s1_clken),                      //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) data_memory_s1_translator (
		.clk                    (altpll_sys_c0_clk),                            //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (data_memory_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (data_memory_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (data_memory_s1_agent_m0_read),                 //                         .read
		.uav_write              (data_memory_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (data_memory_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (data_memory_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (data_memory_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (data_memory_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (data_memory_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (data_memory_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (data_memory_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (Data_Memory_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (Data_Memory_s1_write),                         //                         .write
		.av_readdata            (Data_Memory_s1_readdata),                      //                         .readdata
		.av_writedata           (Data_Memory_s1_writedata),                     //                         .writedata
		.av_byteenable          (Data_Memory_s1_byteenable),                    //                         .byteenable
		.av_chipselect          (Data_Memory_s1_chipselect),                    //                         .chipselect
		.av_clken               (Data_Memory_s1_clken),                         //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) usb_data_sys_usb_rx_ram_s1_translator (
		.clk                    (altpll_sys_c0_clk),                                 //                      clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (usb_data_sys_usb_rx_ram_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (usb_data_sys_usb_rx_ram_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (usb_data_sys_usb_rx_ram_s1_agent_m0_read),          //                         .read
		.uav_write              (usb_data_sys_usb_rx_ram_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (usb_data_sys_usb_rx_ram_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (usb_data_sys_usb_rx_ram_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (usb_data_sys_usb_rx_ram_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (usb_data_sys_usb_rx_ram_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (usb_data_sys_usb_rx_ram_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (usb_data_sys_usb_rx_ram_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (usb_data_sys_usb_rx_ram_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (USB_Data_SYS_usb_rx_ram_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (USB_Data_SYS_usb_rx_ram_s1_write),                  //                         .write
		.av_readdata            (USB_Data_SYS_usb_rx_ram_s1_readdata),               //                         .readdata
		.av_writedata           (USB_Data_SYS_usb_rx_ram_s1_writedata),              //                         .writedata
		.av_byteenable          (USB_Data_SYS_usb_rx_ram_s1_byteenable),             //                         .byteenable
		.av_chipselect          (USB_Data_SYS_usb_rx_ram_s1_chipselect),             //                         .chipselect
		.av_clken               (USB_Data_SYS_usb_rx_ram_s1_clken),                  //                         .clken
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_data_master_agent (
		.clk                   (altpll_sys_c0_clk),                                                         //       clk.clk
		.reset                 (nios2_gen2_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                         //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) msgdma_0_mm_read_agent (
		.clk                   (altpll_sys_c0_clk),                                                   //       clk.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (msgdma_0_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (msgdma_0_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (msgdma_0_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (msgdma_0_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (msgdma_0_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (msgdma_0_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (msgdma_0_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (msgdma_0_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (msgdma_0_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (msgdma_0_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (msgdma_0_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (msgdma_0_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (msgdma_0_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (msgdma_0_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (msgdma_0_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (msgdma_0_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (msgdma_0_mm_read_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (msgdma_0_mm_read_limiter_rsp_src_data),                               //          .data
		.rp_channel            (msgdma_0_mm_read_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (msgdma_0_mm_read_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (msgdma_0_mm_read_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (msgdma_0_mm_read_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) msgdma_0_mm_write_agent (
		.clk                   (altpll_sys_c0_clk),                                                    //       clk.clk
		.reset                 (msgdma_0_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (msgdma_0_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (msgdma_0_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (msgdma_0_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (msgdma_0_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (msgdma_0_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (msgdma_0_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (msgdma_0_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (msgdma_0_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (msgdma_0_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (msgdma_0_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (msgdma_0_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (msgdma_0_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (msgdma_0_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (msgdma_0_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (msgdma_0_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (msgdma_0_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_instruction_master_agent (
		.clk                   (altpll_sys_c0_clk),                                                                //       clk.clk
		.reset                 (nios2_gen2_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_0_csr_agent (
		.clk                     (altpll_sys_c0_clk),                             //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (msgdma_0_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (msgdma_0_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (msgdma_0_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (msgdma_0_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (msgdma_0_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (msgdma_0_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (msgdma_0_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (msgdma_0_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (msgdma_0_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (msgdma_0_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (msgdma_0_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (msgdma_0_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (msgdma_0_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (msgdma_0_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (msgdma_0_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (msgdma_0_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                           //                .channel
		.rf_sink_ready           (msgdma_0_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (msgdma_0_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (msgdma_0_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (msgdma_0_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (msgdma_0_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (msgdma_0_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (msgdma_0_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (msgdma_0_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (msgdma_0_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (msgdma_0_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (msgdma_0_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_0_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (msgdma_0_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_csr_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                             //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (msgdma_0_csr_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_0_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_0_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_0_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_0_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_0_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_0_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_0_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_0_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_0_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vic_0_csr_access_agent (
		.clk                     (altpll_sys_c0_clk),                                 //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (vic_0_csr_access_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vic_0_csr_access_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vic_0_csr_access_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vic_0_csr_access_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vic_0_csr_access_agent_m0_lock),                    //                .lock
		.m0_readdata             (vic_0_csr_access_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vic_0_csr_access_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vic_0_csr_access_agent_m0_read),                    //                .read
		.m0_waitrequest          (vic_0_csr_access_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vic_0_csr_access_agent_m0_writedata),               //                .writedata
		.m0_write                (vic_0_csr_access_agent_m0_write),                   //                .write
		.rp_endofpacket          (vic_0_csr_access_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vic_0_csr_access_agent_rp_ready),                   //                .ready
		.rp_valid                (vic_0_csr_access_agent_rp_valid),                   //                .valid
		.rp_data                 (vic_0_csr_access_agent_rp_data),                    //                .data
		.rp_startofpacket        (vic_0_csr_access_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_001_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                           //                .channel
		.rf_sink_ready           (vic_0_csr_access_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vic_0_csr_access_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vic_0_csr_access_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vic_0_csr_access_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vic_0_csr_access_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vic_0_csr_access_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vic_0_csr_access_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vic_0_csr_access_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vic_0_csr_access_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vic_0_csr_access_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (vic_0_csr_access_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vic_0_csr_access_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vic_0_csr_access_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vic_0_csr_access_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                                 //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (vic_0_csr_access_agent_rf_source_data),             //        in.data
		.in_valid          (vic_0_csr_access_agent_rf_source_valid),            //          .valid
		.in_ready          (vic_0_csr_access_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vic_0_csr_access_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vic_0_csr_access_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vic_0_csr_access_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vic_0_csr_access_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vic_0_csr_access_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vic_0_csr_access_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vic_0_csr_access_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_debug_mem_slave_agent (
		.clk                     (altpll_sys_c0_clk),                                           //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                     //                .channel
		.rf_sink_ready           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_debug_mem_slave_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                                           //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (358),
		.PKT_ORI_BURST_SIZE_L      (356),
		.PKT_RESPONSE_STATUS_H     (355),
		.PKT_RESPONSE_STATUS_L     (354),
		.PKT_BURST_SIZE_H          (331),
		.PKT_BURST_SIZE_L          (329),
		.PKT_TRANS_LOCK            (318),
		.PKT_BEGIN_BURST           (336),
		.PKT_PROTECTION_H          (349),
		.PKT_PROTECTION_L          (347),
		.PKT_BURSTWRAP_H           (328),
		.PKT_BURSTWRAP_L           (326),
		.PKT_BYTE_CNT_H            (325),
		.PKT_BYTE_CNT_L            (320),
		.PKT_ADDR_H                (313),
		.PKT_ADDR_L                (288),
		.PKT_TRANS_COMPRESSED_READ (314),
		.PKT_TRANS_POSTED          (315),
		.PKT_TRANS_WRITE           (316),
		.PKT_TRANS_READ            (317),
		.PKT_DATA_H                (255),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (287),
		.PKT_BYTEEN_L              (256),
		.PKT_SRC_ID_H              (341),
		.PKT_SRC_ID_L              (338),
		.PKT_DEST_ID_H             (345),
		.PKT_DEST_ID_L             (342),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (359),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_0_descriptor_slave_agent (
		.clk                     (altpll_sys_c0_clk),                                             //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (msgdma_0_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (msgdma_0_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (msgdma_0_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (msgdma_0_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (msgdma_0_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (msgdma_0_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (msgdma_0_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (msgdma_0_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (msgdma_0_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (msgdma_0_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (msgdma_0_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (msgdma_0_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (msgdma_0_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (msgdma_0_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (msgdma_0_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (msgdma_0_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (msgdma_0_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (msgdma_0_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (msgdma_0_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (msgdma_0_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (msgdma_0_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (msgdma_0_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (msgdma_0_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (360),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_descriptor_slave_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                                          //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (msgdma_0_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_0_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_0_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_0_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_0_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_0_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameter_sys_parameter_rx_ram_s1_agent (
		.clk                     (altpll_sys_c0_clk),                                                  //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (parameter_sys_parameter_rx_ram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (parameter_sys_parameter_rx_ram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (parameter_sys_parameter_rx_ram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (parameter_sys_parameter_rx_ram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (parameter_sys_parameter_rx_ram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (parameter_sys_parameter_rx_ram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (parameter_sys_parameter_rx_ram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (parameter_sys_parameter_rx_ram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (parameter_sys_parameter_rx_ram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (parameter_sys_parameter_rx_ram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (parameter_sys_parameter_rx_ram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (parameter_sys_parameter_rx_ram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (parameter_sys_parameter_rx_ram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (parameter_sys_parameter_rx_ram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (parameter_sys_parameter_rx_ram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (parameter_sys_parameter_rx_ram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                            //                .channel
		.rf_sink_ready           (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (parameter_sys_parameter_rx_ram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (parameter_sys_parameter_rx_ram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (parameter_sys_parameter_rx_ram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (parameter_sys_parameter_rx_ram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (parameter_sys_parameter_rx_ram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (parameter_sys_parameter_rx_ram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameter_sys_parameter_rx_ram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (parameter_sys_parameter_rx_ram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                                                  //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (parameter_sys_parameter_rx_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (parameter_sys_parameter_rx_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (parameter_sys_parameter_rx_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parameter_sys_parameter_rx_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parameter_sys_parameter_rx_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parameter_sys_parameter_rx_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameter_sys_parameter_tx_ram_s1_agent (
		.clk                     (altpll_sys_c0_clk),                                                  //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (parameter_sys_parameter_tx_ram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (parameter_sys_parameter_tx_ram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (parameter_sys_parameter_tx_ram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (parameter_sys_parameter_tx_ram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (parameter_sys_parameter_tx_ram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (parameter_sys_parameter_tx_ram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (parameter_sys_parameter_tx_ram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (parameter_sys_parameter_tx_ram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (parameter_sys_parameter_tx_ram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (parameter_sys_parameter_tx_ram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (parameter_sys_parameter_tx_ram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (parameter_sys_parameter_tx_ram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (parameter_sys_parameter_tx_ram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (parameter_sys_parameter_tx_ram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (parameter_sys_parameter_tx_ram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (parameter_sys_parameter_tx_ram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                            //                .channel
		.rf_sink_ready           (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (parameter_sys_parameter_tx_ram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (parameter_sys_parameter_tx_ram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (parameter_sys_parameter_tx_ram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (parameter_sys_parameter_tx_ram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (parameter_sys_parameter_tx_ram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (parameter_sys_parameter_tx_ram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameter_sys_parameter_tx_ram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (parameter_sys_parameter_tx_ram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                                                  //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (parameter_sys_parameter_tx_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (parameter_sys_parameter_tx_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (parameter_sys_parameter_tx_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parameter_sys_parameter_tx_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parameter_sys_parameter_tx_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parameter_sys_parameter_tx_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_sys_pll_slave_agent (
		.clk                     (clk_50_clk_clk),                                               //             clk.clk
		.reset                   (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_sys_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_sys_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_sys_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_sys_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_sys_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_sys_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_sys_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_sys_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_sys_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_sys_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_sys_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_sys_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_sys_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_sys_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_sys_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_sys_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                      //                .channel
		.rf_sink_ready           (altpll_sys_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_sys_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_sys_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_sys_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_sys_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_sys_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_sys_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_sys_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_sys_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_sys_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (altpll_sys_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_sys_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_sys_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_sys_pll_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                               //       clk.clk
		.reset             (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_sys_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_sys_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_sys_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_sys_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_sys_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_sys_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_sys_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_sys_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_sys_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_sys_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_sys_pll_slave_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                               //       clk.clk
		.reset             (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_sys_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (altpll_sys_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (altpll_sys_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (altpll_sys_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (altpll_sys_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (altpll_sys_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mm_clock_crossing_bridge_1_s0_agent (
		.clk                     (altpll_sys_c0_clk),                                              //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (mm_clock_crossing_bridge_1_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mm_clock_crossing_bridge_1_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mm_clock_crossing_bridge_1_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mm_clock_crossing_bridge_1_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mm_clock_crossing_bridge_1_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (mm_clock_crossing_bridge_1_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mm_clock_crossing_bridge_1_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mm_clock_crossing_bridge_1_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (mm_clock_crossing_bridge_1_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mm_clock_crossing_bridge_1_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (mm_clock_crossing_bridge_1_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (mm_clock_crossing_bridge_1_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mm_clock_crossing_bridge_1_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (mm_clock_crossing_bridge_1_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (mm_clock_crossing_bridge_1_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (mm_clock_crossing_bridge_1_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                        //                .channel
		.rf_sink_ready           (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mm_clock_crossing_bridge_1_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mm_clock_crossing_bridge_1_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mm_clock_crossing_bridge_1_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mm_clock_crossing_bridge_1_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mm_clock_crossing_bridge_1_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_clock_crossing_bridge_1_s0_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                                              //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (mm_clock_crossing_bridge_1_s0_agent_rf_source_data),             //        in.data
		.in_valid          (mm_clock_crossing_bridge_1_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_clock_crossing_bridge_1_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_clock_crossing_bridge_1_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_clock_crossing_bridge_1_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_clock_crossing_bridge_1_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) program_memory_s1_agent (
		.clk                     (altpll_sys_c0_clk),                                  //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (program_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (program_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (program_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (program_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (program_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (program_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (program_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (program_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (program_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (program_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (program_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (program_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (program_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (program_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (program_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (program_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_008_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                            //                .channel
		.rf_sink_ready           (program_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (program_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (program_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (program_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (program_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (program_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (program_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (program_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (program_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (program_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (program_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (program_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (program_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) program_memory_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                                  //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (program_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (program_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (program_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (program_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (program_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (program_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (program_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (program_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (program_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (program_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) data_memory_s1_agent (
		.clk                     (altpll_sys_c0_clk),                               //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (data_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (data_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (data_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (data_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (data_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (data_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (data_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (data_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (data_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (data_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (data_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (data_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (data_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (data_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (data_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (data_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                         //                .channel
		.rf_sink_ready           (data_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (data_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (data_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (data_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (data_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (data_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (data_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (data_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (data_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (data_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),               //                .error
		.rdata_fifo_src_ready    (data_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (data_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (data_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) data_memory_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                               //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (data_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (data_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (data_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (data_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (data_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (data_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (data_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (data_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (data_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (data_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) usb_data_sys_usb_rx_ram_s1_agent (
		.clk                     (altpll_sys_c0_clk),                                           //             clk.clk
		.reset                   (msgdma_0_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (usb_data_sys_usb_rx_ram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (usb_data_sys_usb_rx_ram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (usb_data_sys_usb_rx_ram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (usb_data_sys_usb_rx_ram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (usb_data_sys_usb_rx_ram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (usb_data_sys_usb_rx_ram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (usb_data_sys_usb_rx_ram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (usb_data_sys_usb_rx_ram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (usb_data_sys_usb_rx_ram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (usb_data_sys_usb_rx_ram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (usb_data_sys_usb_rx_ram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (usb_data_sys_usb_rx_ram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (usb_data_sys_usb_rx_ram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (usb_data_sys_usb_rx_ram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (usb_data_sys_usb_rx_ram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (usb_data_sys_usb_rx_ram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                     //                .channel
		.rf_sink_ready           (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (usb_data_sys_usb_rx_ram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (usb_data_sys_usb_rx_ram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (usb_data_sys_usb_rx_ram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (usb_data_sys_usb_rx_ram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (usb_data_sys_usb_rx_ram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (usb_data_sys_usb_rx_ram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (usb_data_sys_usb_rx_ram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (usb_data_sys_usb_rx_ram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo (
		.clk               (altpll_sys_c0_clk),                                           //       clk.clk
		.reset             (msgdma_0_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (usb_data_sys_usb_rx_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (usb_data_sys_usb_rx_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (usb_data_sys_usb_rx_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (usb_data_sys_usb_rx_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (usb_data_sys_usb_rx_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (usb_data_sys_usb_rx_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_sys_c0_clk),                             //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (msgdma_0_mm_read_agent_cp_ready),              //      sink.ready
		.sink_valid         (msgdma_0_mm_read_agent_cp_valid),              //          .valid
		.sink_data          (msgdma_0_mm_read_agent_cp_data),               //          .data
		.sink_startofpacket (msgdma_0_mm_read_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (msgdma_0_mm_read_agent_cp_endofpacket),        //          .endofpacket
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                         //       src.ready
		.src_valid          (router_001_src_valid),                         //          .valid
		.src_data           (router_001_src_data),                          //          .data
		.src_channel        (router_001_src_channel),                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (msgdma_0_mm_write_agent_cp_ready),             //      sink.ready
		.sink_valid         (msgdma_0_mm_write_agent_cp_valid),             //          .valid
		.sink_data          (msgdma_0_mm_write_agent_cp_data),              //          .data
		.sink_startofpacket (msgdma_0_mm_write_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (msgdma_0_mm_write_agent_cp_endofpacket),       //          .endofpacket
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (nios2_gen2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_sys_c0_clk),                                    //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                                 //       src.ready
		.src_valid          (router_003_src_valid),                                 //          .valid
		.src_data           (router_003_src_data),                                  //          .data
		.src_channel        (router_003_src_channel),                               //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                            //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (msgdma_0_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (msgdma_0_csr_agent_rp_valid),                  //          .valid
		.sink_data          (msgdma_0_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (msgdma_0_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (msgdma_0_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                         //       src.ready
		.src_valid          (router_004_src_valid),                         //          .valid
		.src_data           (router_004_src_data),                          //          .data
		.src_channel        (router_004_src_channel),                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (vic_0_csr_access_agent_rp_ready),              //      sink.ready
		.sink_valid         (vic_0_csr_access_agent_rp_valid),              //          .valid
		.sink_data          (vic_0_csr_access_agent_rp_data),               //          .data
		.sink_startofpacket (vic_0_csr_access_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (vic_0_csr_access_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                         //       src.ready
		.src_valid          (router_005_src_valid),                         //          .valid
		.src_data           (router_005_src_data),                          //          .data
		.src_channel        (router_005_src_channel),                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (nios2_gen2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_sys_c0_clk),                                 //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_006_src_ready),                              //       src.ready
		.src_valid          (router_006_src_valid),                              //          .valid
		.src_data           (router_006_src_data),                               //          .data
		.src_channel        (router_006_src_channel),                            //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                         //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (msgdma_0_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (msgdma_0_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (msgdma_0_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (msgdma_0_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_0_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_sys_c0_clk),                                //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (parameter_sys_parameter_rx_ram_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (parameter_sys_parameter_rx_ram_s1_agent_rp_valid),         //          .valid
		.sink_data          (parameter_sys_parameter_rx_ram_s1_agent_rp_data),          //          .data
		.sink_startofpacket (parameter_sys_parameter_rx_ram_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (parameter_sys_parameter_rx_ram_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_sys_c0_clk),                                        //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_008_src_ready),                                     //       src.ready
		.src_valid          (router_008_src_valid),                                     //          .valid
		.src_data           (router_008_src_data),                                      //          .data
		.src_channel        (router_008_src_channel),                                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_008 router_009 (
		.sink_ready         (parameter_sys_parameter_tx_ram_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (parameter_sys_parameter_tx_ram_s1_agent_rp_valid),         //          .valid
		.sink_data          (parameter_sys_parameter_tx_ram_s1_agent_rp_data),          //          .data
		.sink_startofpacket (parameter_sys_parameter_tx_ram_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (parameter_sys_parameter_tx_ram_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_sys_c0_clk),                                        //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_009_src_ready),                                     //       src.ready
		.src_valid          (router_009_src_valid),                                     //          .valid
		.src_data           (router_009_src_data),                                      //          .data
		.src_channel        (router_009_src_channel),                                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_004 router_010 (
		.sink_ready         (altpll_sys_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_sys_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_sys_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_sys_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_sys_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_50_clk_clk),                                               //       clk.clk
		.reset              (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                         //       src.ready
		.src_valid          (router_010_src_valid),                                         //          .valid
		.src_data           (router_010_src_data),                                          //          .data
		.src_channel        (router_010_src_channel),                                       //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_004 router_011 (
		.sink_ready         (mm_clock_crossing_bridge_1_s0_agent_rp_ready),         //      sink.ready
		.sink_valid         (mm_clock_crossing_bridge_1_s0_agent_rp_valid),         //          .valid
		.sink_data          (mm_clock_crossing_bridge_1_s0_agent_rp_data),          //          .data
		.sink_startofpacket (mm_clock_crossing_bridge_1_s0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_1_s0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_sys_c0_clk),                                    //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_011_src_ready),                                 //       src.ready
		.src_valid          (router_011_src_valid),                                 //          .valid
		.src_data           (router_011_src_data),                                  //          .data
		.src_channel        (router_011_src_channel),                               //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                            //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_006 router_012 (
		.sink_ready         (program_memory_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (program_memory_s1_agent_rp_valid),             //          .valid
		.sink_data          (program_memory_s1_agent_rp_data),              //          .data
		.sink_startofpacket (program_memory_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (program_memory_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                         //       src.ready
		.src_valid          (router_012_src_valid),                         //          .valid
		.src_data           (router_012_src_data),                          //          .data
		.src_channel        (router_012_src_channel),                       //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_008 router_013 (
		.sink_ready         (data_memory_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (data_memory_s1_agent_rp_valid),                //          .valid
		.sink_data          (data_memory_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (data_memory_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (data_memory_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                         //       src.ready
		.src_valid          (router_013_src_valid),                         //          .valid
		.src_data           (router_013_src_data),                          //          .data
		.src_channel        (router_013_src_channel),                       //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_router_008 router_014 (
		.sink_ready         (usb_data_sys_usb_rx_ram_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (usb_data_sys_usb_rx_ram_s1_agent_rp_valid),         //          .valid
		.sink_data          (usb_data_sys_usb_rx_ram_s1_agent_rp_data),          //          .data
		.sink_startofpacket (usb_data_sys_usb_rx_ram_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (usb_data_sys_usb_rx_ram_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_sys_c0_clk),                                 //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_014_src_ready),                              //       src.ready
		.src_valid          (router_014_src_valid),                              //          .valid
		.src_data           (router_014_src_data),                               //          .data
		.src_channel        (router_014_src_channel),                            //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) msgdma_0_mm_read_limiter (
		.clk                    (altpll_sys_c0_clk),                              //       clk.clk
		.reset                  (msgdma_0_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                           //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                           //          .valid
		.cmd_sink_data          (router_001_src_data),                            //          .data
		.cmd_sink_channel       (router_001_src_channel),                         //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.cmd_src_ready          (msgdma_0_mm_read_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (msgdma_0_mm_read_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (msgdma_0_mm_read_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (msgdma_0_mm_read_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (msgdma_0_mm_read_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                          //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                          //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                        //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                           //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.rsp_src_ready          (msgdma_0_mm_read_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (msgdma_0_mm_read_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (msgdma_0_mm_read_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (msgdma_0_mm_read_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (msgdma_0_mm_read_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (msgdma_0_mm_read_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (msgdma_0_mm_read_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_instruction_master_limiter (
		.clk                    (altpll_sys_c0_clk),                                           //       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                        //          .valid
		.cmd_sink_data          (router_003_src_data),                                         //          .data
		.cmd_sink_channel       (router_003_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (nios2_gen2_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (nios2_gen2_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                             //      sink.ready
		.sink_channel        (router_src_channel),                           //          .channel
		.sink_data           (router_src_data),                              //          .data
		.sink_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                       //          .endofpacket
		.sink_valid          (router_src_valid),                             //          .valid
		.src0_ready          (cmd_demux_src0_ready),                         //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                         //          .valid
		.src0_data           (cmd_demux_src0_data),                          //          .data
		.src0_channel        (cmd_demux_src0_channel),                       //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                         //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                         //          .valid
		.src1_data           (cmd_demux_src1_data),                          //          .data
		.src1_channel        (cmd_demux_src1_channel),                       //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                   //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                         //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                         //          .valid
		.src2_data           (cmd_demux_src2_data),                          //          .data
		.src2_channel        (cmd_demux_src2_channel),                       //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                   //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                         //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                         //          .valid
		.src3_data           (cmd_demux_src3_data),                          //          .data
		.src3_channel        (cmd_demux_src3_channel),                       //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                   //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                         //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                         //          .valid
		.src4_data           (cmd_demux_src4_data),                          //          .data
		.src4_channel        (cmd_demux_src4_channel),                       //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                 //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                   //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                         //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                         //          .valid
		.src5_data           (cmd_demux_src5_data),                          //          .data
		.src5_channel        (cmd_demux_src5_channel),                       //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                 //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                   //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                         //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                         //          .valid
		.src6_data           (cmd_demux_src6_data),                          //          .data
		.src6_channel        (cmd_demux_src6_channel),                       //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                 //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                   //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                         //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                         //          .valid
		.src7_data           (cmd_demux_src7_data),                          //          .data
		.src7_channel        (cmd_demux_src7_channel),                       //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                 //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                   //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                         //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                         //          .valid
		.src8_data           (cmd_demux_src8_data),                          //          .data
		.src8_channel        (cmd_demux_src8_channel),                       //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                 //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                   //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                         //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                         //          .valid
		.src9_data           (cmd_demux_src9_data),                          //          .data
		.src9_channel        (cmd_demux_src9_channel),                       //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                 //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                   //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                        //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                        //          .valid
		.src10_data          (cmd_demux_src10_data),                         //          .data
		.src10_channel       (cmd_demux_src10_channel),                      //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket)                   //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (altpll_sys_c0_clk),                              //        clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),   //  clk_reset.reset
		.sink_ready         (msgdma_0_mm_read_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (msgdma_0_mm_read_limiter_cmd_src_channel),       //           .channel
		.sink_data          (msgdma_0_mm_read_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (msgdma_0_mm_read_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (msgdma_0_mm_read_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (msgdma_0_mm_read_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                       //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //           .valid
		.src0_data          (cmd_demux_001_src0_data),                        //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                 //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                       //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                       //           .valid
		.src1_data          (cmd_demux_001_src1_data),                        //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                     //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),               //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                 //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                       //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                       //           .valid
		.src2_data          (cmd_demux_001_src2_data),                        //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                     //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),               //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                 //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                       //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                       //           .valid
		.src3_data          (cmd_demux_001_src3_data),                        //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                     //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),               //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                  //           .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                     //          .valid
		.src0_data          (cmd_demux_002_src0_data),                      //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),               //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                     //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                     //          .valid
		.src1_data          (cmd_demux_002_src1_data),                      //          .data
		.src1_channel       (cmd_demux_002_src1_channel),                   //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),               //          .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                     //      src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                     //          .valid
		.src2_data          (cmd_demux_002_src2_data),                      //          .data
		.src2_channel       (cmd_demux_002_src2_channel),                   //          .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),               //          .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                     //      src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                     //          .valid
		.src3_data          (cmd_demux_002_src3_data),                      //          .data
		.src3_channel       (cmd_demux_002_src3_channel),                   //          .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),             //          .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (altpll_sys_c0_clk),                                           //        clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_gen2_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_gen2_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_gen2_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_gen2_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_gen2_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_gen2_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                    //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                    //           .valid
		.src0_data          (cmd_demux_003_src0_data),                                     //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                                  //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                              //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                    //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                    //           .valid
		.src1_data          (cmd_demux_003_src1_data),                                     //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                                  //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                               //           .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //          .valid
		.src_data            (cmd_mux_001_src_data),                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                       //          .channel
		.sink0_data          (cmd_demux_src1_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                       //          .channel
		.sink0_data          (cmd_demux_src2_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                       //          .channel
		.sink0_data          (cmd_demux_src3_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                        //          .valid
		.src_data            (cmd_mux_004_src_data),                         //          .data
		.src_channel         (cmd_mux_004_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                       //          .channel
		.sink0_data          (cmd_demux_src4_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux_004 cmd_mux_005 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                        //          .valid
		.src_data            (cmd_mux_005_src_data),                         //          .data
		.src_channel         (cmd_mux_005_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                       //          .channel
		.sink0_data          (cmd_demux_src5_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_50_clk_clk),                                               //       clk.clk
		.reset               (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                        //          .valid
		.src_data            (cmd_mux_006_src_data),                                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                            //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                            //          .valid
		.sink0_channel       (crosser_out_channel),                                          //          .channel
		.sink0_data          (crosser_out_data),                                             //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                        //          .valid
		.src_data            (cmd_mux_007_src_data),                         //          .data
		.src_channel         (cmd_mux_007_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                       //          .channel
		.sink0_data          (cmd_demux_src7_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux_002 cmd_mux_008 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                        //          .valid
		.src_data            (cmd_mux_008_src_data),                         //          .data
		.src_channel         (cmd_mux_008_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                       //          .channel
		.sink0_data          (cmd_demux_src8_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                     //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                   //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                      //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux_004 cmd_mux_009 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                        //          .valid
		.src_data            (cmd_mux_009_src_data),                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                       //          .channel
		.sink0_data          (cmd_demux_src9_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src2_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src2_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src2_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src2_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src2_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src2_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_cmd_mux_004 cmd_mux_010 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                        //          .valid
		.src_data            (cmd_mux_010_src_data),                         //          .data
		.src_channel         (cmd_mux_010_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                      //          .channel
		.sink0_data          (cmd_demux_src10_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src3_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src3_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src3_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src3_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src3_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src3_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                         //      sink.ready
		.sink_channel       (router_004_src_channel),                       //          .channel
		.sink_data          (router_004_src_data),                          //          .data
		.sink_startofpacket (router_004_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_004_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                    //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                         //      sink.ready
		.sink_channel       (router_005_src_channel),                       //          .channel
		.sink_data          (router_005_src_data),                          //          .data
		.sink_startofpacket (router_005_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_005_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                         //      sink.ready
		.sink_channel       (router_006_src_channel),                       //          .channel
		.sink_data          (router_006_src_data),                          //          .data
		.sink_startofpacket (router_006_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_006_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_002_src0_data),                      //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_002_src1_data),                      //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (altpll_sys_c0_clk),                                             //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (msgdma_0_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (msgdma_0_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (msgdma_0_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (msgdma_0_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_0_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (msgdma_0_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                 //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                         //      sink.ready
		.sink_channel       (router_008_src_channel),                       //          .channel
		.sink_data          (router_008_src_data),                          //          .data
		.sink_startofpacket (router_008_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_008_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_004_src0_data),                      //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_004_src1_data),                      //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),               //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                     //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                     //          .valid
		.src2_data          (rsp_demux_004_src2_data),                      //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                   //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux_004 rsp_demux_005 (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                         //      sink.ready
		.sink_channel       (router_009_src_channel),                       //          .channel
		.sink_data          (router_009_src_data),                          //          .data
		.sink_startofpacket (router_009_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_009_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_005_src1_data),                      //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),               //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                     //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                     //          .valid
		.src2_data          (rsp_demux_005_src2_data),                      //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                   //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (clk_50_clk_clk),                                               //       clk.clk
		.reset              (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                         //      sink.ready
		.sink_channel       (router_010_src_channel),                                       //          .channel
		.sink_data          (router_010_src_data),                                          //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_010_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                         //      sink.ready
		.sink_channel       (router_011_src_channel),                       //          .channel
		.sink_data          (router_011_src_data),                          //          .data
		.sink_startofpacket (router_011_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_011_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_007_src0_data),                      //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux_002 rsp_demux_008 (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                         //      sink.ready
		.sink_channel       (router_012_src_channel),                       //          .channel
		.sink_data          (router_012_src_data),                          //          .data
		.sink_startofpacket (router_012_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_012_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_008_src0_data),                      //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_008_src1_data),                      //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux_004 rsp_demux_009 (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                         //      sink.ready
		.sink_channel       (router_013_src_channel),                       //          .channel
		.sink_data          (router_013_src_data),                          //          .data
		.sink_startofpacket (router_013_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_013_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_009_src0_data),                      //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_009_src1_data),                      //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),               //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                     //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                     //          .valid
		.src2_data          (rsp_demux_009_src2_data),                      //          .data
		.src2_channel       (rsp_demux_009_src2_channel),                   //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_demux_004 rsp_demux_010 (
		.clk                (altpll_sys_c0_clk),                            //       clk.clk
		.reset              (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                         //      sink.ready
		.sink_channel       (router_014_src_channel),                       //          .channel
		.sink_data          (router_014_src_data),                          //          .data
		.sink_startofpacket (router_014_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_014_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_010_src0_data),                      //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_010_src1_data),                      //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),               //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                     //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                     //          .valid
		.src2_data          (rsp_demux_010_src2_data),                      //          .data
		.src2_channel       (rsp_demux_010_src2_channel),                   //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (altpll_sys_c0_clk),                            //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                            //       src.ready
		.src_valid            (rsp_mux_src_valid),                            //          .valid
		.src_data             (rsp_mux_src_data),                             //          .data
		.src_channel          (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                       //          .channel
		.sink0_data           (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                     //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                   //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                      //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                     //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                     //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                   //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                      //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                     //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                     //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                   //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                      //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),               //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                     //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                     //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                   //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                      //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                     //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                     //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                   //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                      //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.sink6_ready          (crosser_001_out_ready),                        //     sink6.ready
		.sink6_valid          (crosser_001_out_valid),                        //          .valid
		.sink6_channel        (crosser_001_out_channel),                      //          .channel
		.sink6_data           (crosser_001_out_data),                         //          .data
		.sink6_startofpacket  (crosser_001_out_startofpacket),                //          .startofpacket
		.sink6_endofpacket    (crosser_001_out_endofpacket),                  //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                     //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                     //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                   //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                      //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),             //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),               //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                     //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                     //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                   //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                      //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),               //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                     //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                     //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                   //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                      //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                     //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                      //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                        //          .valid
		.src_data            (rsp_mux_001_src_data),                         //          .data
		.src_channel         (rsp_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_004_src1_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_004_src1_valid),                     //          .valid
		.sink0_channel       (rsp_demux_004_src1_channel),                   //          .channel
		.sink0_data          (rsp_demux_004_src1_data),                      //          .data
		.sink0_startofpacket (rsp_demux_004_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src1_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_005_src1_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_005_src1_valid),                     //          .valid
		.sink1_channel       (rsp_demux_005_src1_channel),                   //          .channel
		.sink1_data          (rsp_demux_005_src1_data),                      //          .data
		.sink1_startofpacket (rsp_demux_005_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src1_endofpacket),               //          .endofpacket
		.sink2_ready         (rsp_demux_009_src1_ready),                     //     sink2.ready
		.sink2_valid         (rsp_demux_009_src1_valid),                     //          .valid
		.sink2_channel       (rsp_demux_009_src1_channel),                   //          .channel
		.sink2_data          (rsp_demux_009_src1_data),                      //          .data
		.sink2_startofpacket (rsp_demux_009_src1_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (rsp_demux_009_src1_endofpacket),               //          .endofpacket
		.sink3_ready         (rsp_demux_010_src1_ready),                     //     sink3.ready
		.sink3_valid         (rsp_demux_010_src1_valid),                     //          .valid
		.sink3_channel       (rsp_demux_010_src1_channel),                   //          .channel
		.sink3_data          (rsp_demux_010_src1_data),                      //          .data
		.sink3_startofpacket (rsp_demux_010_src1_startofpacket),             //          .startofpacket
		.sink3_endofpacket   (rsp_demux_010_src1_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (msgdma_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                        //          .valid
		.src_data            (rsp_mux_002_src_data),                         //          .data
		.src_channel         (rsp_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_004_src2_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_004_src2_valid),                     //          .valid
		.sink0_channel       (rsp_demux_004_src2_channel),                   //          .channel
		.sink0_data          (rsp_demux_004_src2_data),                      //          .data
		.sink0_startofpacket (rsp_demux_004_src2_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src2_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_005_src2_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_005_src2_valid),                     //          .valid
		.sink1_channel       (rsp_demux_005_src2_channel),                   //          .channel
		.sink1_data          (rsp_demux_005_src2_data),                      //          .data
		.sink1_startofpacket (rsp_demux_005_src2_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src2_endofpacket),               //          .endofpacket
		.sink2_ready         (rsp_demux_009_src2_ready),                     //     sink2.ready
		.sink2_valid         (rsp_demux_009_src2_valid),                     //          .valid
		.sink2_channel       (rsp_demux_009_src2_channel),                   //          .channel
		.sink2_data          (rsp_demux_009_src2_data),                      //          .data
		.sink2_startofpacket (rsp_demux_009_src2_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (rsp_demux_009_src2_endofpacket),               //          .endofpacket
		.sink3_ready         (rsp_demux_010_src2_ready),                     //     sink3.ready
		.sink3_valid         (rsp_demux_010_src2_valid),                     //          .valid
		.sink3_channel       (rsp_demux_010_src2_channel),                   //          .channel
		.sink3_data          (rsp_demux_010_src2_data),                      //          .data
		.sink3_startofpacket (rsp_demux_010_src2_startofpacket),             //          .startofpacket
		.sink3_endofpacket   (rsp_demux_010_src2_endofpacket)                //          .endofpacket
	);

	Mk8_InlineController_CPU_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (altpll_sys_c0_clk),                            //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                        //          .valid
		.src_data            (rsp_mux_003_src_data),                         //          .data
		.src_channel         (rsp_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),                     //          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),                   //          .channel
		.sink0_data          (rsp_demux_002_src1_data),                      //          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_008_src1_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_008_src1_valid),                     //          .valid
		.sink1_channel       (rsp_demux_008_src1_channel),                   //          .channel
		.sink1_data          (rsp_demux_008_src1_data),                      //          .data
		.sink1_startofpacket (rsp_demux_008_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_008_src1_endofpacket)                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (61),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (73),
		.IN_PKT_BYTE_CNT_L             (68),
		.IN_PKT_TRANS_COMPRESSED_READ  (62),
		.IN_PKT_TRANS_WRITE            (64),
		.IN_PKT_BURSTWRAP_H            (76),
		.IN_PKT_BURSTWRAP_L            (74),
		.IN_PKT_BURST_SIZE_H           (79),
		.IN_PKT_BURST_SIZE_L           (77),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (67),
		.IN_PKT_BURST_TYPE_H           (81),
		.IN_PKT_BURST_TYPE_L           (80),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (313),
		.OUT_PKT_ADDR_L                (288),
		.OUT_PKT_DATA_H                (255),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (287),
		.OUT_PKT_BYTEEN_L              (256),
		.OUT_PKT_BYTE_CNT_H            (325),
		.OUT_PKT_BYTE_CNT_L            (320),
		.OUT_PKT_TRANS_COMPRESSED_READ (314),
		.OUT_PKT_BURST_SIZE_H          (331),
		.OUT_PKT_BURST_SIZE_L          (329),
		.OUT_PKT_RESPONSE_STATUS_H     (355),
		.OUT_PKT_RESPONSE_STATUS_L     (354),
		.OUT_PKT_TRANS_EXCLUSIVE       (319),
		.OUT_PKT_BURST_TYPE_H          (333),
		.OUT_PKT_BURST_TYPE_L          (332),
		.OUT_PKT_ORI_BURST_SIZE_L      (356),
		.OUT_PKT_ORI_BURST_SIZE_H      (358),
		.OUT_ST_DATA_W                 (359),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) msgdma_0_descriptor_slave_cmd_width_adapter (
		.clk                  (altpll_sys_c0_clk),                                             //       clk.clk
		.reset                (msgdma_0_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                         //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                       //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                         //          .ready
		.in_data              (cmd_mux_003_src_data),                                          //          .data
		.out_endofpacket      (msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (313),
		.IN_PKT_ADDR_L                 (288),
		.IN_PKT_DATA_H                 (255),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (287),
		.IN_PKT_BYTEEN_L               (256),
		.IN_PKT_BYTE_CNT_H             (325),
		.IN_PKT_BYTE_CNT_L             (320),
		.IN_PKT_TRANS_COMPRESSED_READ  (314),
		.IN_PKT_TRANS_WRITE            (316),
		.IN_PKT_BURSTWRAP_H            (328),
		.IN_PKT_BURSTWRAP_L            (326),
		.IN_PKT_BURST_SIZE_H           (331),
		.IN_PKT_BURST_SIZE_L           (329),
		.IN_PKT_RESPONSE_STATUS_H      (355),
		.IN_PKT_RESPONSE_STATUS_L      (354),
		.IN_PKT_TRANS_EXCLUSIVE        (319),
		.IN_PKT_BURST_TYPE_H           (333),
		.IN_PKT_BURST_TYPE_L           (332),
		.IN_PKT_ORI_BURST_SIZE_L       (356),
		.IN_PKT_ORI_BURST_SIZE_H       (358),
		.IN_ST_DATA_W                  (359),
		.OUT_PKT_ADDR_H                (61),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (73),
		.OUT_PKT_BYTE_CNT_L            (68),
		.OUT_PKT_TRANS_COMPRESSED_READ (62),
		.OUT_PKT_BURST_SIZE_H          (79),
		.OUT_PKT_BURST_SIZE_L          (77),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (67),
		.OUT_PKT_BURST_TYPE_H          (81),
		.OUT_PKT_BURST_TYPE_L          (80),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (11),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) msgdma_0_descriptor_slave_rsp_width_adapter (
		.clk                  (altpll_sys_c0_clk),                                             //       clk.clk
		.reset                (msgdma_0_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_007_src_valid),                                          //      sink.valid
		.in_channel           (router_007_src_channel),                                        //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                                    //          .endofpacket
		.in_ready             (router_007_src_ready),                                          //          .ready
		.in_data              (router_007_src_data),                                           //          .data
		.out_endofpacket      (msgdma_0_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_0_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_0_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_0_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_0_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_0_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_sys_c0_clk),                                            //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),                 //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                               //       out_clk.clk
		.out_reset         (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                         //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                       //              .channel
		.in_data           (cmd_demux_src6_data),                                          //              .data
		.out_ready         (crosser_out_ready),                                            //           out.ready
		.out_valid         (crosser_out_valid),                                            //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_out_channel),                                          //              .channel
		.out_data          (crosser_out_data),                                             //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (11),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_50_clk_clk),                                               //        in_clk.clk
		.in_reset          (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_sys_c0_clk),                                            //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),                 // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                     //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                     //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                             //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                               //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                   //              .channel
		.in_data           (rsp_demux_006_src0_data),                                      //              .data
		.out_ready         (crosser_001_out_ready),                                        //           out.ready
		.out_valid         (crosser_001_out_valid),                                        //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                  //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                      //              .channel
		.out_data          (crosser_001_out_data),                                         //              .data
		.in_empty          (1'b0),                                                         //   (terminated)
		.in_error          (1'b0),                                                         //   (terminated)
		.out_empty         (),                                                             //   (terminated)
		.out_error         ()                                                              //   (terminated)
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_sys_c0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (msgdma_0_csr_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (msgdma_0_csr_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (msgdma_0_csr_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                 //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_sys_c0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (vic_0_csr_access_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (vic_0_csr_access_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (vic_0_csr_access_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)             //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_sys_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                      //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (258),
		.inUsePackets    (0),
		.inDataWidth     (258),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (258),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_sys_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (msgdma_0_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                     //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_sys_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (parameter_sys_parameter_rx_ram_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (parameter_sys_parameter_rx_ram_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (parameter_sys_parameter_rx_ram_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                             //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_sys_c0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (parameter_sys_parameter_tx_ram_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (parameter_sys_parameter_tx_ram_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (parameter_sys_parameter_tx_ram_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                             //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_50_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (altpll_sys_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_sys_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (altpll_sys_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (altpll_sys_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                             //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_sys_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mm_clock_crossing_bridge_1_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                         //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (altpll_sys_c0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (program_memory_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (program_memory_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (program_memory_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)             //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (altpll_sys_c0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (data_memory_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (data_memory_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (data_memory_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)             //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (altpll_sys_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (msgdma_0_reset_n_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (usb_data_sys_usb_rx_ram_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (usb_data_sys_usb_rx_ram_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (usb_data_sys_usb_rx_ram_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                      //         .error
	);

endmodule
