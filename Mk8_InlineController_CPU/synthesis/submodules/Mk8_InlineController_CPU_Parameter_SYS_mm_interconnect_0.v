// Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 646

`timescale 1 ps / 1 ps
module Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                                   //                                                 clk_0_clk.clk
		input  wire        mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset, // mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset.reset
		input  wire [14:0] mm_clock_crossing_bridge_0_m0_address,                           //                             mm_clock_crossing_bridge_0_m0.address
		output wire        mm_clock_crossing_bridge_0_m0_waitrequest,                       //                                                          .waitrequest
		input  wire [0:0]  mm_clock_crossing_bridge_0_m0_burstcount,                        //                                                          .burstcount
		input  wire [3:0]  mm_clock_crossing_bridge_0_m0_byteenable,                        //                                                          .byteenable
		input  wire        mm_clock_crossing_bridge_0_m0_read,                              //                                                          .read
		output wire [31:0] mm_clock_crossing_bridge_0_m0_readdata,                          //                                                          .readdata
		output wire        mm_clock_crossing_bridge_0_m0_readdatavalid,                     //                                                          .readdatavalid
		input  wire        mm_clock_crossing_bridge_0_m0_write,                             //                                                          .write
		input  wire [31:0] mm_clock_crossing_bridge_0_m0_writedata,                         //                                                          .writedata
		input  wire        mm_clock_crossing_bridge_0_m0_debugaccess,                       //                                                          .debugaccess
		output wire [2:0]  Parameter_GPIO_s1_address,                                       //                                         Parameter_GPIO_s1.address
		output wire        Parameter_GPIO_s1_write,                                         //                                                          .write
		input  wire [31:0] Parameter_GPIO_s1_readdata,                                      //                                                          .readdata
		output wire [31:0] Parameter_GPIO_s1_writedata,                                     //                                                          .writedata
		output wire        Parameter_GPIO_s1_chipselect,                                    //                                                          .chipselect
		output wire [10:0] Parameter_RX_RAM_s1_address,                                     //                                       Parameter_RX_RAM_s1.address
		output wire        Parameter_RX_RAM_s1_write,                                       //                                                          .write
		input  wire [31:0] Parameter_RX_RAM_s1_readdata,                                    //                                                          .readdata
		output wire [31:0] Parameter_RX_RAM_s1_writedata,                                   //                                                          .writedata
		output wire [3:0]  Parameter_RX_RAM_s1_byteenable,                                  //                                                          .byteenable
		output wire        Parameter_RX_RAM_s1_chipselect,                                  //                                                          .chipselect
		output wire        Parameter_RX_RAM_s1_clken,                                       //                                                          .clken
		output wire [10:0] Parameter_TX_RAM_s1_address,                                     //                                       Parameter_TX_RAM_s1.address
		output wire        Parameter_TX_RAM_s1_write,                                       //                                                          .write
		input  wire [31:0] Parameter_TX_RAM_s1_readdata,                                    //                                                          .readdata
		output wire [31:0] Parameter_TX_RAM_s1_writedata,                                   //                                                          .writedata
		output wire [3:0]  Parameter_TX_RAM_s1_byteenable,                                  //                                                          .byteenable
		output wire        Parameter_TX_RAM_s1_chipselect,                                  //                                                          .chipselect
		output wire        Parameter_TX_RAM_s1_clken,                                       //                                                          .clken
		output wire [1:0]  ParameterLengthPage_s1_address,                                  //                                    ParameterLengthPage_s1.address
		output wire        ParameterLengthPage_s1_write,                                    //                                                          .write
		input  wire [31:0] ParameterLengthPage_s1_readdata,                                 //                                                          .readdata
		output wire [31:0] ParameterLengthPage_s1_writedata,                                //                                                          .writedata
		output wire        ParameterLengthPage_s1_chipselect,                               //                                                          .chipselect
		output wire [2:0]  Reset_s1_address,                                                //                                                  Reset_s1.address
		output wire        Reset_s1_write,                                                  //                                                          .write
		input  wire [31:0] Reset_s1_readdata,                                               //                                                          .readdata
		output wire [31:0] Reset_s1_writedata,                                              //                                                          .writedata
		output wire        Reset_s1_chipselect,                                             //                                                          .chipselect
		output wire [7:0]  to_external_bus_bridge_0_avalon_slave_address,                   //                     to_external_bus_bridge_0_avalon_slave.address
		output wire        to_external_bus_bridge_0_avalon_slave_write,                     //                                                          .write
		output wire        to_external_bus_bridge_0_avalon_slave_read,                      //                                                          .read
		input  wire [7:0]  to_external_bus_bridge_0_avalon_slave_readdata,                  //                                                          .readdata
		output wire [7:0]  to_external_bus_bridge_0_avalon_slave_writedata,                 //                                                          .writedata
		output wire [0:0]  to_external_bus_bridge_0_avalon_slave_byteenable,                //                                                          .byteenable
		input  wire        to_external_bus_bridge_0_avalon_slave_waitrequest,               //                                                          .waitrequest
		output wire        to_external_bus_bridge_0_avalon_slave_chipselect                 //                                                          .chipselect
	);

	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;   // mm_clock_crossing_bridge_0_m0_agent:av_waitrequest -> mm_clock_crossing_bridge_0_m0_translator:uav_waitrequest
	wire  [31:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdata;      // mm_clock_crossing_bridge_0_m0_agent:av_readdata -> mm_clock_crossing_bridge_0_m0_translator:uav_readdata
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;   // mm_clock_crossing_bridge_0_m0_translator:uav_debugaccess -> mm_clock_crossing_bridge_0_m0_agent:av_debugaccess
	wire  [14:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_address;       // mm_clock_crossing_bridge_0_m0_translator:uav_address -> mm_clock_crossing_bridge_0_m0_agent:av_address
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_read;          // mm_clock_crossing_bridge_0_m0_translator:uav_read -> mm_clock_crossing_bridge_0_m0_agent:av_read
	wire   [3:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_byteenable;    // mm_clock_crossing_bridge_0_m0_translator:uav_byteenable -> mm_clock_crossing_bridge_0_m0_agent:av_byteenable
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid; // mm_clock_crossing_bridge_0_m0_agent:av_readdatavalid -> mm_clock_crossing_bridge_0_m0_translator:uav_readdatavalid
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_lock;          // mm_clock_crossing_bridge_0_m0_translator:uav_lock -> mm_clock_crossing_bridge_0_m0_agent:av_lock
	wire         mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_write;         // mm_clock_crossing_bridge_0_m0_translator:uav_write -> mm_clock_crossing_bridge_0_m0_agent:av_write
	wire  [31:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_writedata;     // mm_clock_crossing_bridge_0_m0_translator:uav_writedata -> mm_clock_crossing_bridge_0_m0_agent:av_writedata
	wire   [2:0] mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_burstcount;    // mm_clock_crossing_bridge_0_m0_translator:uav_burstcount -> mm_clock_crossing_bridge_0_m0_agent:av_burstcount
	wire   [7:0] to_external_bus_bridge_0_avalon_slave_agent_m0_readdata;                          // to_external_bus_bridge_0_avalon_slave_translator:uav_readdata -> to_external_bus_bridge_0_avalon_slave_agent:m0_readdata
	wire         to_external_bus_bridge_0_avalon_slave_agent_m0_waitrequest;                       // to_external_bus_bridge_0_avalon_slave_translator:uav_waitrequest -> to_external_bus_bridge_0_avalon_slave_agent:m0_waitrequest
	wire         to_external_bus_bridge_0_avalon_slave_agent_m0_debugaccess;                       // to_external_bus_bridge_0_avalon_slave_agent:m0_debugaccess -> to_external_bus_bridge_0_avalon_slave_translator:uav_debugaccess
	wire  [14:0] to_external_bus_bridge_0_avalon_slave_agent_m0_address;                           // to_external_bus_bridge_0_avalon_slave_agent:m0_address -> to_external_bus_bridge_0_avalon_slave_translator:uav_address
	wire   [0:0] to_external_bus_bridge_0_avalon_slave_agent_m0_byteenable;                        // to_external_bus_bridge_0_avalon_slave_agent:m0_byteenable -> to_external_bus_bridge_0_avalon_slave_translator:uav_byteenable
	wire         to_external_bus_bridge_0_avalon_slave_agent_m0_read;                              // to_external_bus_bridge_0_avalon_slave_agent:m0_read -> to_external_bus_bridge_0_avalon_slave_translator:uav_read
	wire         to_external_bus_bridge_0_avalon_slave_agent_m0_readdatavalid;                     // to_external_bus_bridge_0_avalon_slave_translator:uav_readdatavalid -> to_external_bus_bridge_0_avalon_slave_agent:m0_readdatavalid
	wire         to_external_bus_bridge_0_avalon_slave_agent_m0_lock;                              // to_external_bus_bridge_0_avalon_slave_agent:m0_lock -> to_external_bus_bridge_0_avalon_slave_translator:uav_lock
	wire   [7:0] to_external_bus_bridge_0_avalon_slave_agent_m0_writedata;                         // to_external_bus_bridge_0_avalon_slave_agent:m0_writedata -> to_external_bus_bridge_0_avalon_slave_translator:uav_writedata
	wire         to_external_bus_bridge_0_avalon_slave_agent_m0_write;                             // to_external_bus_bridge_0_avalon_slave_agent:m0_write -> to_external_bus_bridge_0_avalon_slave_translator:uav_write
	wire   [0:0] to_external_bus_bridge_0_avalon_slave_agent_m0_burstcount;                        // to_external_bus_bridge_0_avalon_slave_agent:m0_burstcount -> to_external_bus_bridge_0_avalon_slave_translator:uav_burstcount
	wire         to_external_bus_bridge_0_avalon_slave_agent_rf_source_valid;                      // to_external_bus_bridge_0_avalon_slave_agent:rf_source_valid -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [62:0] to_external_bus_bridge_0_avalon_slave_agent_rf_source_data;                       // to_external_bus_bridge_0_avalon_slave_agent:rf_source_data -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_data
	wire         to_external_bus_bridge_0_avalon_slave_agent_rf_source_ready;                      // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_ready -> to_external_bus_bridge_0_avalon_slave_agent:rf_source_ready
	wire         to_external_bus_bridge_0_avalon_slave_agent_rf_source_startofpacket;              // to_external_bus_bridge_0_avalon_slave_agent:rf_source_startofpacket -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire         to_external_bus_bridge_0_avalon_slave_agent_rf_source_endofpacket;                // to_external_bus_bridge_0_avalon_slave_agent:rf_source_endofpacket -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_valid;                   // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_valid -> to_external_bus_bridge_0_avalon_slave_agent:rf_sink_valid
	wire  [62:0] to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_data;                    // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_data -> to_external_bus_bridge_0_avalon_slave_agent:rf_sink_data
	wire         to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_ready;                   // to_external_bus_bridge_0_avalon_slave_agent:rf_sink_ready -> to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_ready
	wire         to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_startofpacket;           // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> to_external_bus_bridge_0_avalon_slave_agent:rf_sink_startofpacket
	wire         to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_endofpacket;             // to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> to_external_bus_bridge_0_avalon_slave_agent:rf_sink_endofpacket
	wire  [31:0] parameter_gpio_s1_agent_m0_readdata;                                              // Parameter_GPIO_s1_translator:uav_readdata -> Parameter_GPIO_s1_agent:m0_readdata
	wire         parameter_gpio_s1_agent_m0_waitrequest;                                           // Parameter_GPIO_s1_translator:uav_waitrequest -> Parameter_GPIO_s1_agent:m0_waitrequest
	wire         parameter_gpio_s1_agent_m0_debugaccess;                                           // Parameter_GPIO_s1_agent:m0_debugaccess -> Parameter_GPIO_s1_translator:uav_debugaccess
	wire  [14:0] parameter_gpio_s1_agent_m0_address;                                               // Parameter_GPIO_s1_agent:m0_address -> Parameter_GPIO_s1_translator:uav_address
	wire   [3:0] parameter_gpio_s1_agent_m0_byteenable;                                            // Parameter_GPIO_s1_agent:m0_byteenable -> Parameter_GPIO_s1_translator:uav_byteenable
	wire         parameter_gpio_s1_agent_m0_read;                                                  // Parameter_GPIO_s1_agent:m0_read -> Parameter_GPIO_s1_translator:uav_read
	wire         parameter_gpio_s1_agent_m0_readdatavalid;                                         // Parameter_GPIO_s1_translator:uav_readdatavalid -> Parameter_GPIO_s1_agent:m0_readdatavalid
	wire         parameter_gpio_s1_agent_m0_lock;                                                  // Parameter_GPIO_s1_agent:m0_lock -> Parameter_GPIO_s1_translator:uav_lock
	wire  [31:0] parameter_gpio_s1_agent_m0_writedata;                                             // Parameter_GPIO_s1_agent:m0_writedata -> Parameter_GPIO_s1_translator:uav_writedata
	wire         parameter_gpio_s1_agent_m0_write;                                                 // Parameter_GPIO_s1_agent:m0_write -> Parameter_GPIO_s1_translator:uav_write
	wire   [2:0] parameter_gpio_s1_agent_m0_burstcount;                                            // Parameter_GPIO_s1_agent:m0_burstcount -> Parameter_GPIO_s1_translator:uav_burstcount
	wire         parameter_gpio_s1_agent_rf_source_valid;                                          // Parameter_GPIO_s1_agent:rf_source_valid -> Parameter_GPIO_s1_agent_rsp_fifo:in_valid
	wire  [89:0] parameter_gpio_s1_agent_rf_source_data;                                           // Parameter_GPIO_s1_agent:rf_source_data -> Parameter_GPIO_s1_agent_rsp_fifo:in_data
	wire         parameter_gpio_s1_agent_rf_source_ready;                                          // Parameter_GPIO_s1_agent_rsp_fifo:in_ready -> Parameter_GPIO_s1_agent:rf_source_ready
	wire         parameter_gpio_s1_agent_rf_source_startofpacket;                                  // Parameter_GPIO_s1_agent:rf_source_startofpacket -> Parameter_GPIO_s1_agent_rsp_fifo:in_startofpacket
	wire         parameter_gpio_s1_agent_rf_source_endofpacket;                                    // Parameter_GPIO_s1_agent:rf_source_endofpacket -> Parameter_GPIO_s1_agent_rsp_fifo:in_endofpacket
	wire         parameter_gpio_s1_agent_rsp_fifo_out_valid;                                       // Parameter_GPIO_s1_agent_rsp_fifo:out_valid -> Parameter_GPIO_s1_agent:rf_sink_valid
	wire  [89:0] parameter_gpio_s1_agent_rsp_fifo_out_data;                                        // Parameter_GPIO_s1_agent_rsp_fifo:out_data -> Parameter_GPIO_s1_agent:rf_sink_data
	wire         parameter_gpio_s1_agent_rsp_fifo_out_ready;                                       // Parameter_GPIO_s1_agent:rf_sink_ready -> Parameter_GPIO_s1_agent_rsp_fifo:out_ready
	wire         parameter_gpio_s1_agent_rsp_fifo_out_startofpacket;                               // Parameter_GPIO_s1_agent_rsp_fifo:out_startofpacket -> Parameter_GPIO_s1_agent:rf_sink_startofpacket
	wire         parameter_gpio_s1_agent_rsp_fifo_out_endofpacket;                                 // Parameter_GPIO_s1_agent_rsp_fifo:out_endofpacket -> Parameter_GPIO_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> Parameter_GPIO_s1_agent:cp_valid
	wire  [88:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> Parameter_GPIO_s1_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                            // Parameter_GPIO_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [5:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> Parameter_GPIO_s1_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> Parameter_GPIO_s1_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> Parameter_GPIO_s1_agent:cp_endofpacket
	wire  [31:0] parameter_rx_ram_s1_agent_m0_readdata;                                            // Parameter_RX_RAM_s1_translator:uav_readdata -> Parameter_RX_RAM_s1_agent:m0_readdata
	wire         parameter_rx_ram_s1_agent_m0_waitrequest;                                         // Parameter_RX_RAM_s1_translator:uav_waitrequest -> Parameter_RX_RAM_s1_agent:m0_waitrequest
	wire         parameter_rx_ram_s1_agent_m0_debugaccess;                                         // Parameter_RX_RAM_s1_agent:m0_debugaccess -> Parameter_RX_RAM_s1_translator:uav_debugaccess
	wire  [14:0] parameter_rx_ram_s1_agent_m0_address;                                             // Parameter_RX_RAM_s1_agent:m0_address -> Parameter_RX_RAM_s1_translator:uav_address
	wire   [3:0] parameter_rx_ram_s1_agent_m0_byteenable;                                          // Parameter_RX_RAM_s1_agent:m0_byteenable -> Parameter_RX_RAM_s1_translator:uav_byteenable
	wire         parameter_rx_ram_s1_agent_m0_read;                                                // Parameter_RX_RAM_s1_agent:m0_read -> Parameter_RX_RAM_s1_translator:uav_read
	wire         parameter_rx_ram_s1_agent_m0_readdatavalid;                                       // Parameter_RX_RAM_s1_translator:uav_readdatavalid -> Parameter_RX_RAM_s1_agent:m0_readdatavalid
	wire         parameter_rx_ram_s1_agent_m0_lock;                                                // Parameter_RX_RAM_s1_agent:m0_lock -> Parameter_RX_RAM_s1_translator:uav_lock
	wire  [31:0] parameter_rx_ram_s1_agent_m0_writedata;                                           // Parameter_RX_RAM_s1_agent:m0_writedata -> Parameter_RX_RAM_s1_translator:uav_writedata
	wire         parameter_rx_ram_s1_agent_m0_write;                                               // Parameter_RX_RAM_s1_agent:m0_write -> Parameter_RX_RAM_s1_translator:uav_write
	wire   [2:0] parameter_rx_ram_s1_agent_m0_burstcount;                                          // Parameter_RX_RAM_s1_agent:m0_burstcount -> Parameter_RX_RAM_s1_translator:uav_burstcount
	wire         parameter_rx_ram_s1_agent_rf_source_valid;                                        // Parameter_RX_RAM_s1_agent:rf_source_valid -> Parameter_RX_RAM_s1_agent_rsp_fifo:in_valid
	wire  [89:0] parameter_rx_ram_s1_agent_rf_source_data;                                         // Parameter_RX_RAM_s1_agent:rf_source_data -> Parameter_RX_RAM_s1_agent_rsp_fifo:in_data
	wire         parameter_rx_ram_s1_agent_rf_source_ready;                                        // Parameter_RX_RAM_s1_agent_rsp_fifo:in_ready -> Parameter_RX_RAM_s1_agent:rf_source_ready
	wire         parameter_rx_ram_s1_agent_rf_source_startofpacket;                                // Parameter_RX_RAM_s1_agent:rf_source_startofpacket -> Parameter_RX_RAM_s1_agent_rsp_fifo:in_startofpacket
	wire         parameter_rx_ram_s1_agent_rf_source_endofpacket;                                  // Parameter_RX_RAM_s1_agent:rf_source_endofpacket -> Parameter_RX_RAM_s1_agent_rsp_fifo:in_endofpacket
	wire         parameter_rx_ram_s1_agent_rsp_fifo_out_valid;                                     // Parameter_RX_RAM_s1_agent_rsp_fifo:out_valid -> Parameter_RX_RAM_s1_agent:rf_sink_valid
	wire  [89:0] parameter_rx_ram_s1_agent_rsp_fifo_out_data;                                      // Parameter_RX_RAM_s1_agent_rsp_fifo:out_data -> Parameter_RX_RAM_s1_agent:rf_sink_data
	wire         parameter_rx_ram_s1_agent_rsp_fifo_out_ready;                                     // Parameter_RX_RAM_s1_agent:rf_sink_ready -> Parameter_RX_RAM_s1_agent_rsp_fifo:out_ready
	wire         parameter_rx_ram_s1_agent_rsp_fifo_out_startofpacket;                             // Parameter_RX_RAM_s1_agent_rsp_fifo:out_startofpacket -> Parameter_RX_RAM_s1_agent:rf_sink_startofpacket
	wire         parameter_rx_ram_s1_agent_rsp_fifo_out_endofpacket;                               // Parameter_RX_RAM_s1_agent_rsp_fifo:out_endofpacket -> Parameter_RX_RAM_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> Parameter_RX_RAM_s1_agent:cp_valid
	wire  [88:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> Parameter_RX_RAM_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                            // Parameter_RX_RAM_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [5:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> Parameter_RX_RAM_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> Parameter_RX_RAM_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> Parameter_RX_RAM_s1_agent:cp_endofpacket
	wire  [31:0] reset_s1_agent_m0_readdata;                                                       // Reset_s1_translator:uav_readdata -> Reset_s1_agent:m0_readdata
	wire         reset_s1_agent_m0_waitrequest;                                                    // Reset_s1_translator:uav_waitrequest -> Reset_s1_agent:m0_waitrequest
	wire         reset_s1_agent_m0_debugaccess;                                                    // Reset_s1_agent:m0_debugaccess -> Reset_s1_translator:uav_debugaccess
	wire  [14:0] reset_s1_agent_m0_address;                                                        // Reset_s1_agent:m0_address -> Reset_s1_translator:uav_address
	wire   [3:0] reset_s1_agent_m0_byteenable;                                                     // Reset_s1_agent:m0_byteenable -> Reset_s1_translator:uav_byteenable
	wire         reset_s1_agent_m0_read;                                                           // Reset_s1_agent:m0_read -> Reset_s1_translator:uav_read
	wire         reset_s1_agent_m0_readdatavalid;                                                  // Reset_s1_translator:uav_readdatavalid -> Reset_s1_agent:m0_readdatavalid
	wire         reset_s1_agent_m0_lock;                                                           // Reset_s1_agent:m0_lock -> Reset_s1_translator:uav_lock
	wire  [31:0] reset_s1_agent_m0_writedata;                                                      // Reset_s1_agent:m0_writedata -> Reset_s1_translator:uav_writedata
	wire         reset_s1_agent_m0_write;                                                          // Reset_s1_agent:m0_write -> Reset_s1_translator:uav_write
	wire   [2:0] reset_s1_agent_m0_burstcount;                                                     // Reset_s1_agent:m0_burstcount -> Reset_s1_translator:uav_burstcount
	wire         reset_s1_agent_rf_source_valid;                                                   // Reset_s1_agent:rf_source_valid -> Reset_s1_agent_rsp_fifo:in_valid
	wire  [89:0] reset_s1_agent_rf_source_data;                                                    // Reset_s1_agent:rf_source_data -> Reset_s1_agent_rsp_fifo:in_data
	wire         reset_s1_agent_rf_source_ready;                                                   // Reset_s1_agent_rsp_fifo:in_ready -> Reset_s1_agent:rf_source_ready
	wire         reset_s1_agent_rf_source_startofpacket;                                           // Reset_s1_agent:rf_source_startofpacket -> Reset_s1_agent_rsp_fifo:in_startofpacket
	wire         reset_s1_agent_rf_source_endofpacket;                                             // Reset_s1_agent:rf_source_endofpacket -> Reset_s1_agent_rsp_fifo:in_endofpacket
	wire         reset_s1_agent_rsp_fifo_out_valid;                                                // Reset_s1_agent_rsp_fifo:out_valid -> Reset_s1_agent:rf_sink_valid
	wire  [89:0] reset_s1_agent_rsp_fifo_out_data;                                                 // Reset_s1_agent_rsp_fifo:out_data -> Reset_s1_agent:rf_sink_data
	wire         reset_s1_agent_rsp_fifo_out_ready;                                                // Reset_s1_agent:rf_sink_ready -> Reset_s1_agent_rsp_fifo:out_ready
	wire         reset_s1_agent_rsp_fifo_out_startofpacket;                                        // Reset_s1_agent_rsp_fifo:out_startofpacket -> Reset_s1_agent:rf_sink_startofpacket
	wire         reset_s1_agent_rsp_fifo_out_endofpacket;                                          // Reset_s1_agent_rsp_fifo:out_endofpacket -> Reset_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> Reset_s1_agent:cp_valid
	wire  [88:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> Reset_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                            // Reset_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [5:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> Reset_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> Reset_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> Reset_s1_agent:cp_endofpacket
	wire  [31:0] parameter_tx_ram_s1_agent_m0_readdata;                                            // Parameter_TX_RAM_s1_translator:uav_readdata -> Parameter_TX_RAM_s1_agent:m0_readdata
	wire         parameter_tx_ram_s1_agent_m0_waitrequest;                                         // Parameter_TX_RAM_s1_translator:uav_waitrequest -> Parameter_TX_RAM_s1_agent:m0_waitrequest
	wire         parameter_tx_ram_s1_agent_m0_debugaccess;                                         // Parameter_TX_RAM_s1_agent:m0_debugaccess -> Parameter_TX_RAM_s1_translator:uav_debugaccess
	wire  [14:0] parameter_tx_ram_s1_agent_m0_address;                                             // Parameter_TX_RAM_s1_agent:m0_address -> Parameter_TX_RAM_s1_translator:uav_address
	wire   [3:0] parameter_tx_ram_s1_agent_m0_byteenable;                                          // Parameter_TX_RAM_s1_agent:m0_byteenable -> Parameter_TX_RAM_s1_translator:uav_byteenable
	wire         parameter_tx_ram_s1_agent_m0_read;                                                // Parameter_TX_RAM_s1_agent:m0_read -> Parameter_TX_RAM_s1_translator:uav_read
	wire         parameter_tx_ram_s1_agent_m0_readdatavalid;                                       // Parameter_TX_RAM_s1_translator:uav_readdatavalid -> Parameter_TX_RAM_s1_agent:m0_readdatavalid
	wire         parameter_tx_ram_s1_agent_m0_lock;                                                // Parameter_TX_RAM_s1_agent:m0_lock -> Parameter_TX_RAM_s1_translator:uav_lock
	wire  [31:0] parameter_tx_ram_s1_agent_m0_writedata;                                           // Parameter_TX_RAM_s1_agent:m0_writedata -> Parameter_TX_RAM_s1_translator:uav_writedata
	wire         parameter_tx_ram_s1_agent_m0_write;                                               // Parameter_TX_RAM_s1_agent:m0_write -> Parameter_TX_RAM_s1_translator:uav_write
	wire   [2:0] parameter_tx_ram_s1_agent_m0_burstcount;                                          // Parameter_TX_RAM_s1_agent:m0_burstcount -> Parameter_TX_RAM_s1_translator:uav_burstcount
	wire         parameter_tx_ram_s1_agent_rf_source_valid;                                        // Parameter_TX_RAM_s1_agent:rf_source_valid -> Parameter_TX_RAM_s1_agent_rsp_fifo:in_valid
	wire  [89:0] parameter_tx_ram_s1_agent_rf_source_data;                                         // Parameter_TX_RAM_s1_agent:rf_source_data -> Parameter_TX_RAM_s1_agent_rsp_fifo:in_data
	wire         parameter_tx_ram_s1_agent_rf_source_ready;                                        // Parameter_TX_RAM_s1_agent_rsp_fifo:in_ready -> Parameter_TX_RAM_s1_agent:rf_source_ready
	wire         parameter_tx_ram_s1_agent_rf_source_startofpacket;                                // Parameter_TX_RAM_s1_agent:rf_source_startofpacket -> Parameter_TX_RAM_s1_agent_rsp_fifo:in_startofpacket
	wire         parameter_tx_ram_s1_agent_rf_source_endofpacket;                                  // Parameter_TX_RAM_s1_agent:rf_source_endofpacket -> Parameter_TX_RAM_s1_agent_rsp_fifo:in_endofpacket
	wire         parameter_tx_ram_s1_agent_rsp_fifo_out_valid;                                     // Parameter_TX_RAM_s1_agent_rsp_fifo:out_valid -> Parameter_TX_RAM_s1_agent:rf_sink_valid
	wire  [89:0] parameter_tx_ram_s1_agent_rsp_fifo_out_data;                                      // Parameter_TX_RAM_s1_agent_rsp_fifo:out_data -> Parameter_TX_RAM_s1_agent:rf_sink_data
	wire         parameter_tx_ram_s1_agent_rsp_fifo_out_ready;                                     // Parameter_TX_RAM_s1_agent:rf_sink_ready -> Parameter_TX_RAM_s1_agent_rsp_fifo:out_ready
	wire         parameter_tx_ram_s1_agent_rsp_fifo_out_startofpacket;                             // Parameter_TX_RAM_s1_agent_rsp_fifo:out_startofpacket -> Parameter_TX_RAM_s1_agent:rf_sink_startofpacket
	wire         parameter_tx_ram_s1_agent_rsp_fifo_out_endofpacket;                               // Parameter_TX_RAM_s1_agent_rsp_fifo:out_endofpacket -> Parameter_TX_RAM_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> Parameter_TX_RAM_s1_agent:cp_valid
	wire  [88:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> Parameter_TX_RAM_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                            // Parameter_TX_RAM_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [5:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> Parameter_TX_RAM_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> Parameter_TX_RAM_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> Parameter_TX_RAM_s1_agent:cp_endofpacket
	wire  [31:0] parameterlengthpage_s1_agent_m0_readdata;                                         // ParameterLengthPage_s1_translator:uav_readdata -> ParameterLengthPage_s1_agent:m0_readdata
	wire         parameterlengthpage_s1_agent_m0_waitrequest;                                      // ParameterLengthPage_s1_translator:uav_waitrequest -> ParameterLengthPage_s1_agent:m0_waitrequest
	wire         parameterlengthpage_s1_agent_m0_debugaccess;                                      // ParameterLengthPage_s1_agent:m0_debugaccess -> ParameterLengthPage_s1_translator:uav_debugaccess
	wire  [14:0] parameterlengthpage_s1_agent_m0_address;                                          // ParameterLengthPage_s1_agent:m0_address -> ParameterLengthPage_s1_translator:uav_address
	wire   [3:0] parameterlengthpage_s1_agent_m0_byteenable;                                       // ParameterLengthPage_s1_agent:m0_byteenable -> ParameterLengthPage_s1_translator:uav_byteenable
	wire         parameterlengthpage_s1_agent_m0_read;                                             // ParameterLengthPage_s1_agent:m0_read -> ParameterLengthPage_s1_translator:uav_read
	wire         parameterlengthpage_s1_agent_m0_readdatavalid;                                    // ParameterLengthPage_s1_translator:uav_readdatavalid -> ParameterLengthPage_s1_agent:m0_readdatavalid
	wire         parameterlengthpage_s1_agent_m0_lock;                                             // ParameterLengthPage_s1_agent:m0_lock -> ParameterLengthPage_s1_translator:uav_lock
	wire  [31:0] parameterlengthpage_s1_agent_m0_writedata;                                        // ParameterLengthPage_s1_agent:m0_writedata -> ParameterLengthPage_s1_translator:uav_writedata
	wire         parameterlengthpage_s1_agent_m0_write;                                            // ParameterLengthPage_s1_agent:m0_write -> ParameterLengthPage_s1_translator:uav_write
	wire   [2:0] parameterlengthpage_s1_agent_m0_burstcount;                                       // ParameterLengthPage_s1_agent:m0_burstcount -> ParameterLengthPage_s1_translator:uav_burstcount
	wire         parameterlengthpage_s1_agent_rf_source_valid;                                     // ParameterLengthPage_s1_agent:rf_source_valid -> ParameterLengthPage_s1_agent_rsp_fifo:in_valid
	wire  [89:0] parameterlengthpage_s1_agent_rf_source_data;                                      // ParameterLengthPage_s1_agent:rf_source_data -> ParameterLengthPage_s1_agent_rsp_fifo:in_data
	wire         parameterlengthpage_s1_agent_rf_source_ready;                                     // ParameterLengthPage_s1_agent_rsp_fifo:in_ready -> ParameterLengthPage_s1_agent:rf_source_ready
	wire         parameterlengthpage_s1_agent_rf_source_startofpacket;                             // ParameterLengthPage_s1_agent:rf_source_startofpacket -> ParameterLengthPage_s1_agent_rsp_fifo:in_startofpacket
	wire         parameterlengthpage_s1_agent_rf_source_endofpacket;                               // ParameterLengthPage_s1_agent:rf_source_endofpacket -> ParameterLengthPage_s1_agent_rsp_fifo:in_endofpacket
	wire         parameterlengthpage_s1_agent_rsp_fifo_out_valid;                                  // ParameterLengthPage_s1_agent_rsp_fifo:out_valid -> ParameterLengthPage_s1_agent:rf_sink_valid
	wire  [89:0] parameterlengthpage_s1_agent_rsp_fifo_out_data;                                   // ParameterLengthPage_s1_agent_rsp_fifo:out_data -> ParameterLengthPage_s1_agent:rf_sink_data
	wire         parameterlengthpage_s1_agent_rsp_fifo_out_ready;                                  // ParameterLengthPage_s1_agent:rf_sink_ready -> ParameterLengthPage_s1_agent_rsp_fifo:out_ready
	wire         parameterlengthpage_s1_agent_rsp_fifo_out_startofpacket;                          // ParameterLengthPage_s1_agent_rsp_fifo:out_startofpacket -> ParameterLengthPage_s1_agent:rf_sink_startofpacket
	wire         parameterlengthpage_s1_agent_rsp_fifo_out_endofpacket;                            // ParameterLengthPage_s1_agent_rsp_fifo:out_endofpacket -> ParameterLengthPage_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                            // cmd_mux_005:src_valid -> ParameterLengthPage_s1_agent:cp_valid
	wire  [88:0] cmd_mux_005_src_data;                                                             // cmd_mux_005:src_data -> ParameterLengthPage_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                            // ParameterLengthPage_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [5:0] cmd_mux_005_src_channel;                                                          // cmd_mux_005:src_channel -> ParameterLengthPage_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                    // cmd_mux_005:src_startofpacket -> ParameterLengthPage_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                      // cmd_mux_005:src_endofpacket -> ParameterLengthPage_s1_agent:cp_endofpacket
	wire         mm_clock_crossing_bridge_0_m0_agent_cp_valid;                                     // mm_clock_crossing_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [88:0] mm_clock_crossing_bridge_0_m0_agent_cp_data;                                      // mm_clock_crossing_bridge_0_m0_agent:cp_data -> router:sink_data
	wire         mm_clock_crossing_bridge_0_m0_agent_cp_ready;                                     // router:sink_ready -> mm_clock_crossing_bridge_0_m0_agent:cp_ready
	wire         mm_clock_crossing_bridge_0_m0_agent_cp_startofpacket;                             // mm_clock_crossing_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         mm_clock_crossing_bridge_0_m0_agent_cp_endofpacket;                               // mm_clock_crossing_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         to_external_bus_bridge_0_avalon_slave_agent_rp_valid;                             // to_external_bus_bridge_0_avalon_slave_agent:rp_valid -> router_001:sink_valid
	wire  [61:0] to_external_bus_bridge_0_avalon_slave_agent_rp_data;                              // to_external_bus_bridge_0_avalon_slave_agent:rp_data -> router_001:sink_data
	wire         to_external_bus_bridge_0_avalon_slave_agent_rp_ready;                             // router_001:sink_ready -> to_external_bus_bridge_0_avalon_slave_agent:rp_ready
	wire         to_external_bus_bridge_0_avalon_slave_agent_rp_startofpacket;                     // to_external_bus_bridge_0_avalon_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         to_external_bus_bridge_0_avalon_slave_agent_rp_endofpacket;                       // to_external_bus_bridge_0_avalon_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         parameter_gpio_s1_agent_rp_valid;                                                 // Parameter_GPIO_s1_agent:rp_valid -> router_002:sink_valid
	wire  [88:0] parameter_gpio_s1_agent_rp_data;                                                  // Parameter_GPIO_s1_agent:rp_data -> router_002:sink_data
	wire         parameter_gpio_s1_agent_rp_ready;                                                 // router_002:sink_ready -> Parameter_GPIO_s1_agent:rp_ready
	wire         parameter_gpio_s1_agent_rp_startofpacket;                                         // Parameter_GPIO_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         parameter_gpio_s1_agent_rp_endofpacket;                                           // Parameter_GPIO_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                             // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [88:0] router_002_src_data;                                                              // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                             // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [5:0] router_002_src_channel;                                                           // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         parameter_rx_ram_s1_agent_rp_valid;                                               // Parameter_RX_RAM_s1_agent:rp_valid -> router_003:sink_valid
	wire  [88:0] parameter_rx_ram_s1_agent_rp_data;                                                // Parameter_RX_RAM_s1_agent:rp_data -> router_003:sink_data
	wire         parameter_rx_ram_s1_agent_rp_ready;                                               // router_003:sink_ready -> Parameter_RX_RAM_s1_agent:rp_ready
	wire         parameter_rx_ram_s1_agent_rp_startofpacket;                                       // Parameter_RX_RAM_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         parameter_rx_ram_s1_agent_rp_endofpacket;                                         // Parameter_RX_RAM_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                             // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [88:0] router_003_src_data;                                                              // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                             // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [5:0] router_003_src_channel;                                                           // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         reset_s1_agent_rp_valid;                                                          // Reset_s1_agent:rp_valid -> router_004:sink_valid
	wire  [88:0] reset_s1_agent_rp_data;                                                           // Reset_s1_agent:rp_data -> router_004:sink_data
	wire         reset_s1_agent_rp_ready;                                                          // router_004:sink_ready -> Reset_s1_agent:rp_ready
	wire         reset_s1_agent_rp_startofpacket;                                                  // Reset_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         reset_s1_agent_rp_endofpacket;                                                    // Reset_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                             // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [88:0] router_004_src_data;                                                              // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                             // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [5:0] router_004_src_channel;                                                           // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         parameter_tx_ram_s1_agent_rp_valid;                                               // Parameter_TX_RAM_s1_agent:rp_valid -> router_005:sink_valid
	wire  [88:0] parameter_tx_ram_s1_agent_rp_data;                                                // Parameter_TX_RAM_s1_agent:rp_data -> router_005:sink_data
	wire         parameter_tx_ram_s1_agent_rp_ready;                                               // router_005:sink_ready -> Parameter_TX_RAM_s1_agent:rp_ready
	wire         parameter_tx_ram_s1_agent_rp_startofpacket;                                       // Parameter_TX_RAM_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         parameter_tx_ram_s1_agent_rp_endofpacket;                                         // Parameter_TX_RAM_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [88:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                             // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [5:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         parameterlengthpage_s1_agent_rp_valid;                                            // ParameterLengthPage_s1_agent:rp_valid -> router_006:sink_valid
	wire  [88:0] parameterlengthpage_s1_agent_rp_data;                                             // ParameterLengthPage_s1_agent:rp_data -> router_006:sink_data
	wire         parameterlengthpage_s1_agent_rp_ready;                                            // router_006:sink_ready -> ParameterLengthPage_s1_agent:rp_ready
	wire         parameterlengthpage_s1_agent_rp_startofpacket;                                    // ParameterLengthPage_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         parameterlengthpage_s1_agent_rp_endofpacket;                                      // ParameterLengthPage_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                             // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [88:0] router_006_src_data;                                                              // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                             // rsp_demux_005:sink_ready -> router_006:src_ready
	wire   [5:0] router_006_src_channel;                                                           // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         router_src_valid;                                                                 // router:src_valid -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_valid
	wire  [88:0] router_src_data;                                                                  // router:src_data -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                                 // mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [5:0] router_src_channel;                                                               // router:src_channel -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                         // router:src_startofpacket -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                           // router:src_endofpacket -> mm_clock_crossing_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [88:0] mm_clock_crossing_bridge_0_m0_limiter_cmd_src_data;                               // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         mm_clock_crossing_bridge_0_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_clock_crossing_bridge_0_m0_limiter:cmd_src_ready
	wire   [5:0] mm_clock_crossing_bridge_0_m0_limiter_cmd_src_channel;                            // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         mm_clock_crossing_bridge_0_m0_limiter_cmd_src_startofpacket;                      // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         mm_clock_crossing_bridge_0_m0_limiter_cmd_src_endofpacket;                        // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_valid
	wire  [88:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                                // mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [5:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> mm_clock_crossing_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire         mm_clock_crossing_bridge_0_m0_limiter_rsp_src_valid;                              // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_valid -> mm_clock_crossing_bridge_0_m0_agent:rp_valid
	wire  [88:0] mm_clock_crossing_bridge_0_m0_limiter_rsp_src_data;                               // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_data -> mm_clock_crossing_bridge_0_m0_agent:rp_data
	wire         mm_clock_crossing_bridge_0_m0_limiter_rsp_src_ready;                              // mm_clock_crossing_bridge_0_m0_agent:rp_ready -> mm_clock_crossing_bridge_0_m0_limiter:rsp_src_ready
	wire   [5:0] mm_clock_crossing_bridge_0_m0_limiter_rsp_src_channel;                            // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_channel -> mm_clock_crossing_bridge_0_m0_agent:rp_channel
	wire         mm_clock_crossing_bridge_0_m0_limiter_rsp_src_startofpacket;                      // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_clock_crossing_bridge_0_m0_agent:rp_startofpacket
	wire         mm_clock_crossing_bridge_0_m0_limiter_rsp_src_endofpacket;                        // mm_clock_crossing_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_clock_crossing_bridge_0_m0_agent:rp_endofpacket
	wire         to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_valid;                // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_valid -> to_external_bus_bridge_0_avalon_slave_agent:cp_valid
	wire  [61:0] to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_data;                 // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_data -> to_external_bus_bridge_0_avalon_slave_agent:cp_data
	wire         to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_ready;                // to_external_bus_bridge_0_avalon_slave_agent:cp_ready -> to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_ready
	wire   [5:0] to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_channel;              // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_channel -> to_external_bus_bridge_0_avalon_slave_agent:cp_channel
	wire         to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_startofpacket;        // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_startofpacket -> to_external_bus_bridge_0_avalon_slave_agent:cp_startofpacket
	wire         to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_endofpacket;          // to_external_bus_bridge_0_avalon_slave_burst_adapter:source0_endofpacket -> to_external_bus_bridge_0_avalon_slave_agent:cp_endofpacket
	wire         cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [88:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [5:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [88:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [5:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [88:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [5:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [88:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [5:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [88:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [5:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [88:0] cmd_demux_src5_data;                                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [5:0] cmd_demux_src5_channel;                                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [88:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [5:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [88:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [5:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [88:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [5:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [88:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [5:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [88:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [5:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [88:0] rsp_demux_005_src0_data;                                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [5:0] rsp_demux_005_src0_channel;                                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         router_001_src_valid;                                                             // router_001:src_valid -> to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:in_valid
	wire  [61:0] router_001_src_data;                                                              // router_001:src_data -> to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:in_data
	wire         router_001_src_ready;                                                             // to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:in_ready -> router_001:src_ready
	wire   [5:0] router_001_src_channel;                                                           // router_001:src_channel -> to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:in_channel
	wire         router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:in_startofpacket
	wire         router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:in_endofpacket
	wire         to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_valid;                // to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [88:0] to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_data;                 // to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire         to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_ready;                // rsp_demux:sink_ready -> to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:out_ready
	wire   [5:0] to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_channel;              // to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire         to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_startofpacket;        // to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire         to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_endofpacket;          // to_external_bus_bridge_0_avalon_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_valid
	wire  [88:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_data
	wire         cmd_mux_src_ready;                                                                // to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [5:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_channel
	wire         cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:in_endofpacket
	wire         to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_valid;                // to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_valid -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_valid
	wire  [61:0] to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_data;                 // to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_data -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_data
	wire         to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_ready;                // to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_ready -> to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_ready
	wire   [5:0] to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_channel;              // to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_channel -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_channel
	wire         to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_startofpacket;        // to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_startofpacket -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_startofpacket
	wire         to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_endofpacket;          // to_external_bus_bridge_0_avalon_slave_cmd_width_adapter:out_endofpacket -> to_external_bus_bridge_0_avalon_slave_burst_adapter:sink0_endofpacket
	wire   [5:0] mm_clock_crossing_bridge_0_m0_limiter_cmd_valid_data;                             // mm_clock_crossing_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_valid;                 // to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [9:0] to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_data;                  // to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_ready;                 // avalon_st_adapter:in_0_ready -> to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                    // to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> to_external_bus_bridge_0_avalon_slave_agent:rdata_fifo_sink_error
	wire         parameter_gpio_s1_agent_rdata_fifo_src_valid;                                     // Parameter_GPIO_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] parameter_gpio_s1_agent_rdata_fifo_src_data;                                      // Parameter_GPIO_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         parameter_gpio_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_001:in_0_ready -> Parameter_GPIO_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> Parameter_GPIO_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> Parameter_GPIO_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                // Parameter_GPIO_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> Parameter_GPIO_s1_agent:rdata_fifo_sink_error
	wire         parameter_rx_ram_s1_agent_rdata_fifo_src_valid;                                   // Parameter_RX_RAM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] parameter_rx_ram_s1_agent_rdata_fifo_src_data;                                    // Parameter_RX_RAM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         parameter_rx_ram_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_002:in_0_ready -> Parameter_RX_RAM_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> Parameter_RX_RAM_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> Parameter_RX_RAM_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                // Parameter_RX_RAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> Parameter_RX_RAM_s1_agent:rdata_fifo_sink_error
	wire         reset_s1_agent_rdata_fifo_src_valid;                                              // Reset_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] reset_s1_agent_rdata_fifo_src_data;                                               // Reset_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         reset_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_003:in_0_ready -> Reset_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> Reset_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> Reset_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                // Reset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> Reset_s1_agent:rdata_fifo_sink_error
	wire         parameter_tx_ram_s1_agent_rdata_fifo_src_valid;                                   // Parameter_TX_RAM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] parameter_tx_ram_s1_agent_rdata_fifo_src_data;                                    // Parameter_TX_RAM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         parameter_tx_ram_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_004:in_0_ready -> Parameter_TX_RAM_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> Parameter_TX_RAM_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> Parameter_TX_RAM_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                // Parameter_TX_RAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> Parameter_TX_RAM_s1_agent:rdata_fifo_sink_error
	wire         parameterlengthpage_s1_agent_rdata_fifo_src_valid;                                // ParameterLengthPage_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] parameterlengthpage_s1_agent_rdata_fifo_src_data;                                 // ParameterLengthPage_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         parameterlengthpage_s1_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_005:in_0_ready -> ParameterLengthPage_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                // avalon_st_adapter_005:out_0_valid -> ParameterLengthPage_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                 // avalon_st_adapter_005:out_0_data -> ParameterLengthPage_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                // ParameterLengthPage_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                // avalon_st_adapter_005:out_0_error -> ParameterLengthPage_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (15),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (15),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_clock_crossing_bridge_0_m0_translator (
		.clk                    (clk_0_clk_clk),                                                                    //                       clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_clock_crossing_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_clock_crossing_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_clock_crossing_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_clock_crossing_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_clock_crossing_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_clock_crossing_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_clock_crossing_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_clock_crossing_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_clock_crossing_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_clock_crossing_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) to_external_bus_bridge_0_avalon_slave_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (to_external_bus_bridge_0_avalon_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (to_external_bus_bridge_0_avalon_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (to_external_bus_bridge_0_avalon_slave_agent_m0_read),             //                         .read
		.uav_write              (to_external_bus_bridge_0_avalon_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (to_external_bus_bridge_0_avalon_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (to_external_bus_bridge_0_avalon_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (to_external_bus_bridge_0_avalon_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (to_external_bus_bridge_0_avalon_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (to_external_bus_bridge_0_avalon_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (to_external_bus_bridge_0_avalon_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (to_external_bus_bridge_0_avalon_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (to_external_bus_bridge_0_avalon_slave_address),                   //      avalon_anti_slave_0.address
		.av_write               (to_external_bus_bridge_0_avalon_slave_write),                     //                         .write
		.av_read                (to_external_bus_bridge_0_avalon_slave_read),                      //                         .read
		.av_readdata            (to_external_bus_bridge_0_avalon_slave_readdata),                  //                         .readdata
		.av_writedata           (to_external_bus_bridge_0_avalon_slave_writedata),                 //                         .writedata
		.av_byteenable          (to_external_bus_bridge_0_avalon_slave_byteenable),                //                         .byteenable
		.av_waitrequest         (to_external_bus_bridge_0_avalon_slave_waitrequest),               //                         .waitrequest
		.av_chipselect          (to_external_bus_bridge_0_avalon_slave_chipselect),                //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameter_gpio_s1_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameter_gpio_s1_agent_m0_address),                              // avalon_universal_slave_0.address
		.uav_burstcount         (parameter_gpio_s1_agent_m0_burstcount),                           //                         .burstcount
		.uav_read               (parameter_gpio_s1_agent_m0_read),                                 //                         .read
		.uav_write              (parameter_gpio_s1_agent_m0_write),                                //                         .write
		.uav_waitrequest        (parameter_gpio_s1_agent_m0_waitrequest),                          //                         .waitrequest
		.uav_readdatavalid      (parameter_gpio_s1_agent_m0_readdatavalid),                        //                         .readdatavalid
		.uav_byteenable         (parameter_gpio_s1_agent_m0_byteenable),                           //                         .byteenable
		.uav_readdata           (parameter_gpio_s1_agent_m0_readdata),                             //                         .readdata
		.uav_writedata          (parameter_gpio_s1_agent_m0_writedata),                            //                         .writedata
		.uav_lock               (parameter_gpio_s1_agent_m0_lock),                                 //                         .lock
		.uav_debugaccess        (parameter_gpio_s1_agent_m0_debugaccess),                          //                         .debugaccess
		.av_address             (Parameter_GPIO_s1_address),                                       //      avalon_anti_slave_0.address
		.av_write               (Parameter_GPIO_s1_write),                                         //                         .write
		.av_readdata            (Parameter_GPIO_s1_readdata),                                      //                         .readdata
		.av_writedata           (Parameter_GPIO_s1_writedata),                                     //                         .writedata
		.av_chipselect          (Parameter_GPIO_s1_chipselect),                                    //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameter_rx_ram_s1_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameter_rx_ram_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (parameter_rx_ram_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (parameter_rx_ram_s1_agent_m0_read),                               //                         .read
		.uav_write              (parameter_rx_ram_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (parameter_rx_ram_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (parameter_rx_ram_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (parameter_rx_ram_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (parameter_rx_ram_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (parameter_rx_ram_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (parameter_rx_ram_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (parameter_rx_ram_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (Parameter_RX_RAM_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (Parameter_RX_RAM_s1_write),                                       //                         .write
		.av_readdata            (Parameter_RX_RAM_s1_readdata),                                    //                         .readdata
		.av_writedata           (Parameter_RX_RAM_s1_writedata),                                   //                         .writedata
		.av_byteenable          (Parameter_RX_RAM_s1_byteenable),                                  //                         .byteenable
		.av_chipselect          (Parameter_RX_RAM_s1_chipselect),                                  //                         .chipselect
		.av_clken               (Parameter_RX_RAM_s1_clken),                                       //                         .clken
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reset_s1_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (reset_s1_agent_m0_address),                                       // avalon_universal_slave_0.address
		.uav_burstcount         (reset_s1_agent_m0_burstcount),                                    //                         .burstcount
		.uav_read               (reset_s1_agent_m0_read),                                          //                         .read
		.uav_write              (reset_s1_agent_m0_write),                                         //                         .write
		.uav_waitrequest        (reset_s1_agent_m0_waitrequest),                                   //                         .waitrequest
		.uav_readdatavalid      (reset_s1_agent_m0_readdatavalid),                                 //                         .readdatavalid
		.uav_byteenable         (reset_s1_agent_m0_byteenable),                                    //                         .byteenable
		.uav_readdata           (reset_s1_agent_m0_readdata),                                      //                         .readdata
		.uav_writedata          (reset_s1_agent_m0_writedata),                                     //                         .writedata
		.uav_lock               (reset_s1_agent_m0_lock),                                          //                         .lock
		.uav_debugaccess        (reset_s1_agent_m0_debugaccess),                                   //                         .debugaccess
		.av_address             (Reset_s1_address),                                                //      avalon_anti_slave_0.address
		.av_write               (Reset_s1_write),                                                  //                         .write
		.av_readdata            (Reset_s1_readdata),                                               //                         .readdata
		.av_writedata           (Reset_s1_writedata),                                              //                         .writedata
		.av_chipselect          (Reset_s1_chipselect),                                             //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameter_tx_ram_s1_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameter_tx_ram_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (parameter_tx_ram_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (parameter_tx_ram_s1_agent_m0_read),                               //                         .read
		.uav_write              (parameter_tx_ram_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (parameter_tx_ram_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (parameter_tx_ram_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (parameter_tx_ram_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (parameter_tx_ram_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (parameter_tx_ram_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (parameter_tx_ram_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (parameter_tx_ram_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (Parameter_TX_RAM_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (Parameter_TX_RAM_s1_write),                                       //                         .write
		.av_readdata            (Parameter_TX_RAM_s1_readdata),                                    //                         .readdata
		.av_writedata           (Parameter_TX_RAM_s1_writedata),                                   //                         .writedata
		.av_byteenable          (Parameter_TX_RAM_s1_byteenable),                                  //                         .byteenable
		.av_chipselect          (Parameter_TX_RAM_s1_chipselect),                                  //                         .chipselect
		.av_clken               (Parameter_TX_RAM_s1_clken),                                       //                         .clken
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (15),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameterlengthpage_s1_translator (
		.clk                    (clk_0_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameterlengthpage_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (parameterlengthpage_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (parameterlengthpage_s1_agent_m0_read),                            //                         .read
		.uav_write              (parameterlengthpage_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (parameterlengthpage_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (parameterlengthpage_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (parameterlengthpage_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (parameterlengthpage_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (parameterlengthpage_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (parameterlengthpage_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (parameterlengthpage_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (ParameterLengthPage_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (ParameterLengthPage_s1_write),                                    //                         .write
		.av_readdata            (ParameterLengthPage_s1_readdata),                                 //                         .readdata
		.av_writedata           (ParameterLengthPage_s1_writedata),                                //                         .writedata
		.av_chipselect          (ParameterLengthPage_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_QOS_H                 (69),
		.PKT_QOS_L                 (69),
		.PKT_DATA_SIDEBAND_H       (67),
		.PKT_DATA_SIDEBAND_L       (67),
		.PKT_ADDR_SIDEBAND_H       (66),
		.PKT_ADDR_SIDEBAND_L       (66),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_CACHE_H               (83),
		.PKT_CACHE_L               (80),
		.PKT_THREAD_ID_H           (76),
		.PKT_THREAD_ID_L           (76),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_EXCLUSIVE       (56),
		.PKT_TRANS_LOCK            (55),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_clock_crossing_bridge_0_m0_agent (
		.clk                   (clk_0_clk_clk),                                                                    //       clk.clk
		.reset                 (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_clock_crossing_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_clock_crossing_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_clock_crossing_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_clock_crossing_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_clock_crossing_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_clock_crossing_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (61),
		.PKT_ORI_BURST_SIZE_L      (59),
		.PKT_RESPONSE_STATUS_H     (58),
		.PKT_RESPONSE_STATUS_L     (57),
		.PKT_BURST_SIZE_H          (36),
		.PKT_BURST_SIZE_L          (34),
		.PKT_TRANS_LOCK            (28),
		.PKT_BEGIN_BURST           (41),
		.PKT_PROTECTION_H          (52),
		.PKT_PROTECTION_L          (50),
		.PKT_BURSTWRAP_H           (33),
		.PKT_BURSTWRAP_L           (33),
		.PKT_BYTE_CNT_H            (32),
		.PKT_BYTE_CNT_L            (30),
		.PKT_ADDR_H                (23),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (24),
		.PKT_TRANS_POSTED          (25),
		.PKT_TRANS_WRITE           (26),
		.PKT_TRANS_READ            (27),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (45),
		.PKT_SRC_ID_L              (43),
		.PKT_DEST_ID_H             (48),
		.PKT_DEST_ID_L             (46),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (62),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) to_external_bus_bridge_0_avalon_slave_agent (
		.clk                     (clk_0_clk_clk),                                                             //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (to_external_bus_bridge_0_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (to_external_bus_bridge_0_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (to_external_bus_bridge_0_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (to_external_bus_bridge_0_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (to_external_bus_bridge_0_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (to_external_bus_bridge_0_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (to_external_bus_bridge_0_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (to_external_bus_bridge_0_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (to_external_bus_bridge_0_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (to_external_bus_bridge_0_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (to_external_bus_bridge_0_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (to_external_bus_bridge_0_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (to_external_bus_bridge_0_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (to_external_bus_bridge_0_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (to_external_bus_bridge_0_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (to_external_bus_bridge_0_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (to_external_bus_bridge_0_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (to_external_bus_bridge_0_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (to_external_bus_bridge_0_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (to_external_bus_bridge_0_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (to_external_bus_bridge_0_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                             //                .error
		.rdata_fifo_src_ready    (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (63),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                          //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (to_external_bus_bridge_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (to_external_bus_bridge_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (to_external_bus_bridge_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (to_external_bus_bridge_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (to_external_bus_bridge_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (to_external_bus_bridge_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (55),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameter_gpio_s1_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (parameter_gpio_s1_agent_m0_address),                              //              m0.address
		.m0_burstcount           (parameter_gpio_s1_agent_m0_burstcount),                           //                .burstcount
		.m0_byteenable           (parameter_gpio_s1_agent_m0_byteenable),                           //                .byteenable
		.m0_debugaccess          (parameter_gpio_s1_agent_m0_debugaccess),                          //                .debugaccess
		.m0_lock                 (parameter_gpio_s1_agent_m0_lock),                                 //                .lock
		.m0_readdata             (parameter_gpio_s1_agent_m0_readdata),                             //                .readdata
		.m0_readdatavalid        (parameter_gpio_s1_agent_m0_readdatavalid),                        //                .readdatavalid
		.m0_read                 (parameter_gpio_s1_agent_m0_read),                                 //                .read
		.m0_waitrequest          (parameter_gpio_s1_agent_m0_waitrequest),                          //                .waitrequest
		.m0_writedata            (parameter_gpio_s1_agent_m0_writedata),                            //                .writedata
		.m0_write                (parameter_gpio_s1_agent_m0_write),                                //                .write
		.rp_endofpacket          (parameter_gpio_s1_agent_rp_endofpacket),                          //              rp.endofpacket
		.rp_ready                (parameter_gpio_s1_agent_rp_ready),                                //                .ready
		.rp_valid                (parameter_gpio_s1_agent_rp_valid),                                //                .valid
		.rp_data                 (parameter_gpio_s1_agent_rp_data),                                 //                .data
		.rp_startofpacket        (parameter_gpio_s1_agent_rp_startofpacket),                        //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                         //                .channel
		.rf_sink_ready           (parameter_gpio_s1_agent_rsp_fifo_out_ready),                      //         rf_sink.ready
		.rf_sink_valid           (parameter_gpio_s1_agent_rsp_fifo_out_valid),                      //                .valid
		.rf_sink_startofpacket   (parameter_gpio_s1_agent_rsp_fifo_out_startofpacket),              //                .startofpacket
		.rf_sink_endofpacket     (parameter_gpio_s1_agent_rsp_fifo_out_endofpacket),                //                .endofpacket
		.rf_sink_data            (parameter_gpio_s1_agent_rsp_fifo_out_data),                       //                .data
		.rf_source_ready         (parameter_gpio_s1_agent_rf_source_ready),                         //       rf_source.ready
		.rf_source_valid         (parameter_gpio_s1_agent_rf_source_valid),                         //                .valid
		.rf_source_startofpacket (parameter_gpio_s1_agent_rf_source_startofpacket),                 //                .startofpacket
		.rf_source_endofpacket   (parameter_gpio_s1_agent_rf_source_endofpacket),                   //                .endofpacket
		.rf_source_data          (parameter_gpio_s1_agent_rf_source_data),                          //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (parameter_gpio_s1_agent_rdata_fifo_src_ready),                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameter_gpio_s1_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_src_data     (parameter_gpio_s1_agent_rdata_fifo_src_data),                     //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameter_gpio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (parameter_gpio_s1_agent_rf_source_data),                          //        in.data
		.in_valid          (parameter_gpio_s1_agent_rf_source_valid),                         //          .valid
		.in_ready          (parameter_gpio_s1_agent_rf_source_ready),                         //          .ready
		.in_startofpacket  (parameter_gpio_s1_agent_rf_source_startofpacket),                 //          .startofpacket
		.in_endofpacket    (parameter_gpio_s1_agent_rf_source_endofpacket),                   //          .endofpacket
		.out_data          (parameter_gpio_s1_agent_rsp_fifo_out_data),                       //       out.data
		.out_valid         (parameter_gpio_s1_agent_rsp_fifo_out_valid),                      //          .valid
		.out_ready         (parameter_gpio_s1_agent_rsp_fifo_out_ready),                      //          .ready
		.out_startofpacket (parameter_gpio_s1_agent_rsp_fifo_out_startofpacket),              //          .startofpacket
		.out_endofpacket   (parameter_gpio_s1_agent_rsp_fifo_out_endofpacket),                //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (55),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameter_rx_ram_s1_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (parameter_rx_ram_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (parameter_rx_ram_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (parameter_rx_ram_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (parameter_rx_ram_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (parameter_rx_ram_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (parameter_rx_ram_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (parameter_rx_ram_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (parameter_rx_ram_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (parameter_rx_ram_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (parameter_rx_ram_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (parameter_rx_ram_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (parameter_rx_ram_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (parameter_rx_ram_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (parameter_rx_ram_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (parameter_rx_ram_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (parameter_rx_ram_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                         //                .channel
		.rf_sink_ready           (parameter_rx_ram_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (parameter_rx_ram_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (parameter_rx_ram_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (parameter_rx_ram_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (parameter_rx_ram_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (parameter_rx_ram_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (parameter_rx_ram_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (parameter_rx_ram_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (parameter_rx_ram_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (parameter_rx_ram_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (parameter_rx_ram_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameter_rx_ram_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (parameter_rx_ram_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameter_rx_ram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (parameter_rx_ram_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (parameter_rx_ram_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (parameter_rx_ram_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (parameter_rx_ram_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (parameter_rx_ram_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (parameter_rx_ram_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (parameter_rx_ram_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (parameter_rx_ram_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (parameter_rx_ram_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (parameter_rx_ram_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (55),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) reset_s1_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (reset_s1_agent_m0_address),                                       //              m0.address
		.m0_burstcount           (reset_s1_agent_m0_burstcount),                                    //                .burstcount
		.m0_byteenable           (reset_s1_agent_m0_byteenable),                                    //                .byteenable
		.m0_debugaccess          (reset_s1_agent_m0_debugaccess),                                   //                .debugaccess
		.m0_lock                 (reset_s1_agent_m0_lock),                                          //                .lock
		.m0_readdata             (reset_s1_agent_m0_readdata),                                      //                .readdata
		.m0_readdatavalid        (reset_s1_agent_m0_readdatavalid),                                 //                .readdatavalid
		.m0_read                 (reset_s1_agent_m0_read),                                          //                .read
		.m0_waitrequest          (reset_s1_agent_m0_waitrequest),                                   //                .waitrequest
		.m0_writedata            (reset_s1_agent_m0_writedata),                                     //                .writedata
		.m0_write                (reset_s1_agent_m0_write),                                         //                .write
		.rp_endofpacket          (reset_s1_agent_rp_endofpacket),                                   //              rp.endofpacket
		.rp_ready                (reset_s1_agent_rp_ready),                                         //                .ready
		.rp_valid                (reset_s1_agent_rp_valid),                                         //                .valid
		.rp_data                 (reset_s1_agent_rp_data),                                          //                .data
		.rp_startofpacket        (reset_s1_agent_rp_startofpacket),                                 //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                         //                .channel
		.rf_sink_ready           (reset_s1_agent_rsp_fifo_out_ready),                               //         rf_sink.ready
		.rf_sink_valid           (reset_s1_agent_rsp_fifo_out_valid),                               //                .valid
		.rf_sink_startofpacket   (reset_s1_agent_rsp_fifo_out_startofpacket),                       //                .startofpacket
		.rf_sink_endofpacket     (reset_s1_agent_rsp_fifo_out_endofpacket),                         //                .endofpacket
		.rf_sink_data            (reset_s1_agent_rsp_fifo_out_data),                                //                .data
		.rf_source_ready         (reset_s1_agent_rf_source_ready),                                  //       rf_source.ready
		.rf_source_valid         (reset_s1_agent_rf_source_valid),                                  //                .valid
		.rf_source_startofpacket (reset_s1_agent_rf_source_startofpacket),                          //                .startofpacket
		.rf_source_endofpacket   (reset_s1_agent_rf_source_endofpacket),                            //                .endofpacket
		.rf_source_data          (reset_s1_agent_rf_source_data),                                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (reset_s1_agent_rdata_fifo_src_ready),                             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reset_s1_agent_rdata_fifo_src_valid),                             //                .valid
		.rdata_fifo_src_data     (reset_s1_agent_rdata_fifo_src_data),                              //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (reset_s1_agent_rf_source_data),                                   //        in.data
		.in_valid          (reset_s1_agent_rf_source_valid),                                  //          .valid
		.in_ready          (reset_s1_agent_rf_source_ready),                                  //          .ready
		.in_startofpacket  (reset_s1_agent_rf_source_startofpacket),                          //          .startofpacket
		.in_endofpacket    (reset_s1_agent_rf_source_endofpacket),                            //          .endofpacket
		.out_data          (reset_s1_agent_rsp_fifo_out_data),                                //       out.data
		.out_valid         (reset_s1_agent_rsp_fifo_out_valid),                               //          .valid
		.out_ready         (reset_s1_agent_rsp_fifo_out_ready),                               //          .ready
		.out_startofpacket (reset_s1_agent_rsp_fifo_out_startofpacket),                       //          .startofpacket
		.out_endofpacket   (reset_s1_agent_rsp_fifo_out_endofpacket),                         //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (55),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameter_tx_ram_s1_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (parameter_tx_ram_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (parameter_tx_ram_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (parameter_tx_ram_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (parameter_tx_ram_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (parameter_tx_ram_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (parameter_tx_ram_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (parameter_tx_ram_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (parameter_tx_ram_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (parameter_tx_ram_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (parameter_tx_ram_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (parameter_tx_ram_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (parameter_tx_ram_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (parameter_tx_ram_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (parameter_tx_ram_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (parameter_tx_ram_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (parameter_tx_ram_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                         //                .channel
		.rf_sink_ready           (parameter_tx_ram_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (parameter_tx_ram_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (parameter_tx_ram_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (parameter_tx_ram_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (parameter_tx_ram_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (parameter_tx_ram_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (parameter_tx_ram_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (parameter_tx_ram_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (parameter_tx_ram_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (parameter_tx_ram_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (parameter_tx_ram_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameter_tx_ram_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (parameter_tx_ram_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameter_tx_ram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (parameter_tx_ram_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (parameter_tx_ram_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (parameter_tx_ram_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (parameter_tx_ram_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (parameter_tx_ram_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (parameter_tx_ram_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (parameter_tx_ram_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (parameter_tx_ram_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (parameter_tx_ram_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (parameter_tx_ram_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_LOCK            (55),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (60),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_ADDR_H                (50),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (51),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.PKT_TRANS_READ            (54),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameterlengthpage_s1_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (parameterlengthpage_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (parameterlengthpage_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (parameterlengthpage_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (parameterlengthpage_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (parameterlengthpage_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (parameterlengthpage_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (parameterlengthpage_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (parameterlengthpage_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (parameterlengthpage_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (parameterlengthpage_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (parameterlengthpage_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (parameterlengthpage_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (parameterlengthpage_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (parameterlengthpage_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (parameterlengthpage_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (parameterlengthpage_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                         //                .channel
		.rf_sink_ready           (parameterlengthpage_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (parameterlengthpage_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (parameterlengthpage_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (parameterlengthpage_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (parameterlengthpage_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (parameterlengthpage_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (parameterlengthpage_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (parameterlengthpage_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (parameterlengthpage_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (parameterlengthpage_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (parameterlengthpage_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameterlengthpage_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (parameterlengthpage_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameterlengthpage_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (parameterlengthpage_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (parameterlengthpage_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (parameterlengthpage_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (parameterlengthpage_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (parameterlengthpage_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (parameterlengthpage_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (parameterlengthpage_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (parameterlengthpage_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (parameterlengthpage_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (parameterlengthpage_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_router router (
		.sink_ready         (mm_clock_crossing_bridge_0_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (mm_clock_crossing_bridge_0_m0_agent_cp_valid),                    //          .valid
		.sink_data          (mm_clock_crossing_bridge_0_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (mm_clock_crossing_bridge_0_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_0_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                //       src.ready
		.src_valid          (router_src_valid),                                                //          .valid
		.src_data           (router_src_data),                                                 //          .data
		.src_channel        (router_src_channel),                                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                           //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (to_external_bus_bridge_0_avalon_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (to_external_bus_bridge_0_avalon_slave_agent_rp_valid),            //          .valid
		.sink_data          (to_external_bus_bridge_0_avalon_slave_agent_rp_data),             //          .data
		.sink_startofpacket (to_external_bus_bridge_0_avalon_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (to_external_bus_bridge_0_avalon_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                            //       src.ready
		.src_valid          (router_001_src_valid),                                            //          .valid
		.src_data           (router_001_src_data),                                             //          .data
		.src_channel        (router_001_src_channel),                                          //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (parameter_gpio_s1_agent_rp_ready),                                //      sink.ready
		.sink_valid         (parameter_gpio_s1_agent_rp_valid),                                //          .valid
		.sink_data          (parameter_gpio_s1_agent_rp_data),                                 //          .data
		.sink_startofpacket (parameter_gpio_s1_agent_rp_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (parameter_gpio_s1_agent_rp_endofpacket),                          //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //       src.ready
		.src_valid          (router_002_src_valid),                                            //          .valid
		.src_data           (router_002_src_data),                                             //          .data
		.src_channel        (router_002_src_channel),                                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (parameter_rx_ram_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (parameter_rx_ram_s1_agent_rp_valid),                              //          .valid
		.sink_data          (parameter_rx_ram_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (parameter_rx_ram_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (parameter_rx_ram_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //       src.ready
		.src_valid          (router_003_src_valid),                                            //          .valid
		.src_data           (router_003_src_data),                                             //          .data
		.src_channel        (router_003_src_channel),                                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (reset_s1_agent_rp_ready),                                         //      sink.ready
		.sink_valid         (reset_s1_agent_rp_valid),                                         //          .valid
		.sink_data          (reset_s1_agent_rp_data),                                          //          .data
		.sink_startofpacket (reset_s1_agent_rp_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (reset_s1_agent_rp_endofpacket),                                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                            //       src.ready
		.src_valid          (router_004_src_valid),                                            //          .valid
		.src_data           (router_004_src_data),                                             //          .data
		.src_channel        (router_004_src_channel),                                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (parameter_tx_ram_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (parameter_tx_ram_s1_agent_rp_valid),                              //          .valid
		.sink_data          (parameter_tx_ram_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (parameter_tx_ram_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (parameter_tx_ram_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                            //       src.ready
		.src_valid          (router_005_src_valid),                                            //          .valid
		.src_data           (router_005_src_data),                                             //          .data
		.src_channel        (router_005_src_channel),                                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (parameterlengthpage_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (parameterlengthpage_s1_agent_rp_valid),                           //          .valid
		.sink_data          (parameterlengthpage_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (parameterlengthpage_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (parameterlengthpage_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                            //       src.ready
		.src_valid          (router_006_src_valid),                                            //          .valid
		.src_data           (router_006_src_data),                                             //          .data
		.src_channel        (router_006_src_channel),                                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (73),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (70),
		.PKT_BYTE_CNT_H            (59),
		.PKT_BYTE_CNT_L            (57),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (52),
		.PKT_TRANS_WRITE           (53),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_clock_crossing_bridge_0_m0_limiter (
		.clk                    (clk_0_clk_clk),                                                   //       clk.clk
		.reset                  (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                //          .valid
		.cmd_sink_data          (router_src_data),                                                 //          .data
		.cmd_sink_channel       (router_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (mm_clock_crossing_bridge_0_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (mm_clock_crossing_bridge_0_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (23),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (41),
		.PKT_BYTE_CNT_H            (32),
		.PKT_BYTE_CNT_L            (30),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (36),
		.PKT_BURST_SIZE_L          (34),
		.PKT_BURST_TYPE_H          (38),
		.PKT_BURST_TYPE_L          (37),
		.PKT_BURSTWRAP_H           (33),
		.PKT_BURSTWRAP_L           (33),
		.PKT_TRANS_COMPRESSED_READ (24),
		.PKT_TRANS_WRITE           (26),
		.PKT_TRANS_READ            (27),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (62),
		.ST_CHANNEL_W              (6),
		.OUT_BYTE_CNT_H            (30),
		.OUT_BURSTWRAP_H           (33),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) to_external_bus_bridge_0_avalon_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                             //       cr0.clk
		.reset                 (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (to_external_bus_bridge_0_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                   //        clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel       (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data          (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_0_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid         (mm_clock_crossing_bridge_0_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                      //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                            //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                            //           .valid
		.src5_data          (cmd_demux_src5_data),                                             //           .data
		.src5_channel       (cmd_demux_src5_channel),                                          //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                                       //           .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src0_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                           //          .valid
		.src_data            (cmd_mux_001_src_data),                                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src1_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                           //          .valid
		.src_data            (cmd_mux_002_src_data),                                            //          .data
		.src_channel         (cmd_mux_002_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src2_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                           //          .valid
		.src_data            (cmd_mux_003_src_data),                                            //          .data
		.src_channel         (cmd_mux_003_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src3_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                           //          .valid
		.src_data            (cmd_mux_004_src_data),                                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src4_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                           //          .valid
		.src_data            (cmd_mux_005_src_data),                                            //          .data
		.src_channel         (cmd_mux_005_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src5_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                                       //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                             //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.sink_ready         (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                 //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                            //      sink.ready
		.sink_channel       (router_002_src_channel),                                          //          .channel
		.sink_data          (router_002_src_data),                                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                            //      sink.ready
		.sink_channel       (router_003_src_channel),                                          //          .channel
		.sink_data          (router_003_src_data),                                             //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_003_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                            //      sink.ready
		.sink_channel       (router_004_src_channel),                                          //          .channel
		.sink_data          (router_004_src_data),                                             //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_004_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                            //      sink.ready
		.sink_channel       (router_005_src_channel),                                          //          .channel
		.sink_data          (router_005_src_data),                                             //          .data
		.sink_startofpacket (router_005_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_005_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                            //      sink.ready
		.sink_channel       (router_006_src_channel),                                          //          .channel
		.sink_data          (router_006_src_data),                                             //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_006_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                                   //          .endofpacket
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_src_valid),                                               //          .valid
		.src_data            (rsp_mux_src_data),                                                //          .data
		.src_channel         (rsp_mux_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                            //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                            //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                          //          .channel
		.sink0_data          (rsp_demux_src0_data),                                             //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                      //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                        //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                        //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                      //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                         //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                  //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                        //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                        //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                      //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                         //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                  //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                        //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                        //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                      //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                         //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                  //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                        //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                        //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                      //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                         //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                  //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                        //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                        //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                      //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                         //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                                //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (23),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (32),
		.IN_PKT_BYTE_CNT_L             (30),
		.IN_PKT_TRANS_COMPRESSED_READ  (24),
		.IN_PKT_TRANS_WRITE            (26),
		.IN_PKT_BURSTWRAP_H            (33),
		.IN_PKT_BURSTWRAP_L            (33),
		.IN_PKT_BURST_SIZE_H           (36),
		.IN_PKT_BURST_SIZE_L           (34),
		.IN_PKT_RESPONSE_STATUS_H      (58),
		.IN_PKT_RESPONSE_STATUS_L      (57),
		.IN_PKT_TRANS_EXCLUSIVE        (29),
		.IN_PKT_BURST_TYPE_H           (38),
		.IN_PKT_BURST_TYPE_L           (37),
		.IN_PKT_ORI_BURST_SIZE_L       (59),
		.IN_PKT_ORI_BURST_SIZE_H       (61),
		.IN_ST_DATA_W                  (62),
		.OUT_PKT_ADDR_H                (50),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (59),
		.OUT_PKT_BYTE_CNT_L            (57),
		.OUT_PKT_TRANS_COMPRESSED_READ (51),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (56),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) to_external_bus_bridge_0_avalon_slave_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                             //       clk.clk
		.reset                (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (router_001_src_valid),                                                      //      sink.valid
		.in_channel           (router_001_src_channel),                                                    //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                                //          .endofpacket
		.in_ready             (router_001_src_ready),                                                      //          .ready
		.in_data              (router_001_src_data),                                                       //          .data
		.out_endofpacket      (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (to_external_bus_bridge_0_avalon_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (50),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (59),
		.IN_PKT_BYTE_CNT_L             (57),
		.IN_PKT_TRANS_COMPRESSED_READ  (51),
		.IN_PKT_TRANS_WRITE            (53),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (60),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (56),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (23),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (32),
		.OUT_PKT_BYTE_CNT_L            (30),
		.OUT_PKT_TRANS_COMPRESSED_READ (24),
		.OUT_PKT_BURST_SIZE_H          (36),
		.OUT_PKT_BURST_SIZE_L          (34),
		.OUT_PKT_RESPONSE_STATUS_H     (58),
		.OUT_PKT_RESPONSE_STATUS_L     (57),
		.OUT_PKT_TRANS_EXCLUSIVE       (29),
		.OUT_PKT_BURST_TYPE_H          (38),
		.OUT_PKT_BURST_TYPE_L          (37),
		.OUT_PKT_ORI_BURST_SIZE_L      (59),
		.OUT_PKT_ORI_BURST_SIZE_H      (61),
		.OUT_ST_DATA_W                 (62),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) to_external_bus_bridge_0_avalon_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                             //       clk.clk
		.reset                (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                         //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                       //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                   //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                         //          .ready
		.in_data              (cmd_mux_src_data),                                                          //          .data
		.out_endofpacket      (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (to_external_bus_bridge_0_avalon_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated)
	);

	Mk8_InlineController_CPU_Parameter_SYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                    // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (to_external_bus_bridge_0_avalon_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                    //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                    //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                     //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameter_gpio_s1_agent_rdata_fifo_src_data),                     //     in_0.data
		.in_0_valid     (parameter_gpio_s1_agent_rdata_fifo_src_valid),                    //         .valid
		.in_0_ready     (parameter_gpio_s1_agent_rdata_fifo_src_ready),                    //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameter_rx_ram_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (parameter_rx_ram_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (parameter_rx_ram_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (reset_s1_agent_rdata_fifo_src_data),                              //     in_0.data
		.in_0_valid     (reset_s1_agent_rdata_fifo_src_valid),                             //         .valid
		.in_0_ready     (reset_s1_agent_rdata_fifo_src_ready),                             //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameter_tx_ram_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (parameter_tx_ram_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (parameter_tx_ram_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                //         .error
	);

	Mk8_InlineController_CPU_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_0_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameterlengthpage_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (parameterlengthpage_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (parameterlengthpage_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                                //         .error
	);

endmodule
