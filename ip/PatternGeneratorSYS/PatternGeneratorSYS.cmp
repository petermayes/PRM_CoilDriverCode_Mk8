	component PatternGeneratorSYS is
		port (
			pd_clk_clk                : in  std_logic                     := 'X';             -- clk
			pd_debugram_s1_address    : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- address
			pd_debugram_s1_clken      : in  std_logic                     := 'X';             -- clken
			pd_debugram_s1_chipselect : in  std_logic                     := 'X';             -- chipselect
			pd_debugram_s1_write      : in  std_logic                     := 'X';             -- write
			pd_debugram_s1_readdata   : out std_logic_vector(31 downto 0);                    -- readdata
			pd_debugram_s1_writedata  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			pd_debugram_s1_byteenable : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			pd_debugram_s2_address    : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- address
			pd_debugram_s2_chipselect : in  std_logic                     := 'X';             -- chipselect
			pd_debugram_s2_clken      : in  std_logic                     := 'X';             -- clken
			pd_debugram_s2_write      : in  std_logic                     := 'X';             -- write
			pd_debugram_s2_readdata   : out std_logic_vector(31 downto 0);                    -- readdata
			pd_debugram_s2_writedata  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			pd_debugram_s2_byteenable : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			pd_fifo_in_writedata      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			pd_fifo_in_write          : in  std_logic                     := 'X';             -- write
			pd_fifo_in_waitrequest    : out std_logic;                                        -- waitrequest
			pd_fifo_in_csr_address    : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			pd_fifo_in_csr_read       : in  std_logic                     := 'X';             -- read
			pd_fifo_in_csr_writedata  : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			pd_fifo_in_csr_write      : in  std_logic                     := 'X';             -- write
			pd_fifo_in_csr_readdata   : out std_logic_vector(31 downto 0);                    -- readdata
			pd_fifo_out_readdata      : out std_logic_vector(31 downto 0);                    -- readdata
			pd_fifo_out_read          : in  std_logic                     := 'X';             -- read
			pd_fifo_out_waitrequest   : out std_logic;                                        -- waitrequest
			pd_fifo_out_csr_address   : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			pd_fifo_out_csr_read      : in  std_logic                     := 'X';             -- read
			pd_fifo_out_csr_writedata : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			pd_fifo_out_csr_write     : in  std_logic                     := 'X';             -- write
			pd_fifo_out_csr_readdata  : out std_logic_vector(31 downto 0);                    -- readdata
			pd_gpio_in_port           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- in_port
			pd_gpio_out_port          : out std_logic_vector(31 downto 0);                    -- out_port
			pd_gpio_s1_address        : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			pd_gpio_s1_write_n        : in  std_logic                     := 'X';             -- write_n
			pd_gpio_s1_writedata      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			pd_gpio_s1_chipselect     : in  std_logic                     := 'X';             -- chipselect
			pd_gpio_s1_readdata       : out std_logic_vector(31 downto 0);                    -- readdata
			pd_reset_reset_n          : in  std_logic                     := 'X';             -- reset_n
			pheriphal_clk_clk         : in  std_logic                     := 'X';             -- clk
			pheriphal_reset_reset_n   : in  std_logic                     := 'X';             -- reset_n
			reset_out_export          : out std_logic;                                        -- export
			reset_pd_s1_address       : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			reset_pd_s1_write_n       : in  std_logic                     := 'X';             -- write_n
			reset_pd_s1_writedata     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			reset_pd_s1_chipselect    : in  std_logic                     := 'X';             -- chipselect
			reset_pd_s1_readdata      : out std_logic_vector(31 downto 0)                     -- readdata
		);
	end component PatternGeneratorSYS;

